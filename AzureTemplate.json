{
    "$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
    "contentVersion": "1.0.0.0",
    "parameters": {
        "env_Brand": {
            "type": "string",
            "allowedValues": [
                "hnau",
                "hnnz",
                "hnie",
                "hnuk",
                "jmau",
                "dmau"
            ],
            "defaultValue": "hnau",
            "metadata": {
                "description": "Environment Brand"
            }
        },
        "env_Description": {
            "type": "string",
			"defaultValue": "Web HNAU Dev XX Instance",
            "minLength": 1,
            "metadata": {
                "description": "Environment Description"
            }
        },
        "env_Type": {
            "type": "string",
            "allowedValues": [
                "dev",
                "test",
                "prod",
                "dr"
            ],
            "defaultValue": "dev",
            "metadata": {
                "description": "Environment Type"
            }
        },
        "env_Instance": {
            "type": "int",
            "minValue": 1,
            "maxValue": 15,
            "defaultValue": 1,
            "metadata": {
                "description": "Environment Instance"
            }
        },
        "env_Owner": {
            "type": "string",
            "minLength": 1,
            "maxLength": 20,
            "metadata": {
                "description": "Environment Owner"
            }
        },
        "env_GitRepository": {
            "type": "string",
            "minLength": 1,
            "defaultValue": "https://raw.githubusercontent.com/jbajada/test/master",
            "metadata": {
                "description": "Git Repository"
            }
        },
        "env_GitUsername": {
            "type": "string",
            "minLength": 1,
            "defaultValue": "autodeploy",
            "metadata": {
                "description": "Git Username"
            }
        },
        "env_GitPassword": {
            "type": "securestring",
            "minLength": 1,
            "metadata": {
                "description": "Git Password"
            }
        },
        "env_PuppetServer": {
            "type": "string",
            "minLength": 1,
            "defaultValue": "puppetmaster-azure.dev.hndigital.net",
            "metadata": {
                "description": "Puppet Server URL"
            }
        },
        "env_jobScheduleGUID": {
            "type": "string",
            "minLength": 1,
            "defaultValue": "AA21C792-5171-4AB5-85CC-02A9DC2CF0D7",
            "metadata": {
                "description": "Unique Job Scheduler GUID"
            }
        },
        "env_azurePassword": {
            "type": "securestring",
            "minLength": 1,
            "metadata": {
                "description": "Azure Automation Account Password"
            }
        },
        "env_startupUtcDateTime": {
            "type": "string",
            "metadata": {
                "description": "The startup datetime, as a string in UTC time, for scheduler purposes; example in parameters file is in MM/dd/yyyy H:mm:ss tt format"
            }
        },
        "env_shutdownUtcDateTime": {
            "type": "string",
            "metadata": {
                "description": "The shutdown datetime, as a string in UTC time, for scheduler purposes; example in parameters file is in MM/dd/yyyy H:mm:ss tt format"
            }
        }
    },
    "variables": {
        "v_TemplateVersion": "v1.6",
        "v_EnvironmentPrefix": "hndg-www",
        "v_Username": "hndgRoot",
        "v_Password": "password007",
        "v_azureUsername": "srv_hndg_dev_automation@au.harveynorman.com",
        "v_NetworkRangePrefix": "10.224.",
        "v_AddressRangeOffsets": {
            "dev": {
                "ThirdOctet": 0,
                "FourthOctet": 0
            },
            "test": {
                "ThirdOctet": 15,
                "FourthOctet": 0
            },
            "prod": {
                "ThirdOctet": 31,
                "FourthOctet": 0
            },
            "dr": {
                "ThirdOctet": 31,
                "FourthOctet": 0
            }
        },
        "v_StorageAccounts": {
            "dev": [
                {
                    "Name": "OperatingSystemStorage",
                    "Type": "Standard_LRS",
                    "Prefix": "os"
                },
                {
                    "Name": "DataStorage",
                    "Type": "Standard_LRS",
                    "Prefix": "ds"
                },
                {
                    "Name": "DataStorage",
                    "Type": "Standard_LRS",
                    "Prefix": "lg"
                }
            ],
            "test": [
                {
                    "Name": "OperatingSystemStorage",
                    "Type": "Standard_LRS",
                    "Prefix": "os"
                },
                {
                    "Name": "DataStorage",
                    "Type": "Standard_LRS",
                    "Prefix": "ds"
                },
                {
                    "Name": "DataStorage",
                    "Type": "Standard_LRS",
                    "Prefix": "lg"
                }
            ],
            "prod": [
                {
                    "Name": "OperatingSystemStorage",
                    "Type": "Standard_LRS",
                    "Prefix": "os"
                },
                {
                    "Name": "DataStorage",
                    "Type": "Premium_LRS",
                    "Prefix": "ds"
                },
                {
                    "Name": "DataStorage",
                    "Type": "Standard_LRS",
                    "Prefix": "lg"
                }
            ],
            "dr": [
                {
                    "Name": "OperatingSystemStorage",
                    "Type": "Standard_LRS",
                    "Prefix": "os"
                },
                {
                    "Name": "DataStorage",
                    "Type": "Premium_LRS",
                    "Prefix": "ds"
                },
                {
                    "Name": "DataStorage",
                    "Type": "Standard_LRS",
                    "Prefix": "lg"
                }
            ]
        },
        "v_TemplateCreator": "Jason Bajada",
        "v_LoadBalancerRoles": [
            {
                "Name": "WebAccelerator"
            },
            {
                "Name": "App"
            },
            {
                "Name": "Search"
            }
        ],
        "v_StorageAccountName": "[concat(uniquestring(resourceGroup().id))]",
        "v_PuppetScriptLocation": "https://raw.githubusercontent.com/jbajada/test/master/install_puppet2.sh",
        "v_AzureStartScript": "https://raw.githubusercontent.com/jbajada/test/master/hndg-startup-rb.graphrunbook",
        "v_AzureShutdownScript": "https://raw.githubusercontent.com/jbajada/test/master/hndg-shutdown-rb.graphrunbook",
        "v_ServerRoles": [
            {
                "Name": "WebAccelerator",
                "AvailabilitySets": {
                	"dev": { "fault": 2, "update": 2},
                	"test": { "fault": 2, "update": 2},
                	"prod": { "fault": 2, "update": 2},
                	"dr": { "fault": 2, "update": 2}
                },
                "vmSize": {
                	"dev": "Standard_A1",
                	"test": "Standard_A1",
                	"prod": "Standard_A1",
                	"dr": "Standard_A1"
                },
                "vmCount": {
                	"dev": { "min": 1, "max": 1},
                	"test": { "min": 2, "max": 2},
                	"prod": { "min": 2, "max": 2},
                	"dr": { "min": 2, "max": 2}
                },
                "imagePublisher": "OpenLogic",
                "imageOffer": "CentOS",
                "imageSKU": "6.7"
            },
            {
                "Name": "Admin",
                "AvailabilitySets": {
                	"dev": { "fault": 2, "update": 2},
                	"test": { "fault": 2, "update": 2},
                	"prod": { "fault": 2, "update": 2},
                	"dr": { "fault": 2, "update": 2}
                },
                "vmSize": {
                	"dev": "Standard_A1",
                	"test": "Standard_A1",
                	"prod": "Standard_A1",
                	"dr": "Standard_A1"
                },
                "vmCount": {
                	"dev": { "min": 1, "max": 1},
                	"test": { "min": 1, "max": 1},
                	"prod": { "min": 1, "max": 1},
                	"dr": { "min": 1, "max": 1}
                },
                "imagePublisher": "OpenLogic",
                "imageOffer": "CentOS",
                "imageSKU": "6.7"
            },
            {
                "Name": "App",
                "AvailabilitySets": {
                	"dev": { "fault": 2, "update": 2},
                	"test": { "fault": 2, "update": 2},
                	"prod": { "fault": 2, "update": 2},
                	"dr": { "fault": 2, "update": 2}
                },
                "vmSize": {
                	"dev": "Standard_A1",
                	"test": "Standard_A1",
                	"prod": "Standard_A1",
                	"dr": "Standard_A1"
                },
                "vmCount": {
                	"dev": { "min": 1, "max": 1},
                	"test": { "min": 2, "max": 2},
                	"prod": { "min": 2, "max": 2},
                	"dr": { "min": 2, "max": 2}
                },
                "imagePublisher": "OpenLogic",
                "imageOffer": "CentOS",
                "imageSKU": "6.7"
            },
            {
                "Name": "SearchMaster",
                "AvailabilitySets": {
                	"dev": { "fault": 2, "update": 2},
                	"test": { "fault": 2, "update": 2},
                	"prod": { "fault": 2, "update": 2},
                	"dr": { "fault": 2, "update": 2}
                },
                "vmSize": {
                	"dev": "Standard_A1",
                	"test": "Standard_A1",
                	"prod": "Standard_A1",
                	"dr": "Standard_A1"
                },
                "vmCount": {
                	"dev": { "min": 1, "max": 1},
                	"test": { "min": 1, "max": 1},
                	"prod": { "min": 1, "max": 1},
                	"dr": { "min": 1, "max": 1}
                },
                "imagePublisher": "OpenLogic",
                "imageOffer": "CentOS",
                "imageSKU": "6.7"
            },
            {
                "Name": "SearchSlave",
                "AvailabilitySets": {
                	"dev": { "fault": 2, "update": 2},
                	"test": { "fault": 2, "update": 2},
                	"prod": { "fault": 2, "update": 2},
                	"dr": { "fault": 2, "update": 2}
                },
                "vmSize": {
                	"dev": "Standard_A1",
                	"test": "Standard_A1",
                	"prod": "Standard_A1",
                	"dr": "Standard_A1"
                },
                "vmCount": {
                	"dev": { "min": 1, "max": 1},
                	"test": { "min": 2, "max": 2},
                	"prod": { "min": 2, "max": 2},
                	"dr": { "min": 2, "max": 2}
                },
                "imagePublisher": "OpenLogic",
                "imageOffer": "CentOS",
                "imageSKU": "6.7"
            },
            {
                "Name": "Filemaster",
                "AvailabilitySets": {
                	"dev": { "fault": 2, "update": 2},
                	"test": { "fault": 2, "update": 2},
                	"prod": { "fault": 2, "update": 2},
                	"dr": { "fault": 2, "update": 2}
                },
                "vmSize": {
                	"dev": "Standard_A1",
                	"test": "Standard_A1",
                	"prod": "Standard_A1",
                	"dr": "Standard_A1"
                },
                "vmCount": {
                	"dev": { "min": 1, "max": 1},
                	"test": { "min": 1, "max": 1},
                	"prod": { "min": 1, "max": 1},
                	"dr": { "min": 1, "max": 1}
                },
                "imagePublisher": "OpenLogic",
                "imageOffer": "CentOS",
                "imageSKU": "6.7",
                "disks": [
                    {
                        "size": "300"
                    }
                ]
            },
            {
                "Name": "Database",
                "AvailabilitySets": {
                	"dev": { "fault": 2, "update": 2},
                	"test": { "fault": 2, "update": 2},
                	"prod": { "fault": 2, "update": 2},
                	"dr": { "fault": 2, "update": 2}
                },
                "vmSize": {
                	"dev": "Standard_D13_v2",
                	"test": "Standard_A1",
                	"prod": "Standard_A1",
                	"dr": "Standard_A1"
                },
                "vmCount": {
                	"dev": { "min": 1, "max": 1},
                	"test": { "min": 1, "max": 1},
                	"prod": { "min": 1, "max": 1},
                	"dr": { "min": 1, "max": 1}
                },
                "imagePublisher": "OpenLogic",
                "imageOffer": "CentOS",
                "imageSKU": "6.7",
                "disks": [
                    {
                        "size": "100"
                    }
                ]
            },
            {
                "Name": "Cache",
                "AvailabilitySets": {
                	"dev": { "fault": 2, "update": 2},
                	"test": { "fault": 2, "update": 2},
                	"prod": { "fault": 2, "update": 2},
                	"dr": { "fault": 2, "update": 2}
                },
                "vmSize": {
                	"dev": "Standard_A1",
                	"test": "Standard_A1",
                	"prod": "Standard_A1",
                	"dr": "Standard_A1"
                },
                "vmCount": {
                	"dev": { "min": 1, "max": 1},
                	"test": { "min": 1, "max": 1},
                	"prod": { "min": 1, "max": 1},
                	"dr": { "min": 1, "max": 1}
                },
                "imagePublisher": "OpenLogic",
                "imageOffer": "CentOS",
                "imageSKU": "6.7"
            },
            {
                "Name": "Util",
                "AvailabilitySets": {
                	"dev": { "fault": 2, "update": 2},
                	"test": { "fault": 2, "update": 2},
                	"prod": { "fault": 2, "update": 2},
                	"dr": { "fault": 2, "update": 2}
                },
                "vmSize": {
                	"dev": "Standard_A1",
                	"test": "Standard_A1",
                	"prod": "Standard_A1",
                	"dr": "Standard_A1"
                },
                "vmCount": {
                	"dev": { "min": 1, "max": 1},
                	"test": { "min": 1, "max": 1},
                	"prod": { "min": 1, "max": 1},
                	"dr": { "min": 1, "max": 1}
                },
                "imagePublisher": "OpenLogic",
                "imageOffer": "CentOS",
                "imageSKU": "6.7"
            }
        ],
        "v_Subnets": [
            {
                "Name": "GatewaySubnet",
                "FourthOctetStart": 0,
                "CIDR": 28
            },
            {
                "Name": "WebAccelerator",
                "FourthOctetStart": 16,
                "CIDR": 28
            },
            {
                "Name": "Search",
                "FourthOctetStart": 32,
                "CIDR": 28
            },
            {
                "Name": "Cache",
                "FourthOctetStart": 48,
                "CIDR": 28
            },
            {
                "Name": "App",
                "FourthOctetStart": 64,
                "CIDR": 27
            },
            {
                "Name": "Admin",
                "FourthOctetStart": 96,
                "CIDR": 28
            },
            {
                "Name": "File",
                "FourthOctetStart": 112,
                "CIDR": 28
            },
            {
                "Name": "Database",
                "FourthOctetStart": 128,
                "CIDR": 28
            },
            {
                "Name": "Util",
                "FourthOctetStart": 144,
                "CIDR": 28
            }
        ],
        "v_ExpressRoute": {
            "CircuitName": "Az_Digital_Dev",
            "ResourceGroup": "hndg-foundation-resources",
            "RoutingWeight": "0"
        },
        "v_DNS": {
            "dev":  { "primary": "10.224.48.20", "secondary": "10.224.48.25"},
            "test": { "primary": "10.224.52.20", "secondary": "10.224.52.25"},
            "prod": { "primary": "10.224.56.20", "secondary": "10.224.56.25"},
            "dr": { "primary": "10.225.56.20", "secondary": "10.225.56.25"}
        },
        "wadCfgStart": "<WadCfg><DiagnosticMonitorConfiguration overallQuotaInMB=\"4096\"><DiagnosticInfrastructureLogs scheduledTransferPeriod=\"PT1M\" scheduledTransferLogLevelFilter=\"Warning\" /><PerformanceCounters scheduledTransferPeriod=\"PT1M\">",
        "wadCfgMemoryPerfCounter": "<PerformanceCounterConfiguration counterSpecifier=\"\\Memory\\AvailableMemory\" sampleRate=\"PT15S\" unit=\"Bytes\"><annotation displayName=\"Memory available\" locale=\"en-us\" /></PerformanceCounterConfiguration><PerformanceCounterConfiguration counterSpecifier=\"\\Memory\\PercentAvailableMemory\" sampleRate=\"PT15S\" unit=\"Percent\"><annotation displayName=\"Mem. percent available\" locale=\"en-us\" /></PerformanceCounterConfiguration><PerformanceCounterConfiguration counterSpecifier=\"\\Memory\\UsedMemory\" sampleRate=\"PT15S\" unit=\"Bytes\"><annotation displayName=\"Memory used\" locale=\"en-us\" /></PerformanceCounterConfiguration><PerformanceCounterConfiguration counterSpecifier=\"\\Memory\\PercentUsedMemory\" sampleRate=\"PT15S\" unit=\"Percent\"><annotation displayName=\"Memory percentage\" locale=\"en-us\" /></PerformanceCounterConfiguration><PerformanceCounterConfiguration counterSpecifier=\"\\Memory\\PercentUsedByCache\" sampleRate=\"PT15S\" unit=\"Percent\"><annotation displayName=\"Mem. used by cache\" locale=\"en-us\" /></PerformanceCounterConfiguration><PerformanceCounterConfiguration counterSpecifier=\"\\Memory\\PagesPerSec\" sampleRate=\"PT15S\" unit=\"CountPerSecond\"><annotation displayName=\"Pages\" locale=\"en-us\" /></PerformanceCounterConfiguration><PerformanceCounterConfiguration counterSpecifier=\"\\Memory\\PagesReadPerSec\" sampleRate=\"PT15S\" unit=\"CountPerSecond\"><annotation displayName=\"Page reads\" locale=\"en-us\" /></PerformanceCounterConfiguration><PerformanceCounterConfiguration counterSpecifier=\"\\Memory\\PagesWrittenPerSec\" sampleRate=\"PT15S\" unit=\"CountPerSecond\"><annotation displayName=\"Page writes\" locale=\"en-us\" /></PerformanceCounterConfiguration><PerformanceCounterConfiguration counterSpecifier=\"\\Memory\\AvailableSwap\" sampleRate=\"PT15S\" unit=\"Bytes\"><annotation displayName=\"Swap available\" locale=\"en-us\" /></PerformanceCounterConfiguration><PerformanceCounterConfiguration counterSpecifier=\"\\Memory\\PercentAvailableSwap\" sampleRate=\"PT15S\" unit=\"Percent\"><annotation displayName=\"Swap percent available\" locale=\"en-us\" /></PerformanceCounterConfiguration><PerformanceCounterConfiguration counterSpecifier=\"\\Memory\\UsedSwap\" sampleRate=\"PT15S\" unit=\"Bytes\"><annotation displayName=\"Swap used\" locale=\"en-us\" /></PerformanceCounterConfiguration><PerformanceCounterConfiguration counterSpecifier=\"\\Memory\\PercentUsedSwap\" sampleRate=\"PT15S\" unit=\"Percent\"><annotation displayName=\"Swap percent used\" locale=\"en-us\" /></PerformanceCounterConfiguration>",
        "wadCfgProcessorPerfCounter": "<PerformanceCounterConfiguration counterSpecifier=\"\\Processor\\PercentIdleTime\" sampleRate=\"PT15S\" unit=\"Percent\"><annotation displayName=\"CPU idle time\" locale=\"en-us\" /></PerformanceCounterConfiguration><PerformanceCounterConfiguration counterSpecifier=\"\\Processor\\PercentUserTime\" sampleRate=\"PT15S\" unit=\"Percent\"><annotation displayName=\"CPU user time\" locale=\"en-us\" /></PerformanceCounterConfiguration><PerformanceCounterConfiguration counterSpecifier=\"\\Processor\\PercentNiceTime\" sampleRate=\"PT15S\" unit=\"Percent\"><annotation displayName=\"CPU nice time\" locale=\"en-us\" /></PerformanceCounterConfiguration><PerformanceCounterConfiguration counterSpecifier=\"\\Processor\\PercentPrivilegedTime\" sampleRate=\"PT15S\" unit=\"Percent\"><annotation displayName=\"CPU privileged time\" locale=\"en-us\" /></PerformanceCounterConfiguration><PerformanceCounterConfiguration counterSpecifier=\"\\Processor\\PercentInterruptTime\" sampleRate=\"PT15S\" unit=\"Percent\"><annotation displayName=\"CPU interrupt time\" locale=\"en-us\" /></PerformanceCounterConfiguration><PerformanceCounterConfiguration counterSpecifier=\"\\Processor\\PercentDPCTime\" sampleRate=\"PT15S\" unit=\"Percent\"><annotation displayName=\"CPU DPC time\" locale=\"en-us\" /></PerformanceCounterConfiguration><PerformanceCounterConfiguration counterSpecifier=\"\\Processor\\PercentProcessorTime\" sampleRate=\"PT15S\" unit=\"Percent\"><annotation displayName=\"CPU percentage guest OS\" locale=\"en-us\" /></PerformanceCounterConfiguration><PerformanceCounterConfiguration counterSpecifier=\"\\Processor\\PercentIOWaitTime\" sampleRate=\"PT15S\" unit=\"Percent\"><annotation displayName=\"CPU IO wait time\" locale=\"en-us\" /></PerformanceCounterConfiguration>",
        "wadCfgDiskPerfCounter": "<PerformanceCounterConfiguration counterSpecifier=\"\\PhysicalDisk\\BytesPerSecond\" sampleRate=\"PT15S\" unit=\"BytesPerSecond\"><annotation displayName=\"Disk total bytes\" locale=\"en-us\" /></PerformanceCounterConfiguration><PerformanceCounterConfiguration counterSpecifier=\"\\PhysicalDisk\\ReadBytesPerSecond\" sampleRate=\"PT15S\" unit=\"BytesPerSecond\"><annotation displayName=\"Disk read guest OS\" locale=\"en-us\" /></PerformanceCounterConfiguration><PerformanceCounterConfiguration counterSpecifier=\"\\PhysicalDisk\\WriteBytesPerSecond\" sampleRate=\"PT15S\" unit=\"BytesPerSecond\"><annotation displayName=\"Disk write guest OS\" locale=\"en-us\" /></PerformanceCounterConfiguration><PerformanceCounterConfiguration counterSpecifier=\"\\PhysicalDisk\\TransfersPerSecond\" sampleRate=\"PT15S\" unit=\"CountPerSecond\"><annotation displayName=\"Disk transfers\" locale=\"en-us\" /></PerformanceCounterConfiguration><PerformanceCounterConfiguration counterSpecifier=\"\\PhysicalDisk\\ReadsPerSecond\" sampleRate=\"PT15S\" unit=\"CountPerSecond\"><annotation displayName=\"Disk reads\" locale=\"en-us\" /></PerformanceCounterConfiguration><PerformanceCounterConfiguration counterSpecifier=\"\\PhysicalDisk\\WritesPerSecond\" sampleRate=\"PT15S\" unit=\"CountPerSecond\"><annotation displayName=\"Disk writes\" locale=\"en-us\" /></PerformanceCounterConfiguration><PerformanceCounterConfiguration counterSpecifier=\"\\PhysicalDisk\\AverageReadTime\" sampleRate=\"PT15S\" unit=\"Seconds\"><annotation displayName=\"Disk read time\" locale=\"en-us\" /></PerformanceCounterConfiguration><PerformanceCounterConfiguration counterSpecifier=\"\\PhysicalDisk\\AverageWriteTime\" sampleRate=\"PT15S\" unit=\"Seconds\"><annotation displayName=\"Disk write time\" locale=\"en-us\" /></PerformanceCounterConfiguration><PerformanceCounterConfiguration counterSpecifier=\"\\PhysicalDisk\\AverageTransferTime\" sampleRate=\"PT15S\" unit=\"Seconds\"><annotation displayName=\"Disk transfer time\" locale=\"en-us\" /></PerformanceCounterConfiguration><PerformanceCounterConfiguration counterSpecifier=\"\\PhysicalDisk\\AverageDiskQueueLength\" sampleRate=\"PT15S\" unit=\"Count\"><annotation displayName=\"Disk queue length\" locale=\"en-us\" /></PerformanceCounterConfiguration>",
        "wadCfgNetworkPerfCounter": "<PerformanceCounterConfiguration counterSpecifier=\"\\NetworkInterface\\BytesTransmitted\" sampleRate=\"PT15S\" unit=\"Bytes\"><annotation displayName=\"Network out guest OS\" locale=\"en-us\" /></PerformanceCounterConfiguration><PerformanceCounterConfiguration counterSpecifier=\"\\NetworkInterface\\BytesReceived\" sampleRate=\"PT15S\" unit=\"Bytes\"><annotation displayName=\"Network in guest OS\" locale=\"en-us\" /></PerformanceCounterConfiguration><PerformanceCounterConfiguration counterSpecifier=\"\\NetworkInterface\\PacketsTransmitted\" sampleRate=\"PT15S\" unit=\"Count\"><annotation displayName=\"Packets sent\" locale=\"en-us\" /></PerformanceCounterConfiguration><PerformanceCounterConfiguration counterSpecifier=\"\\NetworkInterface\\PacketsReceived\" sampleRate=\"PT15S\" unit=\"Count\"><annotation displayName=\"Packets received\" locale=\"en-us\" /></PerformanceCounterConfiguration><PerformanceCounterConfiguration counterSpecifier=\"\\NetworkInterface\\BytesTotal\" sampleRate=\"PT15S\" unit=\"Bytes\"><annotation displayName=\"Network total bytes\" locale=\"en-us\" /></PerformanceCounterConfiguration><PerformanceCounterConfiguration counterSpecifier=\"\\NetworkInterface\\TotalRxErrors\" sampleRate=\"PT15S\" unit=\"Count\"><annotation displayName=\"Packets received errors\" locale=\"en-us\" /></PerformanceCounterConfiguration><PerformanceCounterConfiguration counterSpecifier=\"\\NetworkInterface\\TotalTxErrors\" sampleRate=\"PT15S\" unit=\"Count\"><annotation displayName=\"Packets sent errors\" locale=\"en-us\" /></PerformanceCounterConfiguration><PerformanceCounterConfiguration counterSpecifier=\"\\NetworkInterface\\TotalCollisions\" sampleRate=\"PT15S\" unit=\"Count\"><annotation displayName=\"Network collisions\" locale=\"en-us\" /></PerformanceCounterConfiguration>",
        "wadCfgResources": "[concat('</PerformanceCounters><Metrics resourceId=\"/subscriptions/', subscription().subscriptionId, '/resourceGroups/', resourceGroup().name, '/providers/Microsoft.Compute/virtualMachines/')]",
        "wadCfgMetrics": "<MetricAggregation scheduledTransferPeriod=\"PT1H\" /><MetricAggregation scheduledTransferPeriod=\"PT1M\" /></Metrics>",
        "wadCfgEnd": "</DiagnosticMonitorConfiguration></WadCfg>"
    },
    "resources": [
        {
            "type": "Microsoft.Storage/storageAccounts",
            "comments": "Create storage accounts for environment",
            "name": "[toLower(concat(variables('v_StorageAccountName'), variables('v_StorageAccounts')[parameters('env_Type')][copyIndex()].Prefix, parameters('env_Type'), parameters('env_Instance'), 'sa'))]",
            "apiVersion": "2015-06-15",
            "location": "[resourceGroup().location]",
            "copy": {
                "name": "StorageAccountCopy",
                "count": "[length(variables('v_StorageAccounts')[parameters('env_Type')])]"
            },
            "properties": {
                "accountType": "[variables('v_StorageAccounts')[parameters('env_Type')][copyIndex()].Type]"
            },
            "tags": {
                "Name": "[toLower(concat(variables('v_StorageAccountName'), variables('v_StorageAccounts')[parameters('env_Type')][copyIndex()].Prefix, parameters('env_Type'), parameters('env_Instance'), 'sa'))]",
                "env_Brand": "[toLower(parameters('env_Brand'))]",
                "env_Description": "[toLower(parameters('env_Description'))]",
                "env_Type": "[toLower(parameters('env_Type'))]",
                "env_Instance": "[toLower(string(parameters('env_Instance')))]",
                "env_Owner": "[toLower(parameters('env_Owner'))]",
                "env_Location": "[resourceGroup().location]",
                "env_TemplateCreator": "[toLower(variables('v_TemplateCreator'))]",
                "env_TemplateVersion": "[toLower(variables('v_TemplateVersion'))]"
            }
        },
        {
            "type": "Microsoft.Compute/availabilitySets",
            "comments": "Create availability sets for environment",
            "name": "[toLower(concat(variables('v_EnvironmentPrefix'), '-', parameters('env_Type'), parameters('env_Instance'), '-', variables('v_ServerRoles')[copyIndex()].Name, '-as'))]",
            "apiVersion": "2015-06-15",
            "location": "[resourceGroup().location]",
            "copy": {
                "name": "AvailabilitySetCopy",
                "count": "[length(variables('v_ServerRoles'))]"
            },
            "properties": {
                "platformFaultDomainCount": "[variables('v_ServerRoles')[copyIndex()].AvailabilitySets[parameters('env_Type')].fault]",
                "platformUpdateDomainCount": "[variables('v_ServerRoles')[copyIndex()].AvailabilitySets[parameters('env_Type')].update]"
            },
            "tags": {
                "Name": "[toLower(concat(variables('v_EnvironmentPrefix'), parameters('env_Type'), parameters('env_Instance'), variables('v_ServerRoles')[copyIndex()].Name, '-as'))]",
                "env_Brand": "[toLower(parameters('env_Brand'))]",
                "env_Description": "[toLower(parameters('env_Description'))]",
                "env_Type": "[toLower(parameters('env_Type'))]",
                "env_Instance": "[toLower(string(parameters('env_Instance')))]",
                "env_Owner": "[toLower(parameters('env_Owner'))]",
                "env_Location": "[resourceGroup().location]",
                "env_TemplateCreator": "[toLower(variables('v_TemplateCreator'))]",
                "env_TemplateVersion": "[toLower(variables('v_TemplateVersion'))]"
            }
        },
        {
            "type": "Microsoft.Network/virtualNetworks",
            "comments": "Create virtual network for environment",
            "name": "[toLower(concat(variables('v_EnvironmentPrefix'), '-', parameters('env_Type'), parameters('env_Instance'), '-vnet'))]",
            "apiVersion": "2015-06-15",
            "location": "[resourceGroup().location]",
            "dependsOn": [ 
                "[concat('Microsoft.Network/networkSecurityGroups/', toLower(concat(variables('v_EnvironmentPrefix'), '-', parameters('env_Type'), parameters('env_Instance'), '-', variables('v_Subnets')[1].Name, '-sg')))]",
                "[concat('Microsoft.Network/networkSecurityGroups/', toLower(concat(variables('v_EnvironmentPrefix'), '-', parameters('env_Type'), parameters('env_Instance'), '-', variables('v_Subnets')[2].Name, '-sg')))]",
                "[concat('Microsoft.Network/networkSecurityGroups/', toLower(concat(variables('v_EnvironmentPrefix'), '-', parameters('env_Type'), parameters('env_Instance'), '-', variables('v_Subnets')[3].Name, '-sg')))]",
                "[concat('Microsoft.Network/networkSecurityGroups/', toLower(concat(variables('v_EnvironmentPrefix'), '-', parameters('env_Type'), parameters('env_Instance'), '-', variables('v_Subnets')[4].Name, '-sg')))]",
                "[concat('Microsoft.Network/networkSecurityGroups/', toLower(concat(variables('v_EnvironmentPrefix'), '-', parameters('env_Type'), parameters('env_Instance'), '-', variables('v_Subnets')[5].Name, '-sg')))]",
                "[concat('Microsoft.Network/networkSecurityGroups/', toLower(concat(variables('v_EnvironmentPrefix'), '-', parameters('env_Type'), parameters('env_Instance'), '-', variables('v_Subnets')[6].Name, '-sg')))]",
                "[concat('Microsoft.Network/networkSecurityGroups/', toLower(concat(variables('v_EnvironmentPrefix'), '-', parameters('env_Type'), parameters('env_Instance'), '-', variables('v_Subnets')[7].Name, '-sg')))]",
                "[concat('Microsoft.Network/networkSecurityGroups/', toLower(concat(variables('v_EnvironmentPrefix'), '-', parameters('env_Type'), parameters('env_Instance'), '-', variables('v_Subnets')[8].Name, '-sg')))]"
            ],
            "properties": {
                "addressSpace": {
                    "addressPrefixes": [
                        "[concat(variables('v_NetworkRangePrefix'), add(parameters('env_Instance'), variables('v_AddressRangeOffsets')[parameters('env_Type')].ThirdOctet), '.', variables('v_AddressRangeOffsets')[parameters('env_Type')].FourthOctet, '/24')]"
                    ]
                },
                "subnets": [
                    {
                        "name": "[variables('v_Subnets')[0].Name]",
                        "comments": "Gateway subnet",
                        "properties": {
                            "addressPrefix": "[concat(variables('v_NetworkRangePrefix'), add(parameters('env_Instance'), variables('v_AddressRangeOffsets')[parameters('env_Type')].ThirdOctet), '.', add(variables('v_Subnets')[0].FourthOctetStart, variables('v_AddressRangeOffsets')[parameters('env_Type')].FourthOctet), '/', variables('v_Subnets')[0].CIDR)]"
                        }
                    },
                    {
                        "name": "[variables('v_Subnets')[1].Name]",
                        "comments": "Web Accelerator subnet",
                        "properties": {
                            "addressPrefix": "[concat(variables('v_NetworkRangePrefix'), add(parameters('env_Instance'), variables('v_AddressRangeOffsets')[parameters('env_Type')].ThirdOctet), '.', add(variables('v_Subnets')[1].FourthOctetStart, variables('v_AddressRangeOffsets')[parameters('env_Type')].FourthOctet), '/', variables('v_Subnets')[1].CIDR)]",
                            "networkSecurityGroup": {
                                "id": "[resourceId('Microsoft.Network/networkSecurityGroups', toLower(concat(variables('v_EnvironmentPrefix'), '-', parameters('env_Type'), parameters('env_Instance'), '-', variables('v_Subnets')[1].Name, '-sg')))]"
                            }
                        }
                    },
                    {
                        "name": "[variables('v_Subnets')[2].Name]",
                        "comments": "Search subnet",
                        "properties": {
                            "addressPrefix": "[concat(variables('v_NetworkRangePrefix'), add(parameters('env_Instance'), variables('v_AddressRangeOffsets')[parameters('env_Type')].ThirdOctet), '.', add(variables('v_Subnets')[2].FourthOctetStart, variables('v_AddressRangeOffsets')[parameters('env_Type')].FourthOctet), '/', variables('v_Subnets')[2].CIDR)]",
                            "networkSecurityGroup": {
                                "id": "[resourceId('Microsoft.Network/networkSecurityGroups', toLower(concat(variables('v_EnvironmentPrefix'), '-', parameters('env_Type'), parameters('env_Instance'), '-', variables('v_Subnets')[2].Name, '-sg')))]"
                            }
                        }
                    },
                    {
                        "name": "[variables('v_Subnets')[3].Name]",
                        "comments": "Cache subnet",
                        "properties": {
                            "addressPrefix": "[concat(variables('v_NetworkRangePrefix'), add(parameters('env_Instance'), variables('v_AddressRangeOffsets')[parameters('env_Type')].ThirdOctet), '.', add(variables('v_Subnets')[3].FourthOctetStart, variables('v_AddressRangeOffsets')[parameters('env_Type')].FourthOctet), '/', variables('v_Subnets')[3].CIDR)]",
                            "networkSecurityGroup": {
                                "id": "[resourceId('Microsoft.Network/networkSecurityGroups', toLower(concat(variables('v_EnvironmentPrefix'), '-', parameters('env_Type'), parameters('env_Instance'), '-', variables('v_Subnets')[3].Name, '-sg')))]"
                            }
                        }
                    },
                    {
                        "name": "[variables('v_Subnets')[4].Name]",
                        "comments": "App subnet",
                        "properties": {
                            "addressPrefix": "[concat(variables('v_NetworkRangePrefix'), add(parameters('env_Instance'), variables('v_AddressRangeOffsets')[parameters('env_Type')].ThirdOctet), '.', add(variables('v_Subnets')[4].FourthOctetStart, variables('v_AddressRangeOffsets')[parameters('env_Type')].FourthOctet), '/', variables('v_Subnets')[4].CIDR)]",
                            "networkSecurityGroup": {
                                "id": "[resourceId('Microsoft.Network/networkSecurityGroups', toLower(concat(variables('v_EnvironmentPrefix'), '-', parameters('env_Type'), parameters('env_Instance'), '-', variables('v_Subnets')[4].Name, '-sg')))]"
                            }
                        }
                    },
                    {
                        "name": "[variables('v_Subnets')[5].Name]",
                        "comments": "Admin subnet",
                        "properties": {
                            "addressPrefix": "[concat(variables('v_NetworkRangePrefix'), add(parameters('env_Instance'), variables('v_AddressRangeOffsets')[parameters('env_Type')].ThirdOctet), '.', add(variables('v_Subnets')[5].FourthOctetStart, variables('v_AddressRangeOffsets')[parameters('env_Type')].FourthOctet), '/', variables('v_Subnets')[5].CIDR)]",
                            "networkSecurityGroup": {
                                "id": "[resourceId('Microsoft.Network/networkSecurityGroups', toLower(concat(variables('v_EnvironmentPrefix'), '-', parameters('env_Type'), parameters('env_Instance'), '-', variables('v_Subnets')[5].Name, '-sg')))]"
                            }
                        }
                    },
                    {
                        "name": "[variables('v_Subnets')[6].Name]",
                        "comments": "File subnet",
                        "properties": {
                            "addressPrefix": "[concat(variables('v_NetworkRangePrefix'), add(parameters('env_Instance'), variables('v_AddressRangeOffsets')[parameters('env_Type')].ThirdOctet), '.', add(variables('v_Subnets')[6].FourthOctetStart, variables('v_AddressRangeOffsets')[parameters('env_Type')].FourthOctet), '/', variables('v_Subnets')[6].CIDR)]",
                            "networkSecurityGroup": {
                                "id": "[resourceId('Microsoft.Network/networkSecurityGroups', toLower(concat(variables('v_EnvironmentPrefix'), '-', parameters('env_Type'), parameters('env_Instance'), '-', variables('v_Subnets')[6].Name, '-sg')))]"
                            }
                        }
                    },
                    {
                        "name": "[variables('v_Subnets')[7].Name]",
                        "comments": "Database subnet",
                        "properties": {
                            "addressPrefix": "[concat(variables('v_NetworkRangePrefix'), add(parameters('env_Instance'), variables('v_AddressRangeOffsets')[parameters('env_Type')].ThirdOctet), '.', add(variables('v_Subnets')[7].FourthOctetStart, variables('v_AddressRangeOffsets')[parameters('env_Type')].FourthOctet), '/', variables('v_Subnets')[7].CIDR)]",
                            "networkSecurityGroup": {
                                "id": "[resourceId('Microsoft.Network/networkSecurityGroups', toLower(concat(variables('v_EnvironmentPrefix'), '-', parameters('env_Type'), parameters('env_Instance'), '-', variables('v_Subnets')[7].Name, '-sg')))]"
                            }
                        }
                    },
                    {
                        "name": "[variables('v_Subnets')[8].Name]",
                        "comments": "Util subnet",
                        "properties": {
                            "addressPrefix": "[concat(variables('v_NetworkRangePrefix'), add(parameters('env_Instance'), variables('v_AddressRangeOffsets')[parameters('env_Type')].ThirdOctet), '.', add(variables('v_Subnets')[8].FourthOctetStart, variables('v_AddressRangeOffsets')[parameters('env_Type')].FourthOctet), '/', variables('v_Subnets')[8].CIDR)]",
                            "networkSecurityGroup": {
                                "id": "[resourceId('Microsoft.Network/networkSecurityGroups', toLower(concat(variables('v_EnvironmentPrefix'), '-', parameters('env_Type'), parameters('env_Instance'), '-', variables('v_Subnets')[8].Name, '-sg')))]"
                            }
                        }
                    }
                ]
            },
            "tags": {
                "Name": "[toLower(concat(variables('v_EnvironmentPrefix'), '-', parameters('env_Type'), parameters('env_Instance'), '-vnet'))]",
                "env_Brand": "[toLower(parameters('env_Brand'))]",
                "env_Description": "[toLower(parameters('env_Description'))]",
                "env_Type": "[toLower(parameters('env_Type'))]",
                "env_Instance": "[toLower(string(parameters('env_Instance')))]",
                "env_Owner": "[toLower(parameters('env_Owner'))]",
                "env_Location": "[resourceGroup().location]",
                "env_TemplateCreator": "[toLower(variables('v_TemplateCreator'))]",
                "env_TemplateVersion": "[toLower(variables('v_TemplateVersion'))]"
            }
        },
        {
            "type": "Microsoft.Network/publicIPAddresses",
            "comments": "Public IP address required for Express Route",
            "name": "[toLower(concat(variables('v_EnvironmentPrefix'), '-', parameters('env_Type'), parameters('env_Instance'), '-vng-ip'))]",
            "apiVersion": "2015-06-15",
            "location": "[resourceGroup().location]",
            "properties": {
                "publicIPAllocationMethod": "Dynamic"
            },
            "tags": {
                "Name": "[toLower(concat(variables('v_EnvironmentPrefix'), '-', parameters('env_Type'), parameters('env_Instance'), '-vng-ip'))]",
                "env_Brand": "[toLower(parameters('env_Brand'))]",
                "env_Description": "[toLower(parameters('env_Description'))]",
                "env_Type": "[toLower(parameters('env_Type'))]",
                "env_Instance": "[toLower(string(parameters('env_Instance')))]",
                "env_Owner": "[toLower(parameters('env_Owner'))]",
                "env_Location": "[resourceGroup().location]",
                "env_TemplateCreator": "[toLower(variables('v_TemplateCreator'))]",
                "env_TemplateVersion": "[toLower(variables('v_TemplateVersion'))]"
            }
        },
        {
            "type": "Microsoft.Network/virtualNetworkGateways",
            "comments": "Virtual Network Gateway required for Express Route",
            "name": "[toLower(concat(variables('v_EnvironmentPrefix'), '-', parameters('env_Type'), parameters('env_Instance'), '-vng'))]",
            "apiVersion": "2015-06-15",
            "location": "[resourceGroup().location]",
            "dependsOn": [
                "[concat('Microsoft.Network/publicIPAddresses/', toLower(concat(variables('v_EnvironmentPrefix'), '-', parameters('env_Type'), parameters('env_Instance'), '-vng-ip')))]",
                "[concat('Microsoft.Network/virtualNetworks/', toLower(concat(variables('v_EnvironmentPrefix'), '-', parameters('env_Type'), parameters('env_Instance'), '-vnet')))]"
            ],
            "properties": {
                "gatewayType": "ExpressRoute",
                "ipConfigurations": [
                    {
                        "name": "[toLower(concat(variables('v_EnvironmentPrefix'), '-', parameters('env_Type'), parameters('env_Instance'), '-vgc'))]", 
                        "properties": {
                            "privateIPAllocationMethod": "Dynamic",
                            "publicIPAddress": {
                                "id": "[resourceId('Microsoft.Network/publicIPAddresses', toLower(concat(variables('v_EnvironmentPrefix'), '-', parameters('env_Type'), parameters('env_Instance'), '-vng-ip')))]"
                            },
                            "subnet": {
                                "id": "[concat(resourceId('Microsoft.Network/virtualNetworks', toLower(concat(variables('v_EnvironmentPrefix'), '-', parameters('env_Type'), parameters('env_Instance'), '-vnet'))), '/subnets/', variables('v_Subnets')[0].Name)]"
                            }
                        }
                    }
                ]
            }
        },
        {
            "type": "Microsoft.Network/connections",
            "comments": "Connection to an existing circuit required for Express Route",
            "name": "[toLower(concat(variables('v_EnvironmentPrefix'), '-', parameters('env_Type'), parameters('env_Instance'), '-erc'))]",
            "apiVersion": "2015-06-15",
            "location": "[resourceGroup().location]",
            "dependsOn": [
                "[concat('Microsoft.Network/virtualNetworkGateways/', toLower(concat(variables('v_EnvironmentPrefix'), '-', parameters('env_Type'), parameters('env_Instance'), '-vng')))]"
            ],
            "properties": {
                "virtualNetworkGateway1": {
                    "id": "[resourceId('Microsoft.Network/virtualNetworkGateways', toLower(concat(variables('v_EnvironmentPrefix'), '-', parameters('env_Type'), parameters('env_Instance'), '-vng')))]"
                },
                "peer": {
                    "id": "[resourceId(variables('v_ExpressRoute')['ResourceGroup'], 'Microsoft.Network/expressRouteCircuits', variables('v_ExpressRoute')['CircuitName'])]"
                },
                "connectionType": "ExpressRoute",
                "routingWeight": "[variables('v_ExpressRoute')['RoutingWeight']]"
            }
        },
        {
            "type": "Microsoft.Network/networkSecurityGroups",
            "comments": "Web Accelerator Security Group",
            "apiVersion": "2015-06-15",
            "name": "[toLower(concat(variables('v_EnvironmentPrefix'), '-', parameters('env_Type'), parameters('env_Instance'), '-', variables('v_Subnets')[1].Name, '-sg'))]",
            "location": "[resourceGroup().location]",
            "properties": {
                "securityRules": [
                    {
                        "name": "waf-a-80-sgr",
                        "properties": {
                            "description": "WAF Range A - Inbound Port 80",
                            "protocol": "Tcp",
                            "sourcePortRange": "*",
                            "destinationPortRange": "80",
                            "sourceAddressPrefix": "199.83.128.0/21",
                            "destinationAddressPrefix": "*",
                            "access": "Allow",
                            "priority": 100,
                            "direction": "Inbound"
                        }
                    },
                    {
                        "name": "waf-b-80-sgr",
                        "properties": {
                            "description": "WAF Range B - Inbound Port 80",
                            "protocol": "Tcp",
                            "sourcePortRange": "*",
                            "destinationPortRange": "80",
                            "sourceAddressPrefix": "198.143.32.0/19",
                            "destinationAddressPrefix": "*",
                            "access": "Allow",
                            "priority": 105,
                            "direction": "Inbound"
                        }
                    },
                    {
                        "name": "waf-c-80-sgr",
                        "properties": {
                            "description": "WAF Range C - Inbound Port 80",
                            "protocol": "Tcp",
                            "sourcePortRange": "*",
                            "destinationPortRange": "80",
                            "sourceAddressPrefix": "149.126.72.0/21",
                            "destinationAddressPrefix": "*",
                            "access": "Allow",
                            "priority": 110,
                            "direction": "Inbound"
                        }
                    },
                    {
                        "name": "waf-d-80-sgr",
                        "properties": {
                            "description": "WAF Range D - Inbound Port 80",
                            "protocol": "Tcp",
                            "sourcePortRange": "*",
                            "destinationPortRange": "80",
                            "sourceAddressPrefix": "103.28.248.0/22",
                            "destinationAddressPrefix": "*",
                            "access": "Allow",
                            "priority": 115,
                            "direction": "Inbound"
                        }
                    },
                    {
                        "name": "waf-e-80-sgr",
                        "properties": {
                            "description": "WAF Range E - Inbound Port 80",
                            "protocol": "Tcp",
                            "sourcePortRange": "*",
                            "destinationPortRange": "80",
                            "sourceAddressPrefix": "45.64.64.0/22",
                            "destinationAddressPrefix": "*",
                            "access": "Allow",
                            "priority": 120,
                            "direction": "Inbound"
                        }
                    },
                    {
                        "name": "waf-f-80-sgr",
                        "properties": {
                            "description": "WAF Range F - Inbound Port 80",
                            "protocol": "Tcp",
                            "sourcePortRange": "*",
                            "destinationPortRange": "80",
                            "sourceAddressPrefix": "185.11.124.0/22",
                            "destinationAddressPrefix": "*",
                            "access": "Allow",
                            "priority": 125,
                            "direction": "Inbound"
                        }
                    },
                    {
                        "name": "waf-g-80-sgr",
                        "properties": {
                            "description": "WAF Range G - Inbound Port 80",
                            "protocol": "Tcp",
                            "sourcePortRange": "*",
                            "destinationPortRange": "80",
                            "sourceAddressPrefix": "192.230.64.0/18",
                            "destinationAddressPrefix": "*",
                            "access": "Allow",
                            "priority": 130,
                            "direction": "Inbound"
                        }
                    },
                    {
                        "name": "hnau-corp-internal-80-sgr",
                        "properties": {
                            "description": "HNAU Internal Corp Traffic - Inbound Port 80",
                            "protocol": "Tcp",
                            "sourcePortRange": "*",
                            "destinationPortRange": "80",
                            "sourceAddressPrefix": "10.0.0.0/8",
                            "destinationAddressPrefix": "*",
                            "access": "Allow",
                            "priority": 135,
                            "direction": "Inbound"
                        }
                    },
                    {
                        "name": "waf-a-443-sgr",
                        "properties": {
                            "description": "WAF Range A - Inbound Port 443",
                            "protocol": "Tcp",
                            "sourcePortRange": "*",
                            "destinationPortRange": "443",
                            "sourceAddressPrefix": "199.83.128.0/21",
                            "destinationAddressPrefix": "*",
                            "access": "Allow",
                            "priority": 140,
                            "direction": "Inbound"
                        }
                    },
                    {
                        "name": "waf-b-443-sgr",
                        "properties": {
                            "description": "WAF Range B - Inbound Port 443",
                            "protocol": "Tcp",
                            "sourcePortRange": "*",
                            "destinationPortRange": "443",
                            "sourceAddressPrefix": "198.143.32.0/19",
                            "destinationAddressPrefix": "*",
                            "access": "Allow",
                            "priority": 145,
                            "direction": "Inbound"
                        }
                    },
                    {
                        "name": "waf-c-443-sgr",
                        "properties": {
                            "description": "WAF Range C - Inbound Port 443",
                            "protocol": "Tcp",
                            "sourcePortRange": "*",
                            "destinationPortRange": "443",
                            "sourceAddressPrefix": "149.126.72.0/21",
                            "destinationAddressPrefix": "*",
                            "access": "Allow",
                            "priority": 150,
                            "direction": "Inbound"
                        }
                    },
                    {
                        "name": "waf-d-443-sgr",
                        "properties": {
                            "description": "WAF Range D - Inbound Port 443",
                            "protocol": "Tcp",
                            "sourcePortRange": "*",
                            "destinationPortRange": "443",
                            "sourceAddressPrefix": "103.28.248.0/22",
                            "destinationAddressPrefix": "*",
                            "access": "Allow",
                            "priority": 155,
                            "direction": "Inbound"
                        }
                    },
                    {
                        "name": "waf-e-443-sgr",
                        "properties": {
                            "description": "WAF Range E - Inbound Port 443",
                            "protocol": "Tcp",
                            "sourcePortRange": "*",
                            "destinationPortRange": "443",
                            "sourceAddressPrefix": "45.64.64.0/22",
                            "destinationAddressPrefix": "*",
                            "access": "Allow",
                            "priority": 160,
                            "direction": "Inbound"
                        }
                    },
                    {
                        "name": "waf-f-443-sgr",
                        "properties": {
                            "description": "WAF Range F - Inbound Port 443",
                            "protocol": "Tcp",
                            "sourcePortRange": "*",
                            "destinationPortRange": "443",
                            "sourceAddressPrefix": "185.11.124.0/22",
                            "destinationAddressPrefix": "*",
                            "access": "Allow",
                            "priority": 165,
                            "direction": "Inbound"
                        }
                    },
                    {
                        "name": "waf-g-443-sgr",
                        "properties": {
                            "description": "WAF Range G - Inbound Port 443",
                            "protocol": "Tcp",
                            "sourcePortRange": "*",
                            "destinationPortRange": "443",
                            "sourceAddressPrefix": "192.230.64.0/18",
                            "destinationAddressPrefix": "*",
                            "access": "Allow",
                            "priority": 170,
                            "direction": "Inbound"
                        }
                    },
                    {
                        "name": "hnau-corp-internal-443-sgr",
                        "properties": {
                            "description": "HNAU Internal Corp Traffic - Inbound Port 443",
                            "protocol": "Tcp",
                            "sourcePortRange": "*",
                            "destinationPortRange": "443",
                            "sourceAddressPrefix": "10.0.0.0/8",
                            "destinationAddressPrefix": "*",
                            "access": "Allow",
                            "priority": 175,
                            "direction": "Inbound"
                        }
                    },
                    {
                        "name": "hnau-corp-internal-22-sgr",
                        "properties": {
                            "description": "HNAU Internal Corp Traffic - Inbound Port 22",
                            "protocol": "Tcp",
                            "sourcePortRange": "*",
                            "destinationPortRange": "22",
                            "sourceAddressPrefix": "10.0.0.0/8",
                            "destinationAddressPrefix": "*",
                            "access": "Allow",
                            "priority": 180,
                            "direction": "Inbound"
                        }
                    },
                    {
                        "name": "ms-all-in-sgr",
                        "properties": {
                            "description": "Microsoft - Inbound all ports",
                            "protocol": "*",
                            "sourcePortRange": "*",
                            "destinationPortRange": "*",
                            "sourceAddressPrefix": "168.63.129.16/32",
                            "destinationAddressPrefix": "*",
                            "access": "Allow",
                            "priority": 500,
                            "direction": "Inbound"
                        }
                    },
                    {
                        "name": "deny-all-in-sgr",
                        "properties": {
                            "description": "Deny all other inbound traffic",
                            "protocol": "*",
                            "sourcePortRange": "*",
                            "destinationPortRange": "*",
                            "sourceAddressPrefix": "*",
                            "destinationAddressPrefix": "*",
                            "access": "Deny",
                            "priority": 1000,
                            "direction": "Inbound"
                        }
                    },
                    {
                        "name": "app-80-sgr",
                        "properties": {
                            "description": "App Server Traffic - Outbound Port 80",
                            "protocol": "Tcp",
                            "sourcePortRange": "*",
                            "destinationPortRange": "80",
                            "sourceAddressPrefix": "*",
                            "destinationAddressPrefix": "[concat(variables('v_NetworkRangePrefix'), add(parameters('env_Instance'), variables('v_AddressRangeOffsets')[parameters('env_Type')].ThirdOctet), '.', add(variables('v_Subnets')[4].FourthOctetStart, variables('v_AddressRangeOffsets')[parameters('env_Type')].FourthOctet), '/', variables('v_Subnets')[4].CIDR)]",
                            "access": "Allow",
                            "priority": 100,
                            "direction": "Outbound"
                        }
                    },
                    {
                        "name": "yum-80-sgr",
                        "properties": {
                            "description": "Yum Repository - Outbound Port 80",
                            "protocol": "Tcp",
                            "sourcePortRange": "*",
                            "destinationPortRange": "80",
                            "sourceAddressPrefix": "*",
                            "destinationAddressPrefix": "52.62.252.40/32",
                            "access": "Allow",
                            "priority": 105,
                            "direction": "Outbound"
                        }
                    },
                    {
                        "name": "puppetserver-8140-sgr",
                        "properties": {
                            "description": "Puppet Server - Outbound Port 8140",
                            "protocol": "Tcp",
                            "sourcePortRange": "*",
                            "destinationPortRange": "8140",
                            "sourceAddressPrefix": "*",
                            "destinationAddressPrefix": "52.62.252.40/32",
                            "access": "Allow",
                            "priority": 110,
                            "direction": "Outbound"
                        }
                    },
                    {
                        "name": "puppetdb-8081-sgr",
                        "properties": {
                            "description": "Puppet DB Server - Outbound Port 8081",
                            "protocol": "Tcp",
                            "sourcePortRange": "*",
                            "destinationPortRange": "8081",
                            "sourceAddressPrefix": "*",
                            "destinationAddressPrefix": "52.62.252.40/32",
                            "access": "Allow",
                            "priority": 115,
                            "direction": "Outbound"
                        }
                    },
                    {
                        "name": "http-all-out-sgr",
                        "properties": {
                            "description": "HTTP - Outbound HTTP ports",
                            "protocol": "Tcp",
                            "sourcePortRange": "*",
                            "destinationPortRange": "80",
                            "sourceAddressPrefix": "*",
                            "destinationAddressPrefix": "*",
                            "access": "Allow",
                            "priority": 400,
                            "direction": "Outbound"
                        }
                    },
                    {
                        "name": "https-all-out-sgr",
                        "properties": {
                            "description": "HTTPS - Outbound HTTPS ports",
                            "protocol": "Tcp",
                            "sourcePortRange": "*",
                            "destinationPortRange": "443",
                            "sourceAddressPrefix": "*",
                            "destinationAddressPrefix": "*",
                            "access": "Allow",
                            "priority": 410,
                            "direction": "Outbound"
                        }
                    },
                    {
                        "name": "ms-all-out-sgr",
                        "properties": {
                            "description": "Microsoft - Outbound all ports",
                            "protocol": "*",
                            "sourcePortRange": "*",
                            "destinationPortRange": "*",
                            "sourceAddressPrefix": "*",
                            "destinationAddressPrefix": "168.63.129.16/32",
                            "access": "Allow",
                            "priority": 500,
                            "direction": "Outbound"
                        }
                    },
                    {
                        "name": "deny-all-out-sgr",
                        "properties": {
                            "description": "Deny all other outbound traffic",
                            "protocol": "*",
                            "sourcePortRange": "*",
                            "destinationPortRange": "*",
                            "sourceAddressPrefix": "*",
                            "destinationAddressPrefix": "*",
                            "access": "Deny",
                            "priority": 1000,
                            "direction": "Outbound"
                        }
                    }
                ]
            },
            "tags": {
                "Name": "[toLower(concat(variables('v_EnvironmentPrefix'), '-', parameters('env_Type'), parameters('env_Instance'), '-', variables('v_Subnets')[1].Name, '-sg'))]",
                "env_Brand": "[toLower(parameters('env_Brand'))]",
                "env_Description": "[toLower(parameters('env_Description'))]",
                "env_Type": "[toLower(parameters('env_Type'))]",
                "env_Instance": "[toLower(string(parameters('env_Instance')))]",
                "env_Owner": "[toLower(parameters('env_Owner'))]",
                "env_Location": "[resourceGroup().location]",
                "env_TemplateCreator": "[toLower(variables('v_TemplateCreator'))]",
                "env_TemplateVersion": "[toLower(variables('v_TemplateVersion'))]"
            }
        },
        {
            "type": "Microsoft.Network/networkSecurityGroups",
            "comments": "Search Security Group",
            "apiVersion": "2015-06-15",
            "name": "[toLower(concat(variables('v_EnvironmentPrefix'), '-', parameters('env_Type'), parameters('env_Instance'), '-', variables('v_Subnets')[2].Name, '-sg'))]",
            "location": "[resourceGroup().location]",
            "properties": {
                "securityRules": [
                    {
                        "name": "admin-8983-sgr",
                        "properties": {
                            "description": "Admin Traffic - Inbound Port 8983",
                            "protocol": "Tcp",
                            "sourcePortRange": "*",
                            "destinationPortRange": "8983",
                            "sourceAddressPrefix": "[concat(variables('v_NetworkRangePrefix'), add(parameters('env_Instance'), variables('v_AddressRangeOffsets')[parameters('env_Type')].ThirdOctet), '.', add(variables('v_Subnets')[5].FourthOctetStart, variables('v_AddressRangeOffsets')[parameters('env_Type')].FourthOctet), '/', variables('v_Subnets')[5].CIDR)]",
                            "destinationAddressPrefix": "*",
                            "access": "Allow",
                            "priority": 100,
                            "direction": "Inbound"
                        }
                    },
                    {
                        "name": "app-8983-sgr",
                        "properties": {
                            "description": "App Traffic - Inbound Port 8983",
                            "protocol": "Tcp",
                            "sourcePortRange": "*",
                            "destinationPortRange": "8983",
                            "sourceAddressPrefix": "[concat(variables('v_NetworkRangePrefix'), add(parameters('env_Instance'), variables('v_AddressRangeOffsets')[parameters('env_Type')].ThirdOctet), '.', add(variables('v_Subnets')[4].FourthOctetStart, variables('v_AddressRangeOffsets')[parameters('env_Type')].FourthOctet), '/', variables('v_Subnets')[4].CIDR)]",
                            "destinationAddressPrefix": "*",
                            "access": "Allow",
                            "priority": 105,
                            "direction": "Inbound"
                        }
                    },
                    {
                        "name": "hnau-corp-internal-22-sgr",
                        "properties": {
                            "description": "HNAU Internal Corp Traffic - Inbound Port 22",
                            "protocol": "Tcp",
                            "sourcePortRange": "*",
                            "destinationPortRange": "22",
                            "sourceAddressPrefix": "10.0.0.0/8",
                            "destinationAddressPrefix": "*",
                            "access": "Allow",
                            "priority": 110,
                            "direction": "Inbound"
                        }
                    },
                    {
                        "name": "ms-all-in-sgr",
                        "properties": {
                            "description": "Microsoft - Inbound all ports",
                            "protocol": "*",
                            "sourcePortRange": "*",
                            "destinationPortRange": "*",
                            "sourceAddressPrefix": "168.63.129.16/32",
                            "destinationAddressPrefix": "*",
                            "access": "Allow",
                            "priority": 500,
                            "direction": "Inbound"
                        }
                    },
                    {
                        "name": "deny-all-in-sgr",
                        "properties": {
                            "description": "Deny all other inbound traffic",
                            "protocol": "*",
                            "sourcePortRange": "*",
                            "destinationPortRange": "*",
                            "sourceAddressPrefix": "*",
                            "destinationAddressPrefix": "*",
                            "access": "Deny",
                            "priority": 1000,
                            "direction": "Inbound"
                        }
                    },
                    {
                        "name": "yum-80-sgr",
                        "properties": {
                            "description": "Yum Repository - Outbound Port 80",
                            "protocol": "Tcp",
                            "sourcePortRange": "*",
                            "destinationPortRange": "80",
                            "sourceAddressPrefix": "*",
                            "destinationAddressPrefix": "52.62.252.40/32",
                            "access": "Allow",
                            "priority": 100,
                            "direction": "Outbound"
                        }
                    },
                    {
                        "name": "puppetserver-8140-sgr",
                        "properties": {
                            "description": "Puppet Server - Outbound Port 8140",
                            "protocol": "Tcp",
                            "sourcePortRange": "*",
                            "destinationPortRange": "8140",
                            "sourceAddressPrefix": "*",
                            "destinationAddressPrefix": "52.62.252.40/32",
                            "access": "Allow",
                            "priority": 105,
                            "direction": "Outbound"
                        }
                    },
                    {
                        "name": "puppetdb-8081-sgr",
                        "properties": {
                            "description": "Puppet DB Server - Outbound Port 8081",
                            "protocol": "Tcp",
                            "sourcePortRange": "*",
                            "destinationPortRange": "8081",
                            "sourceAddressPrefix": "*",
                            "destinationAddressPrefix": "52.62.252.40/32",
                            "access": "Allow",
                            "priority": 110,
                            "direction": "Outbound"
                        }
                    },
                    {
                        "name": "http-all-out-sgr",
                        "properties": {
                            "description": "HTTP - Outbound HTTP ports",
                            "protocol": "Tcp",
                            "sourcePortRange": "*",
                            "destinationPortRange": "80",
                            "sourceAddressPrefix": "*",
                            "destinationAddressPrefix": "*",
                            "access": "Allow",
                            "priority": 400,
                            "direction": "Outbound"
                        }
                    },
                    {
                        "name": "https-all-out-sgr",
                        "properties": {
                            "description": "HTTPS - Outbound HTTPS ports",
                            "protocol": "Tcp",
                            "sourcePortRange": "*",
                            "destinationPortRange": "443",
                            "sourceAddressPrefix": "*",
                            "destinationAddressPrefix": "*",
                            "access": "Allow",
                            "priority": 410,
                            "direction": "Outbound"
                        }
                    },
                    {
                        "name": "ms-all-out-sgr",
                        "properties": {
                            "description": "Microsoft - Outbound all ports",
                            "protocol": "*",
                            "sourcePortRange": "*",
                            "destinationPortRange": "*",
                            "sourceAddressPrefix": "*",
                            "destinationAddressPrefix": "168.63.129.16/32",
                            "access": "Allow",
                            "priority": 500,
                            "direction": "Outbound"
                        }
                    },
                    {
                        "name": "deny-all-out-sgr",
                        "properties": {
                            "description": "Deny all other outbound traffic",
                            "protocol": "*",
                            "sourcePortRange": "*",
                            "destinationPortRange": "*",
                            "sourceAddressPrefix": "*",
                            "destinationAddressPrefix": "*",
                            "access": "Deny",
                            "priority": 1000,
                            "direction": "Outbound"
                        }
                    }
                ]
            },
            "tags": {
                "Name": "[toLower(concat(variables('v_EnvironmentPrefix'), '-', parameters('env_Type'), parameters('env_Instance'), '-', variables('v_Subnets')[2].Name, '-sg'))]",
                "env_Brand": "[toLower(parameters('env_Brand'))]",
                "env_Description": "[toLower(parameters('env_Description'))]",
                "env_Type": "[toLower(parameters('env_Type'))]",
                "env_Instance": "[toLower(string(parameters('env_Instance')))]",
                "env_Owner": "[toLower(parameters('env_Owner'))]",
                "env_Location": "[resourceGroup().location]",
                "env_TemplateCreator": "[toLower(variables('v_TemplateCreator'))]",
                "env_TemplateVersion": "[toLower(variables('v_TemplateVersion'))]"
            }
        },
        {
            "type": "Microsoft.Network/networkSecurityGroups",
            "comments": "Cache Security Group",
            "apiVersion": "2015-06-15",
            "name": "[toLower(concat(variables('v_EnvironmentPrefix'), '-', parameters('env_Type'), parameters('env_Instance'), '-', variables('v_Subnets')[3].Name, '-sg'))]",
            "location": "[resourceGroup().location]",
            "properties": {
                "securityRules": [
                    {
                        "name": "admin-11211-11212-sgr",
                        "properties": {
                            "description": "Admin Traffic - Inbound Port 11211-11212",
                            "protocol": "Tcp",
                            "sourcePortRange": "*",
                            "destinationPortRange": "11211-11212",
                            "sourceAddressPrefix": "[concat(variables('v_NetworkRangePrefix'), add(parameters('env_Instance'), variables('v_AddressRangeOffsets')[parameters('env_Type')].ThirdOctet), '.', add(variables('v_Subnets')[5].FourthOctetStart, variables('v_AddressRangeOffsets')[parameters('env_Type')].FourthOctet), '/', variables('v_Subnets')[5].CIDR)]",
                            "destinationAddressPrefix": "*",
                            "access": "Allow",
                            "priority": 100,
                            "direction": "Inbound"
                        }
                    },
                    {
                        "name": "app-11211-11212-sgr",
                        "properties": {
                            "description": "App Traffic - Inbound Port 11211-11212",
                            "protocol": "Tcp",
                            "sourcePortRange": "*",
                            "destinationPortRange": "11211-11212",
                            "sourceAddressPrefix": "[concat(variables('v_NetworkRangePrefix'), add(parameters('env_Instance'), variables('v_AddressRangeOffsets')[parameters('env_Type')].ThirdOctet), '.', add(variables('v_Subnets')[4].FourthOctetStart, variables('v_AddressRangeOffsets')[parameters('env_Type')].FourthOctet), '/', variables('v_Subnets')[4].CIDR)]",
                            "destinationAddressPrefix": "*",
                            "access": "Allow",
                            "priority": 105,
                            "direction": "Inbound"
                        }
                    },
                    {
                        "name": "hnau-corp-internal-22-sgr",
                        "properties": {
                            "description": "HNAU Internal Corp Traffic - Inbound Port 22",
                            "protocol": "Tcp",
                            "sourcePortRange": "*",
                            "destinationPortRange": "22",
                            "sourceAddressPrefix": "10.0.0.0/8",
                            "destinationAddressPrefix": "*",
                            "access": "Allow",
                            "priority": 110,
                            "direction": "Inbound"
                        }
                    },
                    {
                        "name": "ms-all-in-sgr",
                        "properties": {
                            "description": "Microsoft - Inbound all ports",
                            "protocol": "*",
                            "sourcePortRange": "*",
                            "destinationPortRange": "*",
                            "sourceAddressPrefix": "168.63.129.16/32",
                            "destinationAddressPrefix": "*",
                            "access": "Allow",
                            "priority": 500,
                            "direction": "Inbound"
                        }
                    },
                    {
                        "name": "deny-all-in-sgr",
                        "properties": {
                            "description": "Deny all other inbound traffic",
                            "protocol": "*",
                            "sourcePortRange": "*",
                            "destinationPortRange": "*",
                            "sourceAddressPrefix": "*",
                            "destinationAddressPrefix": "*",
                            "access": "Deny",
                            "priority": 1000,
                            "direction": "Inbound"
                        }
                    },
                    {
                        "name": "yum-80-sgr",
                        "properties": {
                            "description": "Yum Repository - Outbound Port 80",
                            "protocol": "Tcp",
                            "sourcePortRange": "*",
                            "destinationPortRange": "80",
                            "sourceAddressPrefix": "*",
                            "destinationAddressPrefix": "52.62.252.40/32",
                            "access": "Allow",
                            "priority": 100,
                            "direction": "Outbound"
                        }
                    },
                    {
                        "name": "puppetserver-8140-sgr",
                        "properties": {
                            "description": "Puppet Server - Outbound Port 8140",
                            "protocol": "Tcp",
                            "sourcePortRange": "*",
                            "destinationPortRange": "8140",
                            "sourceAddressPrefix": "*",
                            "destinationAddressPrefix": "52.62.252.40/32",
                            "access": "Allow",
                            "priority": 105,
                            "direction": "Outbound"
                        }
                    },
                    {
                        "name": "puppetdb-8081-sgr",
                        "properties": {
                            "description": "Puppet DB Server - Outbound Port 8081",
                            "protocol": "Tcp",
                            "sourcePortRange": "*",
                            "destinationPortRange": "8081",
                            "sourceAddressPrefix": "*",
                            "destinationAddressPrefix": "52.62.252.40/32",
                            "access": "Allow",
                            "priority": 110,
                            "direction": "Outbound"
                        }
                    },
                    {
                        "name": "http-all-out-sgr",
                        "properties": {
                            "description": "HTTP - Outbound HTTP ports",
                            "protocol": "Tcp",
                            "sourcePortRange": "*",
                            "destinationPortRange": "80",
                            "sourceAddressPrefix": "*",
                            "destinationAddressPrefix": "*",
                            "access": "Allow",
                            "priority": 400,
                            "direction": "Outbound"
                        }
                    },
                    {
                        "name": "https-all-out-sgr",
                        "properties": {
                            "description": "HTTPS - Outbound HTTPS ports",
                            "protocol": "Tcp",
                            "sourcePortRange": "*",
                            "destinationPortRange": "443",
                            "sourceAddressPrefix": "*",
                            "destinationAddressPrefix": "*",
                            "access": "Allow",
                            "priority": 410,
                            "direction": "Outbound"
                        }
                    },
                    {
                        "name": "ms-all-out-sgr",
                        "properties": {
                            "description": "Microsoft - Outbound all ports",
                            "protocol": "*",
                            "sourcePortRange": "*",
                            "destinationPortRange": "*",
                            "sourceAddressPrefix": "*",
                            "destinationAddressPrefix": "168.63.129.16/32",
                            "access": "Allow",
                            "priority": 500,
                            "direction": "Outbound"
                        }
                    },
                    {
                        "name": "deny-all-out-sgr",
                        "properties": {
                            "description": "Deny all other outbound traffic",
                            "protocol": "*",
                            "sourcePortRange": "*",
                            "destinationPortRange": "*",
                            "sourceAddressPrefix": "*",
                            "destinationAddressPrefix": "*",
                            "access": "Deny",
                            "priority": 1000,
                            "direction": "Outbound"
                        }
                    }
                ]
            },
            "tags": {
                "Name": "[toLower(concat(variables('v_EnvironmentPrefix'), '-', parameters('env_Type'), parameters('env_Instance'), '-', variables('v_Subnets')[3].Name, '-sg'))]",
                "env_Brand": "[toLower(parameters('env_Brand'))]",
                "env_Description": "[toLower(parameters('env_Description'))]",
                "env_Type": "[toLower(parameters('env_Type'))]",
                "env_Instance": "[toLower(string(parameters('env_Instance')))]",
                "env_Owner": "[toLower(parameters('env_Owner'))]",
                "env_Location": "[resourceGroup().location]",
                "env_TemplateCreator": "[toLower(variables('v_TemplateCreator'))]",
                "env_TemplateVersion": "[toLower(variables('v_TemplateVersion'))]"
            }
        },
        {
            "type": "Microsoft.Network/networkSecurityGroups",
            "comments": "App Security Group",
            "apiVersion": "2015-06-15",
            "name": "[toLower(concat(variables('v_EnvironmentPrefix'), '-', parameters('env_Type'), parameters('env_Instance'), '-', variables('v_Subnets')[4].Name, '-sg'))]",
            "location": "[resourceGroup().location]",
            "properties": {
                "securityRules": [
                    {
                        "name": "webaccelerator-80-sgr",
                        "properties": {
                            "description": "Web Accelerator Traffic - Inbound Port 80",
                            "protocol": "Tcp",
                            "sourcePortRange": "*",
                            "destinationPortRange": "80",
                            "sourceAddressPrefix": "[concat(variables('v_NetworkRangePrefix'), add(parameters('env_Instance'), variables('v_AddressRangeOffsets')[parameters('env_Type')].ThirdOctet), '.', add(variables('v_Subnets')[1].FourthOctetStart, variables('v_AddressRangeOffsets')[parameters('env_Type')].FourthOctet), '/', variables('v_Subnets')[1].CIDR)]",
                            "destinationAddressPrefix": "*",
                            "access": "Allow",
                            "priority": 100,
                            "direction": "Inbound"
                        }
                    },
                    {
                        "name": "hnau-corp-internal-22-sgr",
                        "properties": {
                            "description": "HNAU Internal Corp Traffic - Inbound Port 22",
                            "protocol": "Tcp",
                            "sourcePortRange": "*",
                            "destinationPortRange": "22",
                            "sourceAddressPrefix": "10.0.0.0/8",
                            "destinationAddressPrefix": "*",
                            "access": "Allow",
                            "priority": 105,
                            "direction": "Inbound"
                        }
                    },
                    {
                        "name": "ms-all-in-sgr",
                        "properties": {
                            "description": "Microsoft - Inbound all ports",
                            "protocol": "*",
                            "sourcePortRange": "*",
                            "destinationPortRange": "*",
                            "sourceAddressPrefix": "168.63.129.16/32",
                            "destinationAddressPrefix": "*",
                            "access": "Allow",
                            "priority": 500,
                            "direction": "Inbound"
                        }
                    },
                    {
                        "name": "deny-all-in-sgr",
                        "properties": {
                            "description": "Deny all other inbound traffic",
                            "protocol": "*",
                            "sourcePortRange": "*",
                            "destinationPortRange": "*",
                            "sourceAddressPrefix": "*",
                            "destinationAddressPrefix": "*",
                            "access": "Deny",
                            "priority": 1000,
                            "direction": "Inbound"
                        }
                    },
                    {
                        "name": "mail-25-sgr",
                        "properties": {
                            "description": "Mail Traffic - Outbound Port 25",
                            "protocol": "Tcp",
                            "sourcePortRange": "*",
                            "destinationPortRange": "25",
                            "sourceAddressPrefix": "*",
                            "destinationAddressPrefix": "[concat(variables('v_NetworkRangePrefix'), add(parameters('env_Instance'), variables('v_AddressRangeOffsets')[parameters('env_Type')].ThirdOctet), '.', add(variables('v_Subnets')[8].FourthOctetStart, variables('v_AddressRangeOffsets')[parameters('env_Type')].FourthOctet), '/', variables('v_Subnets')[8].CIDR)]",
                            "access": "Allow",
                            "priority": 100,
                            "direction": "Outbound"
                        }
                    },
                    {
                        "name": "web-80-sgr",
                        "properties": {
                            "description": "Web Traffic - Outbound Port 80",
                            "protocol": "Tcp",
                            "sourcePortRange": "*",
                            "destinationPortRange": "80",
                            "sourceAddressPrefix": "*",
                            "destinationAddressPrefix": "*",
                            "access": "Allow",
                            "priority": 105,
                            "direction": "Outbound"
                        }
                    },
                    {
                        "name": "web-443-sgr",
                        "properties": {
                            "description": "Web Traffic - Outbound Port 443",
                            "protocol": "Tcp",
                            "sourcePortRange": "*",
                            "destinationPortRange": "443",
                            "sourceAddressPrefix": "*",
                            "destinationAddressPrefix": "*",
                            "access": "Allow",
                            "priority": 110,
                            "direction": "Outbound"
                        }
                    },
                    {
                        "name": "soh-7800-sgr",
                        "properties": {
                            "description": "SOH Traffic - Outbound Port 7800",
                            "protocol": "Tcp",
                            "sourcePortRange": "*",
                            "destinationPortRange": "7800",
                            "sourceAddressPrefix": "*",
                            "destinationAddressPrefix": "10.0.0.0/8",
                            "access": "Allow",
                            "priority": 115,
                            "direction": "Outbound"
                        }
                    },
                    {
                        "name": "search-8983-sgr",
                        "properties": {
                            "description": "Search Traffic - Outbound Port 8983",
                            "protocol": "Tcp",
                            "sourcePortRange": "*",
                            "destinationPortRange": "8983",
                            "sourceAddressPrefix": "*",
                            "destinationAddressPrefix": "[concat(variables('v_NetworkRangePrefix'), add(parameters('env_Instance'), variables('v_AddressRangeOffsets')[parameters('env_Type')].ThirdOctet), '.', add(variables('v_Subnets')[2].FourthOctetStart, variables('v_AddressRangeOffsets')[parameters('env_Type')].FourthOctet), '/', variables('v_Subnets')[2].CIDR)]",
                            "access": "Allow",
                            "priority": 120,
                            "direction": "Outbound"
                        }
                    },
                    {
                        "name": "cache-11211-11212-sgr",
                        "properties": {
                            "description": "Cache Traffic - Outbound Port 11211-11212",
                            "protocol": "Tcp",
                            "sourcePortRange": "*",
                            "destinationPortRange": "11211-11212",
                            "sourceAddressPrefix": "*",
                            "destinationAddressPrefix": "[concat(variables('v_NetworkRangePrefix'), add(parameters('env_Instance'), variables('v_AddressRangeOffsets')[parameters('env_Type')].ThirdOctet), '.', add(variables('v_Subnets')[3].FourthOctetStart, variables('v_AddressRangeOffsets')[parameters('env_Type')].FourthOctet), '/', variables('v_Subnets')[3].CIDR)]",
                            "access": "Allow",
                            "priority": 125,
                            "direction": "Outbound"
                        }
                    },
                    {
                        "name": "sql-3306-sgr",
                        "properties": {
                            "description": "SQL Traffic - Outbound Port 3306",
                            "protocol": "Tcp",
                            "sourcePortRange": "*",
                            "destinationPortRange": "3306",
                            "sourceAddressPrefix": "*",
                            "destinationAddressPrefix": "[concat(variables('v_NetworkRangePrefix'), add(parameters('env_Instance'), variables('v_AddressRangeOffsets')[parameters('env_Type')].ThirdOctet), '.', add(variables('v_Subnets')[7].FourthOctetStart, variables('v_AddressRangeOffsets')[parameters('env_Type')].FourthOctet), '/', variables('v_Subnets')[7].CIDR)]",
                            "access": "Allow",
                            "priority": 130,
                            "direction": "Outbound"
                        }
                    },
                    {
                        "name": "file-111-sgr",
                        "properties": {
                            "description": "File Server Traffic - Outbound Port 111",
                            "protocol": "Tcp",
                            "sourcePortRange": "*",
                            "destinationPortRange": "111",
                            "sourceAddressPrefix": "*",
                            "destinationAddressPrefix": "[concat(variables('v_NetworkRangePrefix'), add(parameters('env_Instance'), variables('v_AddressRangeOffsets')[parameters('env_Type')].ThirdOctet), '.', add(variables('v_Subnets')[6].FourthOctetStart, variables('v_AddressRangeOffsets')[parameters('env_Type')].FourthOctet), '/', variables('v_Subnets')[6].CIDR)]",
                            "access": "Allow",
                            "priority": 135,
                            "direction": "Outbound"
                        }
                    },
                    {
                        "name": "file-2049-sgr",
                        "properties": {
                            "description": "File Server Traffic - Outbound Port 2049",
                            "protocol": "Tcp",
                            "sourcePortRange": "*",
                            "destinationPortRange": "2049",
                            "sourceAddressPrefix": "*",
                            "destinationAddressPrefix": "[concat(variables('v_NetworkRangePrefix'), add(parameters('env_Instance'), variables('v_AddressRangeOffsets')[parameters('env_Type')].ThirdOctet), '.', add(variables('v_Subnets')[6].FourthOctetStart, variables('v_AddressRangeOffsets')[parameters('env_Type')].FourthOctet), '/', variables('v_Subnets')[6].CIDR)]",
                            "access": "Allow",
                            "priority": 140,
                            "direction": "Outbound"
                        }
                    },
                    {
                        "name": "yum-80-sgr",
                        "properties": {
                            "description": "Yum Repository - Outbound Port 80",
                            "protocol": "Tcp",
                            "sourcePortRange": "*",
                            "destinationPortRange": "80",
                            "sourceAddressPrefix": "*",
                            "destinationAddressPrefix": "52.62.252.40/32",
                            "access": "Allow",
                            "priority": 145,
                            "direction": "Outbound"
                        }
                    },
                    {
                        "name": "puppetserver-8140-sgr",
                        "properties": {
                            "description": "Puppet Server - Outbound Port 8140",
                            "protocol": "Tcp",
                            "sourcePortRange": "*",
                            "destinationPortRange": "8140",
                            "sourceAddressPrefix": "*",
                            "destinationAddressPrefix": "52.62.252.40/32",
                            "access": "Allow",
                            "priority": 150,
                            "direction": "Outbound"
                        }
                    },
                    {
                        "name": "puppetdb-8081-sgr",
                        "properties": {
                            "description": "Puppet DB Server - Outbound Port 8081",
                            "protocol": "Tcp",
                            "sourcePortRange": "*",
                            "destinationPortRange": "8081",
                            "sourceAddressPrefix": "*",
                            "destinationAddressPrefix": "52.62.252.40/32",
                            "access": "Allow",
                            "priority": 155,
                            "direction": "Outbound"
                        }
                    },
                    {
                        "name": "http-all-out-sgr",
                        "properties": {
                            "description": "HTTP - Outbound HTTP ports",
                            "protocol": "Tcp",
                            "sourcePortRange": "*",
                            "destinationPortRange": "80",
                            "sourceAddressPrefix": "*",
                            "destinationAddressPrefix": "*",
                            "access": "Allow",
                            "priority": 400,
                            "direction": "Outbound"
                        }
                    },
                    {
                        "name": "https-all-out-sgr",
                        "properties": {
                            "description": "HTTPS - Outbound HTTPS ports",
                            "protocol": "Tcp",
                            "sourcePortRange": "*",
                            "destinationPortRange": "443",
                            "sourceAddressPrefix": "*",
                            "destinationAddressPrefix": "*",
                            "access": "Allow",
                            "priority": 410,
                            "direction": "Outbound"
                        }
                    },
                    {
                        "name": "ms-all-out-sgr",
                        "properties": {
                            "description": "Microsoft - Outbound all ports",
                            "protocol": "*",
                            "sourcePortRange": "*",
                            "destinationPortRange": "*",
                            "sourceAddressPrefix": "*",
                            "destinationAddressPrefix": "168.63.129.16/32",
                            "access": "Allow",
                            "priority": 500,
                            "direction": "Outbound"
                        }
                    },
                    {
                        "name": "deny-all-out-sgr",
                        "properties": {
                            "description": "Deny all other outbound traffic",
                            "protocol": "*",
                            "sourcePortRange": "*",
                            "destinationPortRange": "*",
                            "sourceAddressPrefix": "*",
                            "destinationAddressPrefix": "*",
                            "access": "Deny",
                            "priority": 1000,
                            "direction": "Outbound"
                        }
                    }
                ]
            },
            "tags": {
                "Name": "[toLower(concat(variables('v_EnvironmentPrefix'), '-', parameters('env_Type'), parameters('env_Instance'), '-', variables('v_Subnets')[4].Name, '-sg'))]",
                "env_Brand": "[toLower(parameters('env_Brand'))]",
                "env_Description": "[toLower(parameters('env_Description'))]",
                "env_Type": "[toLower(parameters('env_Type'))]",
                "env_Instance": "[toLower(string(parameters('env_Instance')))]",
                "env_Owner": "[toLower(parameters('env_Owner'))]",
                "env_Location": "[resourceGroup().location]",
                "env_TemplateCreator": "[toLower(variables('v_TemplateCreator'))]",
                "env_TemplateVersion": "[toLower(variables('v_TemplateVersion'))]"
            }
        },
        {
            "type": "Microsoft.Network/networkSecurityGroups",
            "comments": "Admin Security Group",
            "apiVersion": "2015-06-15",
            "name": "[toLower(concat(variables('v_EnvironmentPrefix'), '-', parameters('env_Type'), parameters('env_Instance'), '-', variables('v_Subnets')[5].Name, '-sg'))]",
            "location": "[resourceGroup().location]",
            "properties": {
                "securityRules": [
                    {
                        "name": "hnau-corp-internal-80-sgr",
                        "properties": {
                            "description": "HNAU Internal Corp Traffic - Inbound Port 80",
                            "protocol": "Tcp",
                            "sourcePortRange": "*",
                            "destinationPortRange": "80",
                            "sourceAddressPrefix": "10.0.0.0/8",
                            "destinationAddressPrefix": "*",
                            "access": "Allow",
                            "priority": 100,
                            "direction": "Inbound"
                        }
                    },
                    {
                        "name": "datahub-3434-in-sgr",
                        "properties": {
                            "description": "Datahub Traffic - Inbound Port 3434",
                            "protocol": "Tcp",
                            "sourcePortRange": "*",
                            "destinationPortRange": "3434",
                            "sourceAddressPrefix": "10.0.0.0/8",
                            "destinationAddressPrefix": "*",
                            "access": "Allow",
                            "priority": 105,
                            "direction": "Inbound"
                        }
                    },
                    {
                        "name": "datahub-10010-in-sgr",
                        "properties": {
                            "description": "Datahub Traffic - Inbound Port 10010",
                            "protocol": "Tcp",
                            "sourcePortRange": "*",
                            "destinationPortRange": "10010",
                            "sourceAddressPrefix": "10.0.0.0/8",
                            "destinationAddressPrefix": "*",
                            "access": "Allow",
                            "priority": 110,
                            "direction": "Inbound"
                        }
                    },
                    {
                        "name": "hnau-corp-internal-22-sgr",
                        "properties": {
                            "description": "HNAU Internal Corp Traffic - Inbound Port 22",
                            "protocol": "Tcp",
                            "sourcePortRange": "*",
                            "destinationPortRange": "22",
                            "sourceAddressPrefix": "10.0.0.0/8",
                            "destinationAddressPrefix": "*",
                            "access": "Allow",
                            "priority": 115,
                            "direction": "Inbound"
                        }
                    },
                    {
                        "name": "ms-all-in-sgr",
                        "properties": {
                            "description": "Microsoft - Inbound all ports",
                            "protocol": "*",
                            "sourcePortRange": "*",
                            "destinationPortRange": "*",
                            "sourceAddressPrefix": "168.63.129.16/32",
                            "destinationAddressPrefix": "*",
                            "access": "Allow",
                            "priority": 500,
                            "direction": "Inbound"
                        }
                    },
                    {
                        "name": "deny-all-in-sgr",
                        "properties": {
                            "description": "Deny all other inbound traffic",
                            "protocol": "*",
                            "sourcePortRange": "*",
                            "destinationPortRange": "*",
                            "sourceAddressPrefix": "*",
                            "destinationAddressPrefix": "*",
                            "access": "Deny",
                            "priority": 1000,
                            "direction": "Inbound"
                        }
                    },
                    {
                        "name": "mail-25-sgr",
                        "properties": {
                            "description": "Mail Traffic - Outbound Port 25",
                            "protocol": "Tcp",
                            "sourcePortRange": "*",
                            "destinationPortRange": "25",
                            "sourceAddressPrefix": "*",
                            "destinationAddressPrefix": "[concat(variables('v_NetworkRangePrefix'), add(parameters('env_Instance'), variables('v_AddressRangeOffsets')[parameters('env_Type')].ThirdOctet), '.', add(variables('v_Subnets')[8].FourthOctetStart, variables('v_AddressRangeOffsets')[parameters('env_Type')].FourthOctet), '/', variables('v_Subnets')[8].CIDR)]",
                            "access": "Allow",
                            "priority": 100,
                            "direction": "Outbound"
                        }
                    },
                    {
                        "name": "web-80-sgr",
                        "properties": {
                            "description": "Web Traffic - Outbound Port 80",
                            "protocol": "Tcp",
                            "sourcePortRange": "*",
                            "destinationPortRange": "80",
                            "sourceAddressPrefix": "*",
                            "destinationAddressPrefix": "*",
                            "access": "Allow",
                            "priority": 105,
                            "direction": "Outbound"
                        }
                    },
                    {
                        "name": "web-443-sgr",
                        "properties": {
                            "description": "Web Traffic - Outbound Port 443",
                            "protocol": "Tcp",
                            "sourcePortRange": "*",
                            "destinationPortRange": "443",
                            "sourceAddressPrefix": "*",
                            "destinationAddressPrefix": "*",
                            "access": "Allow",
                            "priority": 110,
                            "direction": "Outbound"
                        }
                    },
                    {
                        "name": "datahub-3434-out-sgr",
                        "properties": {
                            "description": "Datahub Traffic - Outbound Port 3434",
                            "protocol": "Tcp",
                            "sourcePortRange": "*",
                            "destinationPortRange": "3434",
                            "sourceAddressPrefix": "*",
                            "destinationAddressPrefix": "10.0.0.0/8",
                            "access": "Allow",
                            "priority": 115,
                            "direction": "Outbound"
                        }
                    },
                    {
                        "name": "datahub-10010-out-sgr",
                        "properties": {
                            "description": "Datahub Traffic - Outbound Port 10010",
                            "protocol": "Tcp",
                            "sourcePortRange": "*",
                            "destinationPortRange": "10010",
                            "sourceAddressPrefix": "*",
                            "destinationAddressPrefix": "10.0.0.0/8",
                            "access": "Allow",
                            "priority": 120,
                            "direction": "Outbound"
                        }
                    },
                    {
                        "name": "soh-7800-sgr",
                        "properties": {
                            "description": "SOH Traffic - Outbound Port 7800",
                            "protocol": "Tcp",
                            "sourcePortRange": "*",
                            "destinationPortRange": "7800",
                            "sourceAddressPrefix": "*",
                            "destinationAddressPrefix": "10.0.0.0/8",
                            "access": "Allow",
                            "priority": 125,
                            "direction": "Outbound"
                        }
                    },
                    {
                        "name": "search-8983-sgr",
                        "properties": {
                            "description": "Search Traffic - Outbound Port 8983",
                            "protocol": "Tcp",
                            "sourcePortRange": "*",
                            "destinationPortRange": "8983",
                            "sourceAddressPrefix": "*",
                            "destinationAddressPrefix": "[concat(variables('v_NetworkRangePrefix'), add(parameters('env_Instance'), variables('v_AddressRangeOffsets')[parameters('env_Type')].ThirdOctet), '.', add(variables('v_Subnets')[2].FourthOctetStart, variables('v_AddressRangeOffsets')[parameters('env_Type')].FourthOctet), '/', variables('v_Subnets')[2].CIDR)]",
                            "access": "Allow",
                            "priority": 130,
                            "direction": "Outbound"
                        }
                    },
                    {
                        "name": "cache-11211-11212-sgr",
                        "properties": {
                            "description": "Cache Traffic - Outbound Port 11211-11212",
                            "protocol": "Tcp",
                            "sourcePortRange": "*",
                            "destinationPortRange": "11211-11212",
                            "sourceAddressPrefix": "*",
                            "destinationAddressPrefix": "[concat(variables('v_NetworkRangePrefix'), add(parameters('env_Instance'), variables('v_AddressRangeOffsets')[parameters('env_Type')].ThirdOctet), '.', add(variables('v_Subnets')[3].FourthOctetStart, variables('v_AddressRangeOffsets')[parameters('env_Type')].FourthOctet), '/', variables('v_Subnets')[3].CIDR)]",
                            "access": "Allow",
                            "priority": 135,
                            "direction": "Outbound"
                        }
                    },
                    {
                        "name": "sql-3306-sgr",
                        "properties": {
                            "description": "SQL Traffic - Outbound Port 3306",
                            "protocol": "Tcp",
                            "sourcePortRange": "*",
                            "destinationPortRange": "3306",
                            "sourceAddressPrefix": "*",
                            "destinationAddressPrefix": "[concat(variables('v_NetworkRangePrefix'), add(parameters('env_Instance'), variables('v_AddressRangeOffsets')[parameters('env_Type')].ThirdOctet), '.', add(variables('v_Subnets')[7].FourthOctetStart, variables('v_AddressRangeOffsets')[parameters('env_Type')].FourthOctet), '/', variables('v_Subnets')[7].CIDR)]",
                            "access": "Allow",
                            "priority": 140,
                            "direction": "Outbound"
                        }
                    },
                    {
                        "name": "file-111-sgr",
                        "properties": {
                            "description": "File Server Traffic - Outbound Port 111",
                            "protocol": "Tcp",
                            "sourcePortRange": "*",
                            "destinationPortRange": "111",
                            "sourceAddressPrefix": "*",
                            "destinationAddressPrefix": "[concat(variables('v_NetworkRangePrefix'), add(parameters('env_Instance'), variables('v_AddressRangeOffsets')[parameters('env_Type')].ThirdOctet), '.', add(variables('v_Subnets')[6].FourthOctetStart, variables('v_AddressRangeOffsets')[parameters('env_Type')].FourthOctet), '/', variables('v_Subnets')[6].CIDR)]",
                            "access": "Allow",
                            "priority": 145,
                            "direction": "Outbound"
                        }
                    },
                    {
                        "name": "file-2049-sgr",
                        "properties": {
                            "description": "File Server Traffic - Outbound Port 2049",
                            "protocol": "Tcp",
                            "sourcePortRange": "*",
                            "destinationPortRange": "2049",
                            "sourceAddressPrefix": "*",
                            "destinationAddressPrefix": "[concat(variables('v_NetworkRangePrefix'), add(parameters('env_Instance'), variables('v_AddressRangeOffsets')[parameters('env_Type')].ThirdOctet), '.', add(variables('v_Subnets')[6].FourthOctetStart, variables('v_AddressRangeOffsets')[parameters('env_Type')].FourthOctet), '/', variables('v_Subnets')[6].CIDR)]",
                            "access": "Allow",
                            "priority": 150,
                            "direction": "Outbound"
                        }
                    },
                    {
                        "name": "yum-80-sgr",
                        "properties": {
                            "description": "Yum Repository - Outbound Port 80",
                            "protocol": "Tcp",
                            "sourcePortRange": "*",
                            "destinationPortRange": "80",
                            "sourceAddressPrefix": "*",
                            "destinationAddressPrefix": "52.62.252.40/32",
                            "access": "Allow",
                            "priority": 155,
                            "direction": "Outbound"
                        }
                    },
                    {
                        "name": "puppetserver-8140-sgr",
                        "properties": {
                            "description": "Puppet Server - Outbound Port 8140",
                            "protocol": "Tcp",
                            "sourcePortRange": "*",
                            "destinationPortRange": "8140",
                            "sourceAddressPrefix": "*",
                            "destinationAddressPrefix": "52.62.252.40/32",
                            "access": "Allow",
                            "priority": 160,
                            "direction": "Outbound"
                        }
                    },
                    {
                        "name": "puppetdb-8081-sgr",
                        "properties": {
                            "description": "Puppet DB Server - Outbound Port 8081",
                            "protocol": "Tcp",
                            "sourcePortRange": "*",
                            "destinationPortRange": "8081",
                            "sourceAddressPrefix": "*",
                            "destinationAddressPrefix": "52.62.252.40/32",
                            "access": "Allow",
                            "priority": 165,
                            "direction": "Outbound"
                        }
                    },
                    {
                        "name": "http-all-out-sgr",
                        "properties": {
                            "description": "HTTP - Outbound HTTP ports",
                            "protocol": "Tcp",
                            "sourcePortRange": "*",
                            "destinationPortRange": "80",
                            "sourceAddressPrefix": "*",
                            "destinationAddressPrefix": "*",
                            "access": "Allow",
                            "priority": 400,
                            "direction": "Outbound"
                        }
                    },
                    {
                        "name": "https-all-out-sgr",
                        "properties": {
                            "description": "HTTPS - Outbound HTTPS ports",
                            "protocol": "Tcp",
                            "sourcePortRange": "*",
                            "destinationPortRange": "443",
                            "sourceAddressPrefix": "*",
                            "destinationAddressPrefix": "*",
                            "access": "Allow",
                            "priority": 410,
                            "direction": "Outbound"
                        }
                    },
                    {
                        "name": "ms-all-out-sgr",
                        "properties": {
                            "description": "Microsoft - Outbound all ports",
                            "protocol": "*",
                            "sourcePortRange": "*",
                            "destinationPortRange": "*",
                            "sourceAddressPrefix": "*",
                            "destinationAddressPrefix": "168.63.129.16/32",
                            "access": "Allow",
                            "priority": 500,
                            "direction": "Outbound"
                        }
                    },
                    {
                        "name": "deny-all-out-sgr",
                        "properties": {
                            "description": "Deny all other outbound traffic",
                            "protocol": "*",
                            "sourcePortRange": "*",
                            "destinationPortRange": "*",
                            "sourceAddressPrefix": "*",
                            "destinationAddressPrefix": "*",
                            "access": "Deny",
                            "priority": 1000,
                            "direction": "Outbound"
                        }
                    }
                ]
            },
            "tags": {
                "Name": "[toLower(concat(variables('v_EnvironmentPrefix'), '-', parameters('env_Type'), parameters('env_Instance'), '-', variables('v_Subnets')[5].Name, '-sg'))]",
                "env_Brand": "[toLower(parameters('env_Brand'))]",
                "env_Description": "[toLower(parameters('env_Description'))]",
                "env_Type": "[toLower(parameters('env_Type'))]",
                "env_Instance": "[toLower(string(parameters('env_Instance')))]",
                "env_Owner": "[toLower(parameters('env_Owner'))]",
                "env_Location": "[resourceGroup().location]",
                "env_TemplateCreator": "[toLower(variables('v_TemplateCreator'))]",
                "env_TemplateVersion": "[toLower(variables('v_TemplateVersion'))]"
            }
        },
        {
            "type": "Microsoft.Network/networkSecurityGroups",
            "comments": "File Security Group",
            "apiVersion": "2015-06-15",
            "name": "[toLower(concat(variables('v_EnvironmentPrefix'), '-', parameters('env_Type'), parameters('env_Instance'), '-', variables('v_Subnets')[6].Name, '-sg'))]",
            "location": "[resourceGroup().location]",
            "properties": {
                "securityRules": [
                    {
                        "name": "admin-111-sgr",
                        "properties": {
                            "description": "Admin Traffic - Inbound Port 111",
                            "protocol": "Tcp",
                            "sourcePortRange": "*",
                            "destinationPortRange": "111",
                            "sourceAddressPrefix": "[concat(variables('v_NetworkRangePrefix'), add(parameters('env_Instance'), variables('v_AddressRangeOffsets')[parameters('env_Type')].ThirdOctet), '.', add(variables('v_Subnets')[5].FourthOctetStart, variables('v_AddressRangeOffsets')[parameters('env_Type')].FourthOctet), '/', variables('v_Subnets')[5].CIDR)]",
                            "destinationAddressPrefix": "*",
                            "access": "Allow",
                            "priority": 100,
                            "direction": "Inbound"
                        }
                    },
                    {
                        "name": "admin-2049-sgr",
                        "properties": {
                            "description": "Admin Traffic - Inbound Port 2049",
                            "protocol": "Tcp",
                            "sourcePortRange": "*",
                            "destinationPortRange": "2049",
                            "sourceAddressPrefix": "[concat(variables('v_NetworkRangePrefix'), add(parameters('env_Instance'), variables('v_AddressRangeOffsets')[parameters('env_Type')].ThirdOctet), '.', add(variables('v_Subnets')[5].FourthOctetStart, variables('v_AddressRangeOffsets')[parameters('env_Type')].FourthOctet), '/', variables('v_Subnets')[5].CIDR)]",
                            "destinationAddressPrefix": "*",
                            "access": "Allow",
                            "priority": 105,
                            "direction": "Inbound"
                        }
                    },
                    {
                        "name": "app-111-sgr",
                        "properties": {
                            "description": "App Traffic - Inbound Port 111",
                            "protocol": "Tcp",
                            "sourcePortRange": "*",
                            "destinationPortRange": "111",
                            "sourceAddressPrefix": "[concat(variables('v_NetworkRangePrefix'), add(parameters('env_Instance'), variables('v_AddressRangeOffsets')[parameters('env_Type')].ThirdOctet), '.', add(variables('v_Subnets')[4].FourthOctetStart, variables('v_AddressRangeOffsets')[parameters('env_Type')].FourthOctet), '/', variables('v_Subnets')[4].CIDR)]",
                            "destinationAddressPrefix": "*",
                            "access": "Allow",
                            "priority": 110,
                            "direction": "Inbound"
                        }
                    },
                    {
                        "name": "app-2049-sgr",
                        "properties": {
                            "description": "App Traffic - Inbound Port 2049",
                            "protocol": "Tcp",
                            "sourcePortRange": "*",
                            "destinationPortRange": "2049",
                            "sourceAddressPrefix": "[concat(variables('v_NetworkRangePrefix'), add(parameters('env_Instance'), variables('v_AddressRangeOffsets')[parameters('env_Type')].ThirdOctet), '.', add(variables('v_Subnets')[4].FourthOctetStart, variables('v_AddressRangeOffsets')[parameters('env_Type')].FourthOctet), '/', variables('v_Subnets')[4].CIDR)]",
                            "destinationAddressPrefix": "*",
                            "access": "Allow",
                            "priority": 115,
                            "direction": "Inbound"
                        }
                    },
                    {
                        "name": "hnau-corp-internal-22-sgr",
                        "properties": {
                            "description": "HNAU Internal Corp Traffic - Inbound Port 22",
                            "protocol": "Tcp",
                            "sourcePortRange": "*",
                            "destinationPortRange": "22",
                            "sourceAddressPrefix": "10.0.0.0/8",
                            "destinationAddressPrefix": "*",
                            "access": "Allow",
                            "priority": 120,
                            "direction": "Inbound"
                        }
                    },
                    {
                        "name": "ms-all-in-sgr",
                        "properties": {
                            "description": "Microsoft - Inbound all ports",
                            "protocol": "*",
                            "sourcePortRange": "*",
                            "destinationPortRange": "*",
                            "sourceAddressPrefix": "168.63.129.16/32",
                            "destinationAddressPrefix": "*",
                            "access": "Allow",
                            "priority": 500,
                            "direction": "Inbound"
                        }
                    },
                    {
                        "name": "deny-all-in-sgr",
                        "properties": {
                            "description": "Deny all other inbound traffic",
                            "protocol": "*",
                            "sourcePortRange": "*",
                            "destinationPortRange": "*",
                            "sourceAddressPrefix": "*",
                            "destinationAddressPrefix": "*",
                            "access": "Deny",
                            "priority": 1000,
                            "direction": "Inbound"
                        }
                    },
                    {
                        "name": "yum-80-sgr",
                        "properties": {
                            "description": "Yum Repository - Outbound Port 80",
                            "protocol": "Tcp",
                            "sourcePortRange": "*",
                            "destinationPortRange": "80",
                            "sourceAddressPrefix": "*",
                            "destinationAddressPrefix": "52.62.252.40/32",
                            "access": "Allow",
                            "priority": 100,
                            "direction": "Outbound"
                        }
                    },
                    {
                        "name": "puppetserver-8140-sgr",
                        "properties": {
                            "description": "Puppet Server - Outbound Port 8140",
                            "protocol": "Tcp",
                            "sourcePortRange": "*",
                            "destinationPortRange": "8140",
                            "sourceAddressPrefix": "*",
                            "destinationAddressPrefix": "52.62.252.40/32",
                            "access": "Allow",
                            "priority": 105,
                            "direction": "Outbound"
                        }
                    },
                    {
                        "name": "puppetdb-8081-sgr",
                        "properties": {
                            "description": "Puppet DB Server - Outbound Port 8081",
                            "protocol": "Tcp",
                            "sourcePortRange": "*",
                            "destinationPortRange": "8081",
                            "sourceAddressPrefix": "*",
                            "destinationAddressPrefix": "52.62.252.40/32",
                            "access": "Allow",
                            "priority": 110,
                            "direction": "Outbound"
                        }
                    },
                    {
                        "name": "http-all-out-sgr",
                        "properties": {
                            "description": "HTTP - Outbound HTTP ports",
                            "protocol": "Tcp",
                            "sourcePortRange": "*",
                            "destinationPortRange": "80",
                            "sourceAddressPrefix": "*",
                            "destinationAddressPrefix": "*",
                            "access": "Allow",
                            "priority": 400,
                            "direction": "Outbound"
                        }
                    },
                    {
                        "name": "https-all-out-sgr",
                        "properties": {
                            "description": "HTTPS - Outbound HTTPS ports",
                            "protocol": "Tcp",
                            "sourcePortRange": "*",
                            "destinationPortRange": "443",
                            "sourceAddressPrefix": "*",
                            "destinationAddressPrefix": "*",
                            "access": "Allow",
                            "priority": 410,
                            "direction": "Outbound"
                        }
                    },
                    {
                        "name": "ms-all-out-sgr",
                        "properties": {
                            "description": "Microsoft - Outbound all ports",
                            "protocol": "*",
                            "sourcePortRange": "*",
                            "destinationPortRange": "*",
                            "sourceAddressPrefix": "*",
                            "destinationAddressPrefix": "168.63.129.16/32",
                            "access": "Allow",
                            "priority": 500,
                            "direction": "Outbound"
                        }
                    },
                    {
                        "name": "deny-all-out-sgr",
                        "properties": {
                            "description": "Deny all other outbound traffic",
                            "protocol": "*",
                            "sourcePortRange": "*",
                            "destinationPortRange": "*",
                            "sourceAddressPrefix": "*",
                            "destinationAddressPrefix": "*",
                            "access": "Deny",
                            "priority": 1000,
                            "direction": "Outbound"
                        }
                    }
                ]
            },
            "tags": {
                "Name": "[toLower(concat(variables('v_EnvironmentPrefix'), '-', parameters('env_Type'), parameters('env_Instance'), '-', variables('v_Subnets')[6].Name, '-sg'))]",
                "env_Brand": "[toLower(parameters('env_Brand'))]",
                "env_Description": "[toLower(parameters('env_Description'))]",
                "env_Type": "[toLower(parameters('env_Type'))]",
                "env_Instance": "[toLower(string(parameters('env_Instance')))]",
                "env_Owner": "[toLower(parameters('env_Owner'))]",
                "env_Location": "[resourceGroup().location]",
                "env_TemplateCreator": "[toLower(variables('v_TemplateCreator'))]",
                "env_TemplateVersion": "[toLower(variables('v_TemplateVersion'))]"
            }
        },
        {
            "type": "Microsoft.Network/networkSecurityGroups",
            "comments": "Database Security Group",
            "apiVersion": "2015-06-15",
            "name": "[toLower(concat(variables('v_EnvironmentPrefix'), '-', parameters('env_Type'), parameters('env_Instance'), '-', variables('v_Subnets')[7].Name, '-sg'))]",
            "location": "[resourceGroup().location]",
            "properties": {
                "securityRules": [
                    {
                        "name": "admin-3306-sgr",
                        "properties": {
                            "description": "Admin Traffic - Inbound Port 3306",
                            "protocol": "Tcp",
                            "sourcePortRange": "*",
                            "destinationPortRange": "3306",
                            "sourceAddressPrefix": "[concat(variables('v_NetworkRangePrefix'), add(parameters('env_Instance'), variables('v_AddressRangeOffsets')[parameters('env_Type')].ThirdOctet), '.', add(variables('v_Subnets')[5].FourthOctetStart, variables('v_AddressRangeOffsets')[parameters('env_Type')].FourthOctet), '/', variables('v_Subnets')[5].CIDR)]",
                            "destinationAddressPrefix": "*",
                            "access": "Allow",
                            "priority": 100,
                            "direction": "Inbound"
                        }
                    },
                    {
                        "name": "app-3306-sgr",
                        "properties": {
                            "description": "App Traffic - Inbound Port 3306",
                            "protocol": "Tcp",
                            "sourcePortRange": "*",
                            "destinationPortRange": "3306",
                            "sourceAddressPrefix": "[concat(variables('v_NetworkRangePrefix'), add(parameters('env_Instance'), variables('v_AddressRangeOffsets')[parameters('env_Type')].ThirdOctet), '.', add(variables('v_Subnets')[4].FourthOctetStart, variables('v_AddressRangeOffsets')[parameters('env_Type')].FourthOctet), '/', variables('v_Subnets')[4].CIDR)]",
                            "destinationAddressPrefix": "*",
                            "access": "Allow",
                            "priority": 105,
                            "direction": "Inbound"
                        }
                    },
                    {
                        "name": "hnau-corp-internal-22-sgr",
                        "properties": {
                            "description": "HNAU Internal Corp Traffic - Inbound Port 22",
                            "protocol": "Tcp",
                            "sourcePortRange": "*",
                            "destinationPortRange": "22",
                            "sourceAddressPrefix": "10.0.0.0/8",
                            "destinationAddressPrefix": "*",
                            "access": "Allow",
                            "priority": 110,
                            "direction": "Inbound"
                        }
                    },
                    {
                        "name": "ms-all-in-sgr",
                        "properties": {
                            "description": "Microsoft - Inbound all ports",
                            "protocol": "*",
                            "sourcePortRange": "*",
                            "destinationPortRange": "*",
                            "sourceAddressPrefix": "168.63.129.16/32",
                            "destinationAddressPrefix": "*",
                            "access": "Allow",
                            "priority": 500,
                            "direction": "Inbound"
                        }
                    },
                    {
                        "name": "deny-all-in-sgr",
                        "properties": {
                            "description": "Deny all other inbound traffic",
                            "protocol": "*",
                            "sourcePortRange": "*",
                            "destinationPortRange": "*",
                            "sourceAddressPrefix": "*",
                            "destinationAddressPrefix": "*",
                            "access": "Deny",
                            "priority": 1000,
                            "direction": "Inbound"
                        }
                    },
                    {
                        "name": "yum-80-sgr",
                        "properties": {
                            "description": "Yum Repository - Outbound Port 80",
                            "protocol": "Tcp",
                            "sourcePortRange": "*",
                            "destinationPortRange": "80",
                            "sourceAddressPrefix": "*",
                            "destinationAddressPrefix": "52.62.252.40/32",
                            "access": "Allow",
                            "priority": 100,
                            "direction": "Outbound"
                        }
                    },
                    {
                        "name": "puppetserver-8140-sgr",
                        "properties": {
                            "description": "Puppet Server - Outbound Port 8140",
                            "protocol": "Tcp",
                            "sourcePortRange": "*",
                            "destinationPortRange": "8140",
                            "sourceAddressPrefix": "*",
                            "destinationAddressPrefix": "52.62.252.40/32",
                            "access": "Allow",
                            "priority": 105,
                            "direction": "Outbound"
                        }
                    },
                    {
                        "name": "puppetdb-8081-sgr",
                        "properties": {
                            "description": "Puppet DB Server - Outbound Port 8081",
                            "protocol": "Tcp",
                            "sourcePortRange": "*",
                            "destinationPortRange": "8081",
                            "sourceAddressPrefix": "*",
                            "destinationAddressPrefix": "52.62.252.40/32",
                            "access": "Allow",
                            "priority": 110,
                            "direction": "Outbound"
                        }
                    },
                    {
                        "name": "http-all-out-sgr",
                        "properties": {
                            "description": "HTTP - Outbound HTTP ports",
                            "protocol": "Tcp",
                            "sourcePortRange": "*",
                            "destinationPortRange": "80",
                            "sourceAddressPrefix": "*",
                            "destinationAddressPrefix": "*",
                            "access": "Allow",
                            "priority": 400,
                            "direction": "Outbound"
                        }
                    },
                    {
                        "name": "https-all-out-sgr",
                        "properties": {
                            "description": "HTTPS - Outbound HTTPS ports",
                            "protocol": "Tcp",
                            "sourcePortRange": "*",
                            "destinationPortRange": "443",
                            "sourceAddressPrefix": "*",
                            "destinationAddressPrefix": "*",
                            "access": "Allow",
                            "priority": 410,
                            "direction": "Outbound"
                        }
                    },
                    {
                        "name": "ms-all-out-sgr",
                        "properties": {
                            "description": "Microsoft - Outbound all ports",
                            "protocol": "*",
                            "sourcePortRange": "*",
                            "destinationPortRange": "*",
                            "sourceAddressPrefix": "*",
                            "destinationAddressPrefix": "168.63.129.16/32",
                            "access": "Allow",
                            "priority": 500,
                            "direction": "Outbound"
                        }
                    },
                    {
                        "name": "deny-all-out-sgr",
                        "properties": {
                            "description": "Deny all other outbound traffic",
                            "protocol": "*",
                            "sourcePortRange": "*",
                            "destinationPortRange": "*",
                            "sourceAddressPrefix": "*",
                            "destinationAddressPrefix": "*",
                            "access": "Deny",
                            "priority": 1000,
                            "direction": "Outbound"
                        }
                    }
                ]
            },
            "tags": {
                "Name": "[toLower(concat(variables('v_EnvironmentPrefix'), '-', parameters('env_Type'), parameters('env_Instance'), '-', variables('v_Subnets')[7].Name, '-sg'))]",
                "env_Brand": "[toLower(parameters('env_Brand'))]",
                "env_Description": "[toLower(parameters('env_Description'))]",
                "env_Type": "[toLower(parameters('env_Type'))]",
                "env_Instance": "[toLower(string(parameters('env_Instance')))]",
                "env_Owner": "[toLower(parameters('env_Owner'))]",
                "env_Location": "[resourceGroup().location]",
                "env_TemplateCreator": "[toLower(variables('v_TemplateCreator'))]",
                "env_TemplateVersion": "[toLower(variables('v_TemplateVersion'))]"
            }
        },
        {
            "type": "Microsoft.Network/networkSecurityGroups",
            "comments": "Util Security Group",
            "apiVersion": "2015-06-15",
            "name": "[toLower(concat(variables('v_EnvironmentPrefix'), '-', parameters('env_Type'), parameters('env_Instance'), '-', variables('v_Subnets')[8].Name, '-sg'))]",
            "location": "[resourceGroup().location]",
            "properties": {
                "securityRules": [
                    {
                        "name": "hnau-corp-internal-22-sgr",
                        "properties": {
                            "description": "HNAU Internal Corp Traffic - Inbound Port 22",
                            "protocol": "Tcp",
                            "sourcePortRange": "*",
                            "destinationPortRange": "22",
                            "sourceAddressPrefix": "10.0.0.0/8",
                            "destinationAddressPrefix": "*",
                            "access": "Allow",
                            "priority": 100,
                            "direction": "Inbound"
                        }
                    },
                    {
                        "name": "ms-all-in-sgr",
                        "properties": {
                            "description": "Microsoft - Inbound all ports",
                            "protocol": "*",
                            "sourcePortRange": "*",
                            "destinationPortRange": "*",
                            "sourceAddressPrefix": "168.63.129.16/32",
                            "destinationAddressPrefix": "*",
                            "access": "Allow",
                            "priority": 500,
                            "direction": "Inbound"
                        }
                    },
                    {
                        "name": "deny-all-in-sgr",
                        "properties": {
                            "description": "Deny all other inbound traffic",
                            "protocol": "*",
                            "sourcePortRange": "*",
                            "destinationPortRange": "*",
                            "sourceAddressPrefix": "*",
                            "destinationAddressPrefix": "*",
                            "access": "Deny",
                            "priority": 1000,
                            "direction": "Inbound"
                        }
                    },
                    {
                        "name": "yum-80-sgr",
                        "properties": {
                            "description": "Yum Repository - Outbound Port 80",
                            "protocol": "Tcp",
                            "sourcePortRange": "*",
                            "destinationPortRange": "80",
                            "sourceAddressPrefix": "*",
                            "destinationAddressPrefix": "52.62.252.40/32",
                            "access": "Allow",
                            "priority": 100,
                            "direction": "Outbound"
                        }
                    },
                    {
                        "name": "puppetserver-8140-sgr",
                        "properties": {
                            "description": "Puppet Server - Outbound Port 8140",
                            "protocol": "Tcp",
                            "sourcePortRange": "*",
                            "destinationPortRange": "8140",
                            "sourceAddressPrefix": "*",
                            "destinationAddressPrefix": "52.62.252.40/32",
                            "access": "Allow",
                            "priority": 105,
                            "direction": "Outbound"
                        }
                    },
                    {
                        "name": "puppetdb-8081-sgr",
                        "properties": {
                            "description": "Puppet DB Server - Outbound Port 8081",
                            "protocol": "Tcp",
                            "sourcePortRange": "*",
                            "destinationPortRange": "8081",
                            "sourceAddressPrefix": "*",
                            "destinationAddressPrefix": "52.62.252.40/32",
                            "access": "Allow",
                            "priority": 110,
                            "direction": "Outbound"
                        }
                    },
                    {
                        "name": "http-all-out-sgr",
                        "properties": {
                            "description": "HTTP - Outbound HTTP ports",
                            "protocol": "Tcp",
                            "sourcePortRange": "*",
                            "destinationPortRange": "80",
                            "sourceAddressPrefix": "*",
                            "destinationAddressPrefix": "*",
                            "access": "Allow",
                            "priority": 400,
                            "direction": "Outbound"
                        }
                    },
                    {
                        "name": "https-all-out-sgr",
                        "properties": {
                            "description": "HTTPS - Outbound HTTPS ports",
                            "protocol": "Tcp",
                            "sourcePortRange": "*",
                            "destinationPortRange": "443",
                            "sourceAddressPrefix": "*",
                            "destinationAddressPrefix": "*",
                            "access": "Allow",
                            "priority": 410,
                            "direction": "Outbound"
                        }
                    },
                    {
                        "name": "ms-all-out-sgr",
                        "properties": {
                            "description": "Microsoft - Outbound all ports",
                            "protocol": "*",
                            "sourcePortRange": "*",
                            "destinationPortRange": "*",
                            "sourceAddressPrefix": "*",
                            "destinationAddressPrefix": "168.63.129.16/32",
                            "access": "Allow",
                            "priority": 500,
                            "direction": "Outbound"
                        }
                    },
                    {
                        "name": "deny-all-out-sgr",
                        "properties": {
                            "description": "Deny all other outbound traffic",
                            "protocol": "*",
                            "sourcePortRange": "*",
                            "destinationPortRange": "*",
                            "sourceAddressPrefix": "*",
                            "destinationAddressPrefix": "*",
                            "access": "Deny",
                            "priority": 1000,
                            "direction": "Outbound"
                        }
                    }
                ]
            },
            "tags": {
                "Name": "[toLower(concat(variables('v_EnvironmentPrefix'), '-', parameters('env_Type'), parameters('env_Instance'), '-', variables('v_Subnets')[8].Name, '-sg'))]",
                "env_Brand": "[toLower(parameters('env_Brand'))]",
                "env_Description": "[toLower(parameters('env_Description'))]",
                "env_Type": "[toLower(parameters('env_Type'))]",
                "env_Instance": "[toLower(string(parameters('env_Instance')))]",
                "env_Owner": "[toLower(parameters('env_Owner'))]",
                "env_Location": "[resourceGroup().location]",
                "env_TemplateCreator": "[toLower(variables('v_TemplateCreator'))]",
                "env_TemplateVersion": "[toLower(variables('v_TemplateVersion'))]"
            }
        },
        {
            "type": "Microsoft.Network/publicIPAddresses",
            "comments": "Web Accelerator Load Balancer Public IP Address",
            "name": "[toLower(concat(variables('v_EnvironmentPrefix'), '-', parameters('env_Type'), parameters('env_Instance'), '-', variables('v_LoadBalancerRoles')[0].Name, '-ip'))]",
            "apiVersion": "2015-06-15",
            "location": "[resourceGroup().location]",
            "properties": {
                "publicIPAllocationMethod": "Static"
            },
            "tags": {
                "Name": "[toLower(concat(variables('v_EnvironmentPrefix'), '-', parameters('env_Type'), parameters('env_Instance'), '-', variables('v_LoadBalancerRoles')[0].Name, '-ip'))]",
                "env_Brand": "[toLower(parameters('env_Brand'))]",
                "env_Description": "[toLower(parameters('env_Description'))]",
                "env_Type": "[toLower(parameters('env_Type'))]",
                "env_Instance": "[toLower(string(parameters('env_Instance')))]",
                "env_Owner": "[toLower(parameters('env_Owner'))]",
                "env_Location": "[resourceGroup().location]",
                "env_TemplateCreator": "[toLower(variables('v_TemplateCreator'))]",
                "env_TemplateVersion": "[toLower(variables('v_TemplateVersion'))]"
            }
        },
        {
            "type": "Microsoft.Network/loadBalancers",
            "comments": "Web Accelerator Load Balancer",
            "name": "[toLower(concat(variables('v_EnvironmentPrefix'), '-', parameters('env_Type'), parameters('env_Instance'), '-', variables('v_LoadBalancerRoles')[0].Name, '-lb'))]",
            "apiVersion": "2015-06-15",
            "location": "[resourceGroup().location]",
            "dependsOn": [
                "[concat('Microsoft.Network/virtualNetworks/', toLower(concat(variables('v_EnvironmentPrefix'), '-', parameters('env_Type'), parameters('env_Instance'), '-vnet')))]"
            ],
            "properties": {
                "frontendIPConfigurations": [
                    {
                        "name": "loadBalancerFrontEnd",
                        "properties": {
                            "publicIPAddress": {
                                "id": "[resourceId('Microsoft.Network/publicIPAddresses', toLower(concat(variables('v_EnvironmentPrefix'), '-', parameters('env_Type'), parameters('env_Instance'), '-', variables('v_ServerRoles')[0].Name, '-ip')))]"
                            }
                        }
                    }
                ],
                "backendAddressPools": [
                    {
                        "name": "loadBalancerBackEnd"
                    }
                ],
                "loadBalancingRules": [
                    {
                        "name": "lbrule1",
                        "properties": {
                            "frontendIPConfiguration": {
                                "id": "[concat(resourceId('Microsoft.Network/loadBalancers', toLower(concat(variables('v_EnvironmentPrefix'), '-', parameters('env_Type'), parameters('env_Instance'), '-', variables('v_LoadBalancerRoles')[0].Name, '-lb'))), '/frontendIpConfigurations/loadBalancerFrontEnd')]"
                            },
                            "backendAddressPool": {
                                "id": "[concat(resourceId('Microsoft.Network/loadBalancers', toLower(concat(variables('v_EnvironmentPrefix'), '-', parameters('env_Type'), parameters('env_Instance'), '-', variables('v_LoadBalancerRoles')[0].Name, '-lb'))), '/backendAddressPools/loadBalancerBackEnd')]"
                            },
                            "probe": {
                                "id": "[concat(resourceId('Microsoft.Network/loadBalancers', toLower(concat(variables('v_EnvironmentPrefix'), '-', parameters('env_Type'), parameters('env_Instance'), '-', variables('v_LoadBalancerRoles')[0].Name, '-lb'))), '/probes/lbprobe1')]"
                            },
                            "protocol": "Tcp",
                            "frontendPort": 80,
                            "backendPort": 80,
                            "idleTimeoutInMinutes": 15
                        }
                    },
                    {
                        "name": "lbrule2",
                        "properties": {
                            "frontendIPConfiguration": {
                                "id": "[concat(resourceId('Microsoft.Network/loadBalancers', toLower(concat(variables('v_EnvironmentPrefix'), '-', parameters('env_Type'), parameters('env_Instance'), '-', variables('v_LoadBalancerRoles')[0].Name, '-lb'))), '/frontendIpConfigurations/loadBalancerFrontEnd')]"
                            },
                            "backendAddressPool": {
                                "id": "[concat(resourceId('Microsoft.Network/loadBalancers', toLower(concat(variables('v_EnvironmentPrefix'), '-', parameters('env_Type'), parameters('env_Instance'), '-', variables('v_LoadBalancerRoles')[0].Name, '-lb'))), '/backendAddressPools/loadBalancerBackEnd')]"
                            },
                            "probe": {
                                "id": "[concat(resourceId('Microsoft.Network/loadBalancers', toLower(concat(variables('v_EnvironmentPrefix'), '-', parameters('env_Type'), parameters('env_Instance'), '-', variables('v_LoadBalancerRoles')[0].Name, '-lb'))), '/probes/lbprobe2')]"
                            },
                            "protocol": "Tcp",
                            "frontendPort": 443,
                            "backendPort": 443,
                            "idleTimeoutInMinutes": 15
                        }
                    }
                ],
                "probes": [
                    {
                        "name": "lbprobe1",
                        "properties": {
                            "protocol": "Tcp",
                            "port": 80,
                            "intervalInSeconds": 15,
                            "numberOfProbes": 2
                        }
                    },
                    {
                        "name": "lbprobe2",
                        "properties": {
                            "protocol": "Tcp",
                            "port": 443,
                            "intervalInSeconds": 15,
                            "numberOfProbes": 2
                        }
                    }
                ]
            },
            "tags": {
                "Name": "[toLower(concat(variables('v_EnvironmentPrefix'), '-', parameters('env_Type'), parameters('env_Instance'), '-', variables('v_LoadBalancerRoles')[0].Name, '-lb'))]",
                "env_Brand": "[toLower(parameters('env_Brand'))]",
                "env_Description": "[toLower(parameters('env_Description'))]",
                "env_Type": "[toLower(parameters('env_Type'))]",
                "env_Instance": "[toLower(string(parameters('env_Instance')))]",
                "env_Owner": "[toLower(parameters('env_Owner'))]",
                "env_Location": "[resourceGroup().location]",
                "env_TemplateCreator": "[toLower(variables('v_TemplateCreator'))]",
                "env_TemplateVersion": "[toLower(variables('v_TemplateVersion'))]"
            }
        },
        {
            "type": "Microsoft.Network/networkInterfaces",
            "comments": "Web Accelerator Server NICs",
            "name": "[toLower(concat(variables('v_EnvironmentPrefix'), '-', parameters('env_Type'), parameters('env_Instance'), '-', variables('v_ServerRoles')[0].Name, copyindex(), '-nic'))]",
            "apiVersion": "2015-06-15",
            "location": "[resourceGroup().location]",
            "copy": {
                "name": "[toLower(concat('vm', variables('v_ServerRoles')[0].Name, 'NicLoop'))]",
                "count": "[variables('v_ServerRoles')[0].vmCount[parameters('env_Type')].max]"
            },
            "dependsOn": [
                "[concat('Microsoft.Network/virtualNetworks/', toLower(concat(variables('v_EnvironmentPrefix'), '-', parameters('env_Type'), parameters('env_Instance'), '-vnet')))]",
                "[toLower(concat(variables('v_EnvironmentPrefix'), '-', parameters('env_Type'), parameters('env_Instance'), '-', variables('v_LoadBalancerRoles')[0].Name, '-lb'))]"
            ],
            "properties": {
                "ipConfigurations": [
                    {
                        "name": "ipconfig1",
                        "properties": {
                            "privateIPAllocationMethod": "Dynamic",
                            "subnet": {
                                "id": "[concat(resourceId('Microsoft.Network/virtualNetworks', toLower(concat(variables('v_EnvironmentPrefix'), '-', parameters('env_Type'), parameters('env_Instance'), '-vnet'))), '/subnets/', variables('v_Subnets')[1].Name)]"
                            },
                            "loadBalancerBackendAddressPools": [
                                {
                                    "id": "[concat(resourceId('Microsoft.Network/loadBalancers', toLower(concat(variables('v_EnvironmentPrefix'), '-', parameters('env_Type'), parameters('env_Instance'), '-', variables('v_LoadBalancerRoles')[0].Name, '-lb'))),'/backendAddressPools/loadBalancerBackEnd')]"
                                }
                            ]
                        }
                    }
                ]
            },
            "tags": {
                "Name": "[toLower(concat(variables('v_EnvironmentPrefix'), '-', parameters('env_Type'), parameters('env_Instance'), '-', variables('v_ServerRoles')[0].Name, copyindex(), '-nic'))]",
                "env_Brand": "[toLower(parameters('env_Brand'))]",
                "env_Description": "[toLower(parameters('env_Description'))]",
                "env_Type": "[toLower(parameters('env_Type'))]",
                "env_Instance": "[toLower(string(parameters('env_Instance')))]",
                "env_Owner": "[toLower(parameters('env_Owner'))]",
                "env_Location": "[resourceGroup().location]",
                "env_TemplateCreator": "[toLower(variables('v_TemplateCreator'))]",
                "env_TemplateVersion": "[toLower(variables('v_TemplateVersion'))]"
            }
        },
        {
            "type": "Microsoft.Compute/virtualMachines",
            "comments": "Web Accelerator Virtual Machines",
            "name": "[toLower(concat(variables('v_EnvironmentPrefix'), '-', parameters('env_Type'), parameters('env_Instance'), '-', variables('v_ServerRoles')[0].Name, copyindex(), '-vm'))]",
            "apiVersion": "2015-06-15",
            "location": "[resourceGroup().location]",
            "copy": {
                "name": "[toLower(concat('vm', variables('v_ServerRoles')[0].Name, 'Loop'))]",
                "count": "[variables('v_ServerRoles')[0].vmCount[parameters('env_Type')].max]"
            },
            "dependsOn": [
                "[concat('Microsoft.Network/networkInterfaces/', toLower(concat(variables('v_EnvironmentPrefix'), '-', parameters('env_Type'), parameters('env_Instance'), '-', variables('v_ServerRoles')[0].Name, copyindex(), '-nic')))]",
                "[concat('Microsoft.Storage/storageAccounts/', toLower(concat(variables('v_StorageAccountName'), variables('v_StorageAccounts')[parameters('env_Type')][0].Prefix, parameters('env_Type'), parameters('env_Instance'), 'sa')))]",
                "[concat('Microsoft.Storage/storageAccounts/', toLower(concat(variables('v_StorageAccountName'), variables('v_StorageAccounts')[parameters('env_Type')][2].Prefix, parameters('env_Type'), parameters('env_Instance'), 'sa')))]"
            ],
            "properties": {
                "availabilitySet": {
                    "id": "[resourceId('Microsoft.Compute/availabilitySets', toLower(concat(variables('v_EnvironmentPrefix'), '-', parameters('env_Type'), parameters('env_Instance'), '-', variables('v_ServerRoles')[0].Name, '-as')))]"
                },
                "hardwareProfile": {
                    "vmSize": "[variables('v_ServerRoles')[0].vmSize[parameters('env_Type')]]"
                },
                "osProfile": {
                    "computerName": "[toLower(concat(variables('v_EnvironmentPrefix'), '-', parameters('env_Type'), parameters('env_Instance'), '-', variables('v_ServerRoles')[0].Name, copyindex(), '-vm'))]",
                    "adminUsername": "[variables('v_Username')]",
                    "adminPassword": "[variables('v_Password')]"
                },
                "storageProfile": {
                    "imageReference": {
                        "publisher": "[variables('v_ServerRoles')[0].imagePublisher]",
                        "offer": "[variables('v_ServerRoles')[0].imageOffer]",
                        "sku": "[variables('v_ServerRoles')[0].imageSKU]",
                        "version": "latest"
                    },
                    "osDisk": {
                        "name": "[toLower(concat(variables('v_EnvironmentPrefix'), '-', parameters('env_Type'), parameters('env_Instance'), '-', variables('v_ServerRoles')[0].Name, copyindex(), '-osdisk'))]",
                        "vhd": {
                            "uri": "[concat('http://', toLower(concat(variables('v_StorageAccountName'), variables('v_StorageAccounts')[parameters('env_Type')][0].Prefix, parameters('env_Type'), parameters('env_Instance'), 'sa')), '.blob.core.windows.net/vhds/', toLower(concat(variables('v_EnvironmentPrefix'), '-', parameters('env_Type'), parameters('env_Instance'), '-', variables('v_ServerRoles')[0].Name, copyindex(), '-osdisk')), '.vhd')]"
                        },
                        "caching": "ReadWrite",
                        "createOption": "FromImage"
                    }
                },
                "networkProfile": {
                    "networkInterfaces": [
                        {
                            "id": "[resourceId('Microsoft.Network/networkInterfaces', toLower(concat(variables('v_EnvironmentPrefix'), '-', parameters('env_Type'), parameters('env_Instance'), '-', variables('v_ServerRoles')[0].Name, copyindex(), '-nic')))]"
                        }
                    ]
                },
                "diagnosticsProfile": {
                    "bootDiagnostics": {
                        "enabled": true,
                        "storageUri": "[concat('http://', toLower(concat(variables('v_StorageAccountName'), variables('v_StorageAccounts')[parameters('env_Type')][2].Prefix, parameters('env_Type'), parameters('env_Instance'), 'sa')), '.blob.core.windows.net')]"
                    }
                }
            },
            "resources": [
                {
                    "type":"extensions",
                    "name":"LinuxDiagnostic",
                    "apiVersion":"2015-06-15",
                    "location":"[resourceGroup().location]",
                    "dependsOn":[
                        "[concat('Microsoft.Network/connections/', toLower(concat(variables('v_EnvironmentPrefix'), '-', parameters('env_Type'), parameters('env_Instance'), '-erc')))]",
                        "[concat('Microsoft.Compute/virtualMachines/', toLower(concat(variables('v_EnvironmentPrefix'), '-', parameters('env_Type'), parameters('env_Instance'), '-', variables('v_ServerRoles')[0].Name, copyindex(), '-vm')))]"                    
                    ],
                    "properties":{
                        "publisher":"Microsoft.OSTCExtensions",
                        "type":"LinuxDiagnostic",
                        "typeHandlerVersion":"2.2",
                        "settings":{
                            "xmlCfg": "[base64(concat(variables('wadCfgStart'), variables('wadCfgMemoryPerfCounter'), variables('wadCfgProcessorPerfCounter'), variables('wadCfgDiskPerfCounter'), variables('wadCfgNetworkPerfCounter'), variables('wadCfgResources'), toLower(concat(variables('v_EnvironmentPrefix'), '-', parameters('env_Type'), parameters('env_Instance'), '-', variables('v_ServerRoles')[0].Name, copyindex(), '-vm')), '\">', variables('wadCfgMetrics'), variables('wadCfgEnd')))]",
                            "StorageAccount": "[toLower(concat(variables('v_StorageAccountName'), variables('v_StorageAccounts')[parameters('env_Type')][2].Prefix, parameters('env_Type'), parameters('env_Instance'), 'sa'))]"
                        },
                        "protectedSettings":{
                            "storageAccountName": "[toLower(concat(variables('v_StorageAccountName'), variables('v_StorageAccounts')[parameters('env_Type')][2].Prefix, parameters('env_Type'), parameters('env_Instance'), 'sa'))]",
                            "storageAccountKey": "[listkeys(concat('/subscriptions/', subscription().subscriptionId, '/resourceGroups/', resourceGroup().name, '/providers/','Microsoft.Storage/storageAccounts/', toLower(concat(variables('v_StorageAccountName'), variables('v_StorageAccounts')[parameters('env_Type')][2].Prefix, parameters('env_Type'), parameters('env_Instance'), 'sa'))), '2015-06-15').key1]",
                            "storageAccountEndPoint":"https://core.windows.net/"
                        }
                    }
                }
            ],
            "tags": {
                "Name": "[toLower(concat(variables('v_EnvironmentPrefix'), '-', parameters('env_Type'), parameters('env_Instance'), '-', variables('v_ServerRoles')[0].Name, copyindex(), '-vm'))]",
                "env_Brand": "[toLower(parameters('env_Brand'))]",
                "env_Description": "[toLower(parameters('env_Description'))]",
                "env_Type": "[toLower(parameters('env_Type'))]",
                "env_Instance": "[toLower(string(parameters('env_Instance')))]",
                "env_Owner": "[toLower(parameters('env_Owner'))]",
                "env_Location": "[resourceGroup().location]",
                "env_TemplateCreator": "[toLower(variables('v_TemplateCreator'))]",
                "env_TemplateVersion": "[toLower(variables('v_TemplateVersion'))]"
            }
        },
        {
            "type": "Microsoft.Network/networkInterfaces",
            "comments": "Admin Server NICs",
            "name": "[toLower(concat(variables('v_EnvironmentPrefix'), '-', parameters('env_Type'), parameters('env_Instance'), '-', variables('v_ServerRoles')[1].Name, copyindex(), '-nic'))]",
            "apiVersion": "2015-06-15",
            "location": "[resourceGroup().location]",
            "copy": {
                "name": "[toLower(concat('vm', variables('v_ServerRoles')[1].Name, 'NicLoop'))]",
                "count": "[variables('v_ServerRoles')[1].vmCount[parameters('env_Type')].max]"
            },
            "dependsOn": [
                "[concat('Microsoft.Network/virtualNetworks/', toLower(concat(variables('v_EnvironmentPrefix'), '-', parameters('env_Type'), parameters('env_Instance'), '-vnet')))]"
            ],
            "properties": {
                "ipConfigurations": [
                    {
                        "name": "ipconfig1",
                        "properties": {
                            "privateIPAllocationMethod": "Dynamic",
                            "subnet": {
                                "id": "[concat(resourceId('Microsoft.Network/virtualNetworks', toLower(concat(variables('v_EnvironmentPrefix'), '-', parameters('env_Type'), parameters('env_Instance'), '-vnet'))), '/subnets/', variables('v_Subnets')[5].Name)]"
                            }
                        }
                    }
                ]
            },
            "tags": {
                "Name": "[toLower(concat(variables('v_EnvironmentPrefix'), '-', parameters('env_Type'), parameters('env_Instance'), '-', variables('v_ServerRoles')[1].Name, copyindex(), '-nic'))]",
                "env_Brand": "[toLower(parameters('env_Brand'))]",
                "env_Description": "[toLower(parameters('env_Description'))]",
                "env_Type": "[toLower(parameters('env_Type'))]",
                "env_Instance": "[toLower(string(parameters('env_Instance')))]",
                "env_Owner": "[toLower(parameters('env_Owner'))]",
                "env_Location": "[resourceGroup().location]",
                "env_TemplateCreator": "[toLower(variables('v_TemplateCreator'))]",
                "env_TemplateVersion": "[toLower(variables('v_TemplateVersion'))]"
            }
        },
        {
            "type": "Microsoft.Compute/virtualMachines",
            "comments": "Admin Virtual Machines",
            "name": "[toLower(concat(variables('v_EnvironmentPrefix'), '-', parameters('env_Type'), parameters('env_Instance'), '-', variables('v_ServerRoles')[1].Name, copyindex(), '-vm'))]",
            "apiVersion": "2015-06-15",
            "location": "[resourceGroup().location]",
            "copy": {
                "name": "[toLower(concat('vm', variables('v_ServerRoles')[1].Name, 'Loop'))]",
                "count": "[variables('v_ServerRoles')[1].vmCount[parameters('env_Type')].max]"
            },
            "dependsOn": [
                "[concat('Microsoft.Network/networkInterfaces/', toLower(concat(variables('v_EnvironmentPrefix'), '-', parameters('env_Type'), parameters('env_Instance'), '-', variables('v_ServerRoles')[1].Name, copyindex(), '-nic')))]",
                "[concat('Microsoft.Storage/storageAccounts/', toLower(concat(variables('v_StorageAccountName'), variables('v_StorageAccounts')[parameters('env_Type')][0].Prefix, parameters('env_Type'), parameters('env_Instance'), 'sa')))]",
                "[concat('Microsoft.Storage/storageAccounts/', toLower(concat(variables('v_StorageAccountName'), variables('v_StorageAccounts')[parameters('env_Type')][2].Prefix, parameters('env_Type'), parameters('env_Instance'), 'sa')))]"
            ],
            "properties": {
                "availabilitySet": {
                    "id": "[resourceId('Microsoft.Compute/availabilitySets', toLower(concat(variables('v_EnvironmentPrefix'), '-', parameters('env_Type'), parameters('env_Instance'), '-', variables('v_ServerRoles')[1].Name, '-as')))]"
                },
                "hardwareProfile": {
                    "vmSize": "[variables('v_ServerRoles')[1].vmSize[parameters('env_Type')]]"
                },
                "osProfile": {
                    "computerName": "[toLower(concat(variables('v_EnvironmentPrefix'), '-', parameters('env_Type'), parameters('env_Instance'), '-', variables('v_ServerRoles')[1].Name, copyindex(), '-vm'))]",
                    "adminUsername": "[variables('v_Username')]",
                    "adminPassword": "[variables('v_Password')]"
                },
                "storageProfile": {
                    "imageReference": {
                        "publisher": "[variables('v_ServerRoles')[1].imagePublisher]",
                        "offer": "[variables('v_ServerRoles')[1].imageOffer]",
                        "sku": "[variables('v_ServerRoles')[1].imageSKU]",
                        "version": "latest"
                    },
                    "osDisk": {
                        "name": "[toLower(concat(variables('v_EnvironmentPrefix'), '-', parameters('env_Type'), parameters('env_Instance'), '-', variables('v_ServerRoles')[1].Name, copyindex(), '-osdisk'))]",
                        "vhd": {
                            "uri": "[concat('http://', toLower(concat(variables('v_StorageAccountName'), variables('v_StorageAccounts')[parameters('env_Type')][0].Prefix, parameters('env_Type'), parameters('env_Instance'), 'sa')), '.blob.core.windows.net/vhds/', toLower(concat(variables('v_EnvironmentPrefix'), '-', parameters('env_Type'), parameters('env_Instance'), '-', variables('v_ServerRoles')[1].Name, copyindex(), '-osdisk')), '.vhd')]"
                        },
                        "caching": "ReadWrite",
                        "createOption": "FromImage"
                    }
                },
                "networkProfile": {
                    "networkInterfaces": [
                        {
                            "id": "[resourceId('Microsoft.Network/networkInterfaces', toLower(concat(variables('v_EnvironmentPrefix'), '-', parameters('env_Type'), parameters('env_Instance'), '-', variables('v_ServerRoles')[1].Name, copyindex(), '-nic')))]"
                        }
                    ]
                },
                "diagnosticsProfile": {
                    "bootDiagnostics": {
                        "enabled": true,
                        "storageUri": "[concat('http://', toLower(concat(variables('v_StorageAccountName'), variables('v_StorageAccounts')[parameters('env_Type')][2].Prefix, parameters('env_Type'), parameters('env_Instance'), 'sa')), '.blob.core.windows.net')]"
                    }
                }
            },
            "resources": [
                {
                    "type":"extensions",
                    "name":"LinuxDiagnostic",
                    "apiVersion":"2015-06-15",
                    "location":"[resourceGroup().location]",
                    "dependsOn":[
                        "[concat('Microsoft.Network/connections/', toLower(concat(variables('v_EnvironmentPrefix'), '-', parameters('env_Type'), parameters('env_Instance'), '-erc')))]",
                        "[concat('Microsoft.Compute/virtualMachines/', toLower(concat(variables('v_EnvironmentPrefix'), '-', parameters('env_Type'), parameters('env_Instance'), '-', variables('v_ServerRoles')[1].Name, copyindex(), '-vm')))]"                    
                    ],
                    "properties":{
                        "publisher":"Microsoft.OSTCExtensions",
                        "type":"LinuxDiagnostic",
                        "typeHandlerVersion":"2.2",
                        "settings":{
                            "xmlCfg": "[base64(concat(variables('wadCfgStart'), variables('wadCfgMemoryPerfCounter'), variables('wadCfgProcessorPerfCounter'), variables('wadCfgDiskPerfCounter'), variables('wadCfgNetworkPerfCounter'), variables('wadCfgResources'), toLower(concat(variables('v_EnvironmentPrefix'), '-', parameters('env_Type'), parameters('env_Instance'), '-', variables('v_ServerRoles')[1].Name, copyindex(), '-vm')), '\">', variables('wadCfgMetrics'), variables('wadCfgEnd')))]",
                            "StorageAccount": "[toLower(concat(variables('v_StorageAccountName'), variables('v_StorageAccounts')[parameters('env_Type')][2].Prefix, parameters('env_Type'), parameters('env_Instance'), 'sa'))]"
                        },
                        "protectedSettings":{
                            "storageAccountName": "[toLower(concat(variables('v_StorageAccountName'), variables('v_StorageAccounts')[parameters('env_Type')][2].Prefix, parameters('env_Type'), parameters('env_Instance'), 'sa'))]",
                            "storageAccountKey": "[listkeys(concat('/subscriptions/', subscription().subscriptionId, '/resourceGroups/', resourceGroup().name, '/providers/','Microsoft.Storage/storageAccounts/', toLower(concat(variables('v_StorageAccountName'), variables('v_StorageAccounts')[parameters('env_Type')][2].Prefix, parameters('env_Type'), parameters('env_Instance'), 'sa'))), '2015-06-15').key1]",
                            "storageAccountEndPoint":"https://core.windows.net/"
                        }
                    }
                }
            ],
            "tags": {
                "Name": "[toLower(concat(variables('v_EnvironmentPrefix'), '-', parameters('env_Type'), parameters('env_Instance'), '-', variables('v_ServerRoles')[1].Name, copyindex(), '-vm'))]",
                "env_Brand": "[toLower(parameters('env_Brand'))]",
                "env_Description": "[toLower(parameters('env_Description'))]",
                "env_Type": "[toLower(parameters('env_Type'))]",
                "env_Instance": "[toLower(string(parameters('env_Instance')))]",
                "env_Owner": "[toLower(parameters('env_Owner'))]",
                "env_Location": "[resourceGroup().location]",
                "env_TemplateCreator": "[toLower(variables('v_TemplateCreator'))]",
                "env_TemplateVersion": "[toLower(variables('v_TemplateVersion'))]"
            }
        },
        {
            "type": "Microsoft.Network/loadBalancers",
            "comments": "App Load Balancer",
            "name": "[toLower(concat(variables('v_EnvironmentPrefix'), '-', parameters('env_Type'), parameters('env_Instance'), '-', variables('v_LoadBalancerRoles')[1].Name, '-lb'))]",
            "apiVersion": "2015-06-15",
            "location": "[resourceGroup().location]",
            "dependsOn": [
                "[concat('Microsoft.Network/virtualNetworks/', toLower(concat(variables('v_EnvironmentPrefix'), '-', parameters('env_Type'), parameters('env_Instance'), '-vnet')))]"
            ],
            "properties": {
                "frontendIPConfigurations": [
                    {
                        "name": "loadBalancerFrontEnd",
                        "properties": {
                            "subnet": {
                                "id": "[concat(resourceId('Microsoft.Network/virtualNetworks', toLower(concat(variables('v_EnvironmentPrefix'), '-', parameters('env_Type'), parameters('env_Instance'), '-vnet'))), '/subnets/', variables('v_Subnets')[4].Name)]"
                            }
                        }
                    }
                ],
                "backendAddressPools": [
                    {
                        "name": "loadBalancerBackEnd"
                    }
                ],
                "loadBalancingRules": [
                    {
                        "name": "lbrule",
                        "properties": {
                            "frontendIPConfiguration": {
                                "id": "[concat(resourceId('Microsoft.Network/loadBalancers', toLower(concat(variables('v_EnvironmentPrefix'), '-', parameters('env_Type'), parameters('env_Instance'), '-', variables('v_LoadBalancerRoles')[1].Name, '-lb'))), '/frontendIpConfigurations/loadBalancerFrontEnd')]"
                            },
                            "backendAddressPool": {
                                "id": "[concat(resourceId('Microsoft.Network/loadBalancers', toLower(concat(variables('v_EnvironmentPrefix'), '-', parameters('env_Type'), parameters('env_Instance'), '-', variables('v_LoadBalancerRoles')[1].Name, '-lb'))), '/backendAddressPools/loadBalancerBackEnd')]"
                            },
                            "probe": {
                                "id": "[concat(resourceId('Microsoft.Network/loadBalancers', toLower(concat(variables('v_EnvironmentPrefix'), '-', parameters('env_Type'), parameters('env_Instance'), '-', variables('v_LoadBalancerRoles')[1].Name, '-lb'))), '/probes/lbprobe')]"
                            },
                            "protocol": "Tcp",
                            "frontendPort": 80,
                            "backendPort": 80,
                            "idleTimeoutInMinutes": 15
                        }
                    }
                ],
                "probes": [
                    {
                        "name": "lbprobe",
                        "properties": {
                            "protocol": "Tcp",
                            "port": 80,
                            "intervalInSeconds": 15,
                            "numberOfProbes": 2
                        }
                    }
                ]
            },
            "tags": {
                "Name": "[toLower(concat(variables('v_EnvironmentPrefix'), '-', parameters('env_Type'), parameters('env_Instance'), '-', variables('v_LoadBalancerRoles')[1].Name, '-lb'))]",
                "env_Brand": "[toLower(parameters('env_Brand'))]",
                "env_Description": "[toLower(parameters('env_Description'))]",
                "env_Type": "[toLower(parameters('env_Type'))]",
                "env_Instance": "[toLower(string(parameters('env_Instance')))]",
                "env_Owner": "[toLower(parameters('env_Owner'))]",
                "env_Location": "[resourceGroup().location]",
                "env_TemplateCreator": "[toLower(variables('v_TemplateCreator'))]",
                "env_TemplateVersion": "[toLower(variables('v_TemplateVersion'))]"
            }
        },
        {
            "type": "Microsoft.Network/networkInterfaces",
            "comments": "App Server NICs",
            "name": "[toLower(concat(variables('v_EnvironmentPrefix'), '-', parameters('env_Type'), parameters('env_Instance'), '-', variables('v_ServerRoles')[2].Name, copyindex(), '-nic'))]",
            "apiVersion": "2015-06-15",
            "location": "[resourceGroup().location]",
            "copy": {
                "name": "[toLower(concat('vm', variables('v_ServerRoles')[2].Name, 'NicLoop'))]",
                "count": "[variables('v_ServerRoles')[2].vmCount[parameters('env_Type')].max]"
            },
            "dependsOn": [
                "[concat('Microsoft.Network/virtualNetworks/', toLower(concat(variables('v_EnvironmentPrefix'), '-', parameters('env_Type'), parameters('env_Instance'), '-vnet')))]",
                "[concat('Microsoft.Network/loadBalancers/', toLower(concat(variables('v_EnvironmentPrefix'), '-', parameters('env_Type'), parameters('env_Instance'), '-', variables('v_LoadBalancerRoles')[1].Name, '-lb')))]"
            ],
            "properties": {
                "ipConfigurations": [
                    {
                        "name": "ipconfig1",
                        "properties": {
                            "privateIPAllocationMethod": "Dynamic",
                            "subnet": {
                                "id": "[concat(resourceId('Microsoft.Network/virtualNetworks', toLower(concat(variables('v_EnvironmentPrefix'), '-', parameters('env_Type'), parameters('env_Instance'), '-vnet'))), '/subnets/', variables('v_Subnets')[4].Name)]"
                            },
                            "loadBalancerBackendAddressPools": [
                                {
                                    "id": "[concat(resourceId('Microsoft.Network/loadBalancers', toLower(concat(variables('v_EnvironmentPrefix'), '-', parameters('env_Type'), parameters('env_Instance'), '-', variables('v_LoadBalancerRoles')[1].Name, '-lb'))),'/backendAddressPools/loadBalancerBackEnd')]"
                                }
                            ]
                        }
                    }
                ]
            },
            "tags": {
                "Name": "[toLower(concat(variables('v_EnvironmentPrefix'), '-', parameters('env_Type'), parameters('env_Instance'), '-', variables('v_ServerRoles')[2].Name, copyindex(), '-nic'))]",
                "env_Brand": "[toLower(parameters('env_Brand'))]",
                "env_Description": "[toLower(parameters('env_Description'))]",
                "env_Type": "[toLower(parameters('env_Type'))]",
                "env_Instance": "[toLower(string(parameters('env_Instance')))]",
                "env_Owner": "[toLower(parameters('env_Owner'))]",
                "env_Location": "[resourceGroup().location]",
                "env_TemplateCreator": "[toLower(variables('v_TemplateCreator'))]",
                "env_TemplateVersion": "[toLower(variables('v_TemplateVersion'))]"
            }
        },
        {
            "type": "Microsoft.Compute/virtualMachines",
            "comments": "App Virtual Machines",
            "name": "[toLower(concat(variables('v_EnvironmentPrefix'), '-', parameters('env_Type'), parameters('env_Instance'), '-', variables('v_ServerRoles')[2].Name, copyindex(), '-vm'))]",
            "apiVersion": "2015-06-15",
            "location": "[resourceGroup().location]",
            "copy": {
                "name": "[toLower(concat('vm', variables('v_ServerRoles')[2].Name, 'Loop'))]",
                "count": "[variables('v_ServerRoles')[2].vmCount[parameters('env_Type')].max]"
            },
            "dependsOn": [
                "[concat('Microsoft.Network/networkInterfaces/', toLower(concat(variables('v_EnvironmentPrefix'), '-', parameters('env_Type'), parameters('env_Instance'), '-', variables('v_ServerRoles')[2].Name, copyindex(), '-nic')))]",
                "[concat('Microsoft.Storage/storageAccounts/', toLower(concat(variables('v_StorageAccountName'), variables('v_StorageAccounts')[parameters('env_Type')][0].Prefix, parameters('env_Type'), parameters('env_Instance'), 'sa')))]",
                "[concat('Microsoft.Storage/storageAccounts/', toLower(concat(variables('v_StorageAccountName'), variables('v_StorageAccounts')[parameters('env_Type')][2].Prefix, parameters('env_Type'), parameters('env_Instance'), 'sa')))]"
            ],
            "properties": {
                "availabilitySet": {
                    "id": "[resourceId('Microsoft.Compute/availabilitySets', toLower(concat(variables('v_EnvironmentPrefix'), '-', parameters('env_Type'), parameters('env_Instance'), '-', variables('v_ServerRoles')[2].Name, '-as')))]"
                },
                "hardwareProfile": {
                    "vmSize": "[variables('v_ServerRoles')[2].vmSize[parameters('env_Type')]]"
                },
                "osProfile": {
                    "computerName": "[toLower(concat(variables('v_EnvironmentPrefix'), '-', parameters('env_Type'), parameters('env_Instance'), '-', variables('v_ServerRoles')[2].Name, copyindex(), '-vm'))]",
                    "adminUsername": "[variables('v_Username')]",
                    "adminPassword": "[variables('v_Password')]"
                },
                "storageProfile": {
                    "imageReference": {
                        "publisher": "[variables('v_ServerRoles')[2].imagePublisher]",
                        "offer": "[variables('v_ServerRoles')[2].imageOffer]",
                        "sku": "[variables('v_ServerRoles')[2].imageSKU]",
                        "version": "latest"
                    },
                    "osDisk": {
                        "name": "[toLower(concat(variables('v_EnvironmentPrefix'), '-', parameters('env_Type'), parameters('env_Instance'), '-', variables('v_ServerRoles')[2].Name, copyindex(), '-osdisk'))]",
                        "vhd": {
                            "uri": "[concat('http://', toLower(concat(variables('v_StorageAccountName'), variables('v_StorageAccounts')[parameters('env_Type')][0].Prefix, parameters('env_Type'), parameters('env_Instance'), 'sa')), '.blob.core.windows.net/vhds/', toLower(concat(variables('v_EnvironmentPrefix'), '-', parameters('env_Type'), parameters('env_Instance'), '-', variables('v_ServerRoles')[2].Name, copyindex(), '-osdisk')), '.vhd')]"
                        },
                        "caching": "ReadWrite",
                        "createOption": "FromImage"
                    }
                },
                "networkProfile": {
                    "networkInterfaces": [
                        {
                            "id": "[resourceId('Microsoft.Network/networkInterfaces', toLower(concat(variables('v_EnvironmentPrefix'), '-', parameters('env_Type'), parameters('env_Instance'), '-', variables('v_ServerRoles')[2].Name, copyindex(), '-nic')))]"
                        }
                    ]
                },
                "diagnosticsProfile": {
                    "bootDiagnostics": {
                        "enabled": true,
                        "storageUri": "[concat('http://', toLower(concat(variables('v_StorageAccountName'), variables('v_StorageAccounts')[parameters('env_Type')][2].Prefix, parameters('env_Type'), parameters('env_Instance'), 'sa')), '.blob.core.windows.net')]"
                    }
                }
            },
            "resources": [
                {
                    "type":"extensions",
                    "name":"LinuxDiagnostic",
                    "apiVersion":"2015-06-15",
                    "location":"[resourceGroup().location]",
                    "dependsOn":[
                        "[concat('Microsoft.Network/connections/', toLower(concat(variables('v_EnvironmentPrefix'), '-', parameters('env_Type'), parameters('env_Instance'), '-erc')))]",
                        "[concat('Microsoft.Compute/virtualMachines/', toLower(concat(variables('v_EnvironmentPrefix'), '-', parameters('env_Type'), parameters('env_Instance'), '-', variables('v_ServerRoles')[2].Name, copyindex(), '-vm')))]"                    
                    ],
                    "properties":{
                        "publisher":"Microsoft.OSTCExtensions",
                        "type":"LinuxDiagnostic",
                        "typeHandlerVersion":"2.2",
                        "settings":{
                            "xmlCfg": "[base64(concat(variables('wadCfgStart'), variables('wadCfgMemoryPerfCounter'), variables('wadCfgProcessorPerfCounter'), variables('wadCfgDiskPerfCounter'), variables('wadCfgNetworkPerfCounter'), variables('wadCfgResources'), toLower(concat(variables('v_EnvironmentPrefix'), '-', parameters('env_Type'), parameters('env_Instance'), '-', variables('v_ServerRoles')[2].Name, copyindex(), '-vm')), '\">', variables('wadCfgMetrics'), variables('wadCfgEnd')))]",
                            "StorageAccount": "[toLower(concat(variables('v_StorageAccountName'), variables('v_StorageAccounts')[parameters('env_Type')][2].Prefix, parameters('env_Type'), parameters('env_Instance'), 'sa'))]"
                        },
                        "protectedSettings":{
                            "storageAccountName": "[toLower(concat(variables('v_StorageAccountName'), variables('v_StorageAccounts')[parameters('env_Type')][2].Prefix, parameters('env_Type'), parameters('env_Instance'), 'sa'))]",
                            "storageAccountKey": "[listkeys(concat('/subscriptions/', subscription().subscriptionId, '/resourceGroups/', resourceGroup().name, '/providers/','Microsoft.Storage/storageAccounts/', toLower(concat(variables('v_StorageAccountName'), variables('v_StorageAccounts')[parameters('env_Type')][2].Prefix, parameters('env_Type'), parameters('env_Instance'), 'sa'))), '2015-06-15').key1]",
                            "storageAccountEndPoint":"https://core.windows.net/"
                        }
                    }
                }
            ],
            "tags": {
                "Name": "[toLower(concat(variables('v_EnvironmentPrefix'), '-', parameters('env_Type'), parameters('env_Instance'), '-', variables('v_ServerRoles')[2].Name, copyindex(), '-vm'))]",
                "env_Brand": "[toLower(parameters('env_Brand'))]",
                "env_Description": "[toLower(parameters('env_Description'))]",
                "env_Type": "[toLower(parameters('env_Type'))]",
                "env_Instance": "[toLower(string(parameters('env_Instance')))]",
                "env_Owner": "[toLower(parameters('env_Owner'))]",
                "env_Location": "[resourceGroup().location]",
                "env_TemplateCreator": "[toLower(variables('v_TemplateCreator'))]",
                "env_TemplateVersion": "[toLower(variables('v_TemplateVersion'))]"
            }
        },
        {
            "type": "Microsoft.Network/networkInterfaces",
            "comments": "Search Master Server NICs",
            "name": "[toLower(concat(variables('v_EnvironmentPrefix'), '-', parameters('env_Type'), parameters('env_Instance'), '-', variables('v_ServerRoles')[3].Name, copyindex(), '-nic'))]",
            "apiVersion": "2015-06-15",
            "location": "[resourceGroup().location]",
            "copy": {
                "name": "[toLower(concat('vm', variables('v_ServerRoles')[3].Name, 'NicLoop'))]",
                "count": "[variables('v_ServerRoles')[3].vmCount[parameters('env_Type')].max]"
            },
            "dependsOn": [
                "[concat('Microsoft.Network/virtualNetworks/', toLower(concat(variables('v_EnvironmentPrefix'), '-', parameters('env_Type'), parameters('env_Instance'), '-vnet')))]"
            ],
            "properties": {
                "ipConfigurations": [
                    {
                        "name": "ipconfig1",
                        "properties": {
                            "privateIPAllocationMethod": "Dynamic",
                            "subnet": {
                                "id": "[concat(resourceId('Microsoft.Network/virtualNetworks', toLower(concat(variables('v_EnvironmentPrefix'), '-', parameters('env_Type'), parameters('env_Instance'), '-vnet'))), '/subnets/', variables('v_Subnets')[2].Name)]"
                            }
                        }
                    }
                ]
            },
            "tags": {
                "Name": "[toLower(concat(variables('v_EnvironmentPrefix'), '-', parameters('env_Type'), parameters('env_Instance'), '-', variables('v_ServerRoles')[3].Name, copyindex(), '-nic'))]",
                "env_Brand": "[toLower(parameters('env_Brand'))]",
                "env_Description": "[toLower(parameters('env_Description'))]",
                "env_Type": "[toLower(parameters('env_Type'))]",
                "env_Instance": "[toLower(string(parameters('env_Instance')))]",
                "env_Owner": "[toLower(parameters('env_Owner'))]",
                "env_Location": "[resourceGroup().location]",
                "env_TemplateCreator": "[toLower(variables('v_TemplateCreator'))]",
                "env_TemplateVersion": "[toLower(variables('v_TemplateVersion'))]"
            }
        },
        {
            "type": "Microsoft.Compute/virtualMachines",
            "comments": "Search Master Virtual Machines",
            "name": "[toLower(concat(variables('v_EnvironmentPrefix'), '-', parameters('env_Type'), parameters('env_Instance'), '-', variables('v_ServerRoles')[3].Name, copyindex(), '-vm'))]",
            "apiVersion": "2015-06-15",
            "location": "[resourceGroup().location]",
            "copy": {
                "name": "[toLower(concat('vm', variables('v_ServerRoles')[3].Name, 'Loop'))]",
                "count": "[variables('v_ServerRoles')[3].vmCount[parameters('env_Type')].max]"
            },
            "dependsOn": [
                "[concat('Microsoft.Network/networkInterfaces/', toLower(concat(variables('v_EnvironmentPrefix'), '-', parameters('env_Type'), parameters('env_Instance'), '-', variables('v_ServerRoles')[3].Name, copyindex(), '-nic')))]",
                "[concat('Microsoft.Storage/storageAccounts/', toLower(concat(variables('v_StorageAccountName'), variables('v_StorageAccounts')[parameters('env_Type')][0].Prefix, parameters('env_Type'), parameters('env_Instance'), 'sa')))]",
                "[concat('Microsoft.Storage/storageAccounts/', toLower(concat(variables('v_StorageAccountName'), variables('v_StorageAccounts')[parameters('env_Type')][2].Prefix, parameters('env_Type'), parameters('env_Instance'), 'sa')))]"
            ],
            "properties": {
                "availabilitySet": {
                    "id": "[resourceId('Microsoft.Compute/availabilitySets', toLower(concat(variables('v_EnvironmentPrefix'), '-', parameters('env_Type'), parameters('env_Instance'), '-', variables('v_ServerRoles')[3].Name, '-as')))]"
                },
                "hardwareProfile": {
                    "vmSize": "[variables('v_ServerRoles')[3].vmSize[parameters('env_Type')]]"
                },
                "osProfile": {
                    "computerName": "[toLower(concat(variables('v_EnvironmentPrefix'), '-', parameters('env_Type'), parameters('env_Instance'), '-', variables('v_ServerRoles')[3].Name, copyindex(), '-vm'))]",
                    "adminUsername": "[variables('v_Username')]",
                    "adminPassword": "[variables('v_Password')]"
                },
                "storageProfile": {
                    "imageReference": {
                        "publisher": "[variables('v_ServerRoles')[3].imagePublisher]",
                        "offer": "[variables('v_ServerRoles')[3].imageOffer]",
                        "sku": "[variables('v_ServerRoles')[3].imageSKU]",
                        "version": "latest"
                    },
                    "osDisk": {
                        "name": "[toLower(concat(variables('v_EnvironmentPrefix'), '-', parameters('env_Type'), parameters('env_Instance'), '-', variables('v_ServerRoles')[3].Name, copyindex(), '-osdisk'))]",
                        "vhd": {
                            "uri": "[concat('http://', toLower(concat(variables('v_StorageAccountName'), variables('v_StorageAccounts')[parameters('env_Type')][0].Prefix, parameters('env_Type'), parameters('env_Instance'), 'sa')), '.blob.core.windows.net/vhds/', toLower(concat(variables('v_EnvironmentPrefix'), '-', parameters('env_Type'), parameters('env_Instance'), '-', variables('v_ServerRoles')[3].Name, copyindex(), '-osdisk')), '.vhd')]"
                        },
                        "caching": "ReadWrite",
                        "createOption": "FromImage"
                    }
                },
                "networkProfile": {
                    "networkInterfaces": [
                        {
                            "id": "[resourceId('Microsoft.Network/networkInterfaces', toLower(concat(variables('v_EnvironmentPrefix'), '-', parameters('env_Type'), parameters('env_Instance'), '-', variables('v_ServerRoles')[3].Name, copyindex(), '-nic')))]"
                        }
                    ]
                },
                "diagnosticsProfile": {
                    "bootDiagnostics": {
                        "enabled": true,
                        "storageUri": "[concat('http://', toLower(concat(variables('v_StorageAccountName'), variables('v_StorageAccounts')[parameters('env_Type')][2].Prefix, parameters('env_Type'), parameters('env_Instance'), 'sa')), '.blob.core.windows.net')]"
                    }
                }
            },
            "resources": [
                {
                    "type":"extensions",
                    "name":"LinuxDiagnostic",
                    "apiVersion":"2015-06-15",
                    "location":"[resourceGroup().location]",
                    "dependsOn":[
                        "[concat('Microsoft.Network/connections/', toLower(concat(variables('v_EnvironmentPrefix'), '-', parameters('env_Type'), parameters('env_Instance'), '-erc')))]",
                        "[concat('Microsoft.Compute/virtualMachines/', toLower(concat(variables('v_EnvironmentPrefix'), '-', parameters('env_Type'), parameters('env_Instance'), '-', variables('v_ServerRoles')[3].Name, copyindex(), '-vm')))]"                    
                    ],
                    "properties":{
                        "publisher":"Microsoft.OSTCExtensions",
                        "type":"LinuxDiagnostic",
                        "typeHandlerVersion":"2.2",
                        "settings":{
                            "xmlCfg": "[base64(concat(variables('wadCfgStart'), variables('wadCfgMemoryPerfCounter'), variables('wadCfgProcessorPerfCounter'), variables('wadCfgDiskPerfCounter'), variables('wadCfgNetworkPerfCounter'), variables('wadCfgResources'), toLower(concat(variables('v_EnvironmentPrefix'), '-', parameters('env_Type'), parameters('env_Instance'), '-', variables('v_ServerRoles')[3].Name, copyindex(), '-vm')), '\">', variables('wadCfgMetrics'), variables('wadCfgEnd')))]",
                            "StorageAccount": "[toLower(concat(variables('v_StorageAccountName'), variables('v_StorageAccounts')[parameters('env_Type')][2].Prefix, parameters('env_Type'), parameters('env_Instance'), 'sa'))]"
                        },
                        "protectedSettings":{
                            "storageAccountName": "[toLower(concat(variables('v_StorageAccountName'), variables('v_StorageAccounts')[parameters('env_Type')][2].Prefix, parameters('env_Type'), parameters('env_Instance'), 'sa'))]",
                            "storageAccountKey": "[listkeys(concat('/subscriptions/', subscription().subscriptionId, '/resourceGroups/', resourceGroup().name, '/providers/','Microsoft.Storage/storageAccounts/', toLower(concat(variables('v_StorageAccountName'), variables('v_StorageAccounts')[parameters('env_Type')][2].Prefix, parameters('env_Type'), parameters('env_Instance'), 'sa'))), '2015-06-15').key1]",
                            "storageAccountEndPoint":"https://core.windows.net/"
                        }
                    }
                }
            ],
            "tags": {
                "Name": "[toLower(concat(variables('v_EnvironmentPrefix'), '-', parameters('env_Type'), parameters('env_Instance'), '-', variables('v_ServerRoles')[3].Name, copyindex(), '-vm'))]",
                "env_Brand": "[toLower(parameters('env_Brand'))]",
                "env_Description": "[toLower(parameters('env_Description'))]",
                "env_Type": "[toLower(parameters('env_Type'))]",
                "env_Instance": "[toLower(string(parameters('env_Instance')))]",
                "env_Owner": "[toLower(parameters('env_Owner'))]",
                "env_Location": "[resourceGroup().location]",
                "env_TemplateCreator": "[toLower(variables('v_TemplateCreator'))]",
                "env_TemplateVersion": "[toLower(variables('v_TemplateVersion'))]"
            }
        },
        {
            "type": "Microsoft.Network/loadBalancers",
            "comments": "Search Load Balancer",
            "name": "[toLower(concat(variables('v_EnvironmentPrefix'), '-', parameters('env_Type'), parameters('env_Instance'), '-', variables('v_LoadBalancerRoles')[2].Name, '-lb'))]",
            "apiVersion": "2015-06-15",
            "location": "[resourceGroup().location]",
            "dependsOn": [
                "[concat('Microsoft.Network/virtualNetworks/', toLower(concat(variables('v_EnvironmentPrefix'), '-', parameters('env_Type'), parameters('env_Instance'), '-vnet')))]"
            ],
            "properties": {
                "frontendIPConfigurations": [
                    {
                        "name": "loadBalancerFrontEnd",
                        "properties": {
                            "subnet": {
                                "id": "[concat(resourceId('Microsoft.Network/virtualNetworks', toLower(concat(variables('v_EnvironmentPrefix'), '-', parameters('env_Type'), parameters('env_Instance'), '-vnet'))), '/subnets/', variables('v_Subnets')[2].Name)]"
                            }
                        }
                    }
                ],
                "backendAddressPools": [
                    {
                        "name": "loadBalancerBackEnd"
                    }
                ],
                "loadBalancingRules": [
                    {
                        "name": "lbrule",
                        "properties": {
                            "frontendIPConfiguration": {
                                "id": "[concat(resourceId('Microsoft.Network/loadBalancers', toLower(concat(variables('v_EnvironmentPrefix'), '-', parameters('env_Type'), parameters('env_Instance'), '-', variables('v_LoadBalancerRoles')[2].Name, '-lb'))), '/frontendIpConfigurations/loadBalancerFrontEnd')]"
                            },
                            "backendAddressPool": {
                                "id": "[concat(resourceId('Microsoft.Network/loadBalancers', toLower(concat(variables('v_EnvironmentPrefix'), '-', parameters('env_Type'), parameters('env_Instance'), '-', variables('v_LoadBalancerRoles')[2].Name, '-lb'))), '/backendAddressPools/loadBalancerBackEnd')]"
                            },
                            "probe": {
                                "id": "[concat(resourceId('Microsoft.Network/loadBalancers', toLower(concat(variables('v_EnvironmentPrefix'), '-', parameters('env_Type'), parameters('env_Instance'), '-', variables('v_LoadBalancerRoles')[2].Name, '-lb'))), '/probes/lbprobe')]"
                            },
                            "protocol": "Tcp",
                            "frontendPort": 80,
                            "backendPort": 80,
                            "idleTimeoutInMinutes": 15
                        }
                    }
                ],
                "probes": [
                    {
                        "name": "lbprobe",
                        "properties": {
                            "protocol": "Tcp",
                            "port": 80,
                            "intervalInSeconds": 15,
                            "numberOfProbes": 2
                        }
                    }
                ]
            },
            "tags": {
                "Name": "[toLower(concat(variables('v_EnvironmentPrefix'), '-', parameters('env_Type'), parameters('env_Instance'), '-', variables('v_LoadBalancerRoles')[2].Name, '-lb'))]",
                "env_Brand": "[toLower(parameters('env_Brand'))]",
                "env_Description": "[toLower(parameters('env_Description'))]",
                "env_Type": "[toLower(parameters('env_Type'))]",
                "env_Instance": "[toLower(string(parameters('env_Instance')))]",
                "env_Owner": "[toLower(parameters('env_Owner'))]",
                "env_Location": "[resourceGroup().location]",
                "env_TemplateCreator": "[toLower(variables('v_TemplateCreator'))]",
                "env_TemplateVersion": "[toLower(variables('v_TemplateVersion'))]"
            }
        },
        {
            "type": "Microsoft.Network/networkInterfaces",
            "comments": "Search Slave Server NICs",
            "name": "[toLower(concat(variables('v_EnvironmentPrefix'), '-', parameters('env_Type'), parameters('env_Instance'), '-', variables('v_ServerRoles')[4].Name, copyindex(), '-nic'))]",
            "apiVersion": "2015-06-15",
            "location": "[resourceGroup().location]",
            "copy": {
                "name": "[toLower(concat('vm', variables('v_ServerRoles')[4].Name, 'NicLoop'))]",
                "count": "[variables('v_ServerRoles')[4].vmCount[parameters('env_Type')].max]"
            },
            "dependsOn": [
                "[concat('Microsoft.Network/virtualNetworks/', toLower(concat(variables('v_EnvironmentPrefix'), '-', parameters('env_Type'), parameters('env_Instance'), '-vnet')))]",
                "[concat('Microsoft.Network/loadBalancers/', toLower(concat(variables('v_EnvironmentPrefix'), '-', parameters('env_Type'), parameters('env_Instance'), '-', variables('v_LoadBalancerRoles')[2].Name, '-lb')))]"
            ],
            "properties": {
                "ipConfigurations": [
                    {
                        "name": "ipconfig1",
                        "properties": {
                            "privateIPAllocationMethod": "Dynamic",
                            "subnet": {
                                "id": "[concat(resourceId('Microsoft.Network/virtualNetworks', toLower(concat(variables('v_EnvironmentPrefix'), '-', parameters('env_Type'), parameters('env_Instance'), '-vnet'))), '/subnets/', variables('v_Subnets')[2].Name)]"
                            },
                            "loadBalancerBackendAddressPools": [
                                {
                                    "id": "[concat(resourceId('Microsoft.Network/loadBalancers', toLower(concat(variables('v_EnvironmentPrefix'), '-', parameters('env_Type'), parameters('env_Instance'), '-', variables('v_LoadBalancerRoles')[2].Name, '-lb'))),'/backendAddressPools/loadBalancerBackEnd')]"
                                }
                            ]
                        }
                    }
                ]
            },
            "tags": {
                "Name": "[toLower(concat(variables('v_EnvironmentPrefix'), '-', parameters('env_Type'), parameters('env_Instance'), '-', variables('v_ServerRoles')[4].Name, copyindex(), '-nic'))]",
                "env_Brand": "[toLower(parameters('env_Brand'))]",
                "env_Description": "[toLower(parameters('env_Description'))]",
                "env_Type": "[toLower(parameters('env_Type'))]",
                "env_Instance": "[toLower(string(parameters('env_Instance')))]",
                "env_Owner": "[toLower(parameters('env_Owner'))]",
                "env_Location": "[resourceGroup().location]",
                "env_TemplateCreator": "[toLower(variables('v_TemplateCreator'))]",
                "env_TemplateVersion": "[toLower(variables('v_TemplateVersion'))]"
            }
        },
        {
            "type": "Microsoft.Compute/virtualMachines",
            "comments": "Search Slave Virtual Machines",
            "name": "[toLower(concat(variables('v_EnvironmentPrefix'), '-', parameters('env_Type'), parameters('env_Instance'), '-', variables('v_ServerRoles')[4].Name, copyindex(), '-vm'))]",
            "apiVersion": "2015-06-15",
            "location": "[resourceGroup().location]",
            "copy": {
                "name": "[toLower(concat('vm', variables('v_ServerRoles')[4].Name, 'Loop'))]",
                "count": "[variables('v_ServerRoles')[4].vmCount[parameters('env_Type')].max]"
            },
            "dependsOn": [
                "[concat('Microsoft.Network/networkInterfaces/', toLower(concat(variables('v_EnvironmentPrefix'), '-', parameters('env_Type'), parameters('env_Instance'), '-', variables('v_ServerRoles')[4].Name, copyindex(), '-nic')))]",
                "[concat('Microsoft.Storage/storageAccounts/', toLower(concat(variables('v_StorageAccountName'), variables('v_StorageAccounts')[parameters('env_Type')][0].Prefix, parameters('env_Type'), parameters('env_Instance'), 'sa')))]",
                "[concat('Microsoft.Storage/storageAccounts/', toLower(concat(variables('v_StorageAccountName'), variables('v_StorageAccounts')[parameters('env_Type')][2].Prefix, parameters('env_Type'), parameters('env_Instance'), 'sa')))]"
            ],
            "properties": {
                "availabilitySet": {
                    "id": "[resourceId('Microsoft.Compute/availabilitySets', toLower(concat(variables('v_EnvironmentPrefix'), '-', parameters('env_Type'), parameters('env_Instance'), '-', variables('v_ServerRoles')[4].Name, '-as')))]"
                },
                "hardwareProfile": {
                    "vmSize": "[variables('v_ServerRoles')[4].vmSize[parameters('env_Type')]]"
                },
                "osProfile": {
                    "computerName": "[toLower(concat(variables('v_EnvironmentPrefix'), '-', parameters('env_Type'), parameters('env_Instance'), '-', variables('v_ServerRoles')[4].Name, copyindex(), '-vm'))]",
                    "adminUsername": "[variables('v_Username')]",
                    "adminPassword": "[variables('v_Password')]"
                },
                "storageProfile": {
                    "imageReference": {
                        "publisher": "[variables('v_ServerRoles')[4].imagePublisher]",
                        "offer": "[variables('v_ServerRoles')[4].imageOffer]",
                        "sku": "[variables('v_ServerRoles')[4].imageSKU]",
                        "version": "latest"
                    },
                    "osDisk": {
                        "name": "[toLower(concat(variables('v_EnvironmentPrefix'), '-', parameters('env_Type'), parameters('env_Instance'), '-', variables('v_ServerRoles')[4].Name, copyindex(), '-osdisk'))]",
                        "vhd": {
                            "uri": "[concat('http://', toLower(concat(variables('v_StorageAccountName'), variables('v_StorageAccounts')[parameters('env_Type')][0].Prefix, parameters('env_Type'), parameters('env_Instance'), 'sa')), '.blob.core.windows.net/vhds/', toLower(concat(variables('v_EnvironmentPrefix'), '-', parameters('env_Type'), parameters('env_Instance'), '-', variables('v_ServerRoles')[4].Name, copyindex(), '-osdisk')), '.vhd')]"
                        },
                        "caching": "ReadWrite",
                        "createOption": "FromImage"
                    }
                },
                "networkProfile": {
                    "networkInterfaces": [
                        {
                            "id": "[resourceId('Microsoft.Network/networkInterfaces', toLower(concat(variables('v_EnvironmentPrefix'), '-', parameters('env_Type'), parameters('env_Instance'), '-', variables('v_ServerRoles')[4].Name, copyindex(), '-nic')))]"
                        }
                    ]
                },
                "diagnosticsProfile": {
                    "bootDiagnostics": {
                        "enabled": true,
                        "storageUri": "[concat('http://', toLower(concat(variables('v_StorageAccountName'), variables('v_StorageAccounts')[parameters('env_Type')][2].Prefix, parameters('env_Type'), parameters('env_Instance'), 'sa')), '.blob.core.windows.net')]"
                    }
                }
            },
            "resources": [
                {
                    "type":"extensions",
                    "name":"LinuxDiagnostic",
                    "apiVersion":"2015-06-15",
                    "location":"[resourceGroup().location]",
                    "dependsOn":[
                        "[concat('Microsoft.Network/connections/', toLower(concat(variables('v_EnvironmentPrefix'), '-', parameters('env_Type'), parameters('env_Instance'), '-erc')))]",
                        "[concat('Microsoft.Compute/virtualMachines/', toLower(concat(variables('v_EnvironmentPrefix'), '-', parameters('env_Type'), parameters('env_Instance'), '-', variables('v_ServerRoles')[4].Name, copyindex(), '-vm')))]"                    
                    ],
                    "properties":{
                        "publisher":"Microsoft.OSTCExtensions",
                        "type":"LinuxDiagnostic",
                        "typeHandlerVersion":"2.2",
                        "settings":{
                            "xmlCfg": "[base64(concat(variables('wadCfgStart'), variables('wadCfgMemoryPerfCounter'), variables('wadCfgProcessorPerfCounter'), variables('wadCfgDiskPerfCounter'), variables('wadCfgNetworkPerfCounter'), variables('wadCfgResources'), toLower(concat(variables('v_EnvironmentPrefix'), '-', parameters('env_Type'), parameters('env_Instance'), '-', variables('v_ServerRoles')[4].Name, copyindex(), '-vm')), '\">', variables('wadCfgMetrics'), variables('wadCfgEnd')))]",
                            "StorageAccount": "[toLower(concat(variables('v_StorageAccountName'), variables('v_StorageAccounts')[parameters('env_Type')][2].Prefix, parameters('env_Type'), parameters('env_Instance'), 'sa'))]"
                        },
                        "protectedSettings":{
                            "storageAccountName": "[toLower(concat(variables('v_StorageAccountName'), variables('v_StorageAccounts')[parameters('env_Type')][2].Prefix, parameters('env_Type'), parameters('env_Instance'), 'sa'))]",
                            "storageAccountKey": "[listkeys(concat('/subscriptions/', subscription().subscriptionId, '/resourceGroups/', resourceGroup().name, '/providers/','Microsoft.Storage/storageAccounts/', toLower(concat(variables('v_StorageAccountName'), variables('v_StorageAccounts')[parameters('env_Type')][2].Prefix, parameters('env_Type'), parameters('env_Instance'), 'sa'))), '2015-06-15').key1]",
                            "storageAccountEndPoint":"https://core.windows.net/"
                        }
                    }
                }
            ],
            "tags": {
                "Name": "[toLower(concat(variables('v_EnvironmentPrefix'), '-', parameters('env_Type'), parameters('env_Instance'), '-', variables('v_ServerRoles')[4].Name, copyindex(), '-vm'))]",
                "env_Brand": "[toLower(parameters('env_Brand'))]",
                "env_Description": "[toLower(parameters('env_Description'))]",
                "env_Type": "[toLower(parameters('env_Type'))]",
                "env_Instance": "[toLower(string(parameters('env_Instance')))]",
                "env_Owner": "[toLower(parameters('env_Owner'))]",
                "env_Location": "[resourceGroup().location]",
                "env_TemplateCreator": "[toLower(variables('v_TemplateCreator'))]",
                "env_TemplateVersion": "[toLower(variables('v_TemplateVersion'))]"
            }
        },
        {
            "type": "Microsoft.Network/networkInterfaces",
            "comments": "File Server NICs",
            "name": "[toLower(concat(variables('v_EnvironmentPrefix'), '-', parameters('env_Type'), parameters('env_Instance'), '-', variables('v_ServerRoles')[5].Name, copyindex(), '-nic'))]",
            "apiVersion": "2015-06-15",
            "location": "[resourceGroup().location]",
            "copy": {
                "name": "[toLower(concat('vm', variables('v_ServerRoles')[5].Name, 'NicLoop'))]",
                "count": "[variables('v_ServerRoles')[5].vmCount[parameters('env_Type')].max]"
            },
            "dependsOn": [
                "[concat('Microsoft.Network/virtualNetworks/', toLower(concat(variables('v_EnvironmentPrefix'), '-', parameters('env_Type'), parameters('env_Instance'), '-vnet')))]"
            ],
            "properties": {
                "ipConfigurations": [
                    {
                        "name": "ipconfig1",
                        "properties": {
                            "privateIPAllocationMethod": "Dynamic",
                            "subnet": {
                                "id": "[concat(resourceId('Microsoft.Network/virtualNetworks', toLower(concat(variables('v_EnvironmentPrefix'), '-', parameters('env_Type'), parameters('env_Instance'), '-vnet'))), '/subnets/', variables('v_Subnets')[6].Name)]"
                            }
                        }
                    }
                ]
            },
            "tags": {
                "Name": "[toLower(concat(variables('v_EnvironmentPrefix'), '-', parameters('env_Type'), parameters('env_Instance'), '-', variables('v_ServerRoles')[5].Name, copyindex(), '-nic'))]",
                "env_Brand": "[toLower(parameters('env_Brand'))]",
                "env_Description": "[toLower(parameters('env_Description'))]",
                "env_Type": "[toLower(parameters('env_Type'))]",
                "env_Instance": "[toLower(string(parameters('env_Instance')))]",
                "env_Owner": "[toLower(parameters('env_Owner'))]",
                "env_Location": "[resourceGroup().location]",
                "env_TemplateCreator": "[toLower(variables('v_TemplateCreator'))]",
                "env_TemplateVersion": "[toLower(variables('v_TemplateVersion'))]"
            }
        },
        {
            "type": "Microsoft.Compute/virtualMachines",
            "comments": "File Virtual Machines",
            "name": "[toLower(concat(variables('v_EnvironmentPrefix'), '-', parameters('env_Type'), parameters('env_Instance'), '-', variables('v_ServerRoles')[5].Name, copyindex(), '-vm'))]",
            "apiVersion": "2015-06-15",
            "location": "[resourceGroup().location]",
            "copy": {
                "name": "[toLower(concat('vm', variables('v_ServerRoles')[5].Name, 'Loop'))]",
                "count": "[variables('v_ServerRoles')[5].vmCount[parameters('env_Type')].max]"
            },
            "dependsOn": [
                "[concat('Microsoft.Network/networkInterfaces/', toLower(concat(variables('v_EnvironmentPrefix'), '-', parameters('env_Type'), parameters('env_Instance'), '-', variables('v_ServerRoles')[5].Name, copyindex(), '-nic')))]",
                "[concat('Microsoft.Storage/storageAccounts/', toLower(concat(variables('v_StorageAccountName'), variables('v_StorageAccounts')[parameters('env_Type')][0].Prefix, parameters('env_Type'), parameters('env_Instance'), 'sa')))]",
                "[concat('Microsoft.Storage/storageAccounts/', toLower(concat(variables('v_StorageAccountName'), variables('v_StorageAccounts')[parameters('env_Type')][1].Prefix, parameters('env_Type'), parameters('env_Instance'), 'sa')))]",
                "[concat('Microsoft.Storage/storageAccounts/', toLower(concat(variables('v_StorageAccountName'), variables('v_StorageAccounts')[parameters('env_Type')][2].Prefix, parameters('env_Type'), parameters('env_Instance'), 'sa')))]"
            ],
            "properties": {
                "availabilitySet": {
                    "id": "[resourceId('Microsoft.Compute/availabilitySets', toLower(concat(variables('v_EnvironmentPrefix'), '-', parameters('env_Type'), parameters('env_Instance'), '-', variables('v_ServerRoles')[5].Name, '-as')))]"
                },
                "hardwareProfile": {
                    "vmSize": "[variables('v_ServerRoles')[5].vmSize[parameters('env_Type')]]"
                },
                "osProfile": {
                    "computerName": "[toLower(concat(variables('v_EnvironmentPrefix'), '-', parameters('env_Type'), parameters('env_Instance'), '-', variables('v_ServerRoles')[5].Name, copyindex(), '-vm'))]",
                    "adminUsername": "[variables('v_Username')]",
                    "adminPassword": "[variables('v_Password')]"
                },
                "storageProfile": {
                    "imageReference": {
                        "publisher": "[variables('v_ServerRoles')[5].imagePublisher]",
                        "offer": "[variables('v_ServerRoles')[5].imageOffer]",
                        "sku": "[variables('v_ServerRoles')[5].imageSKU]",
                        "version": "latest"
                    },
                    "osDisk": {
                        "name": "[toLower(concat(variables('v_EnvironmentPrefix'), '-', parameters('env_Type'), parameters('env_Instance'), '-', variables('v_ServerRoles')[5].Name, copyindex(), '-osdisk'))]",
                        "vhd": {
                            "uri": "[concat('http://', toLower(concat(variables('v_StorageAccountName'), variables('v_StorageAccounts')[parameters('env_Type')][0].Prefix, parameters('env_Type'), parameters('env_Instance'), 'sa')), '.blob.core.windows.net/vhds/', toLower(concat(variables('v_EnvironmentPrefix'), '-', parameters('env_Type'), parameters('env_Instance'), '-', variables('v_ServerRoles')[5].Name, copyindex(), '-osdisk')), '.vhd')]"
                        },
                        "caching": "ReadWrite",
                        "createOption": "FromImage"
                    }
                },
                "networkProfile": {
                    "networkInterfaces": [
                        {
                            "id": "[resourceId('Microsoft.Network/networkInterfaces', toLower(concat(variables('v_EnvironmentPrefix'), '-', parameters('env_Type'), parameters('env_Instance'), '-', variables('v_ServerRoles')[5].Name, copyindex(), '-nic')))]"
                        }
                    ]
                },
                "diagnosticsProfile": {
                    "bootDiagnostics": {
                        "enabled": true,
                        "storageUri": "[concat('http://', toLower(concat(variables('v_StorageAccountName'), variables('v_StorageAccounts')[parameters('env_Type')][2].Prefix, parameters('env_Type'), parameters('env_Instance'), 'sa')), '.blob.core.windows.net')]"
                    }
                }
            },
            "resources": [
                {
                    "type":"extensions",
                    "name":"LinuxDiagnostic",
                    "apiVersion":"2015-06-15",
                    "location":"[resourceGroup().location]",
                    "dependsOn":[
                        "[concat('Microsoft.Network/connections/', toLower(concat(variables('v_EnvironmentPrefix'), '-', parameters('env_Type'), parameters('env_Instance'), '-erc')))]",
                        "[concat('Microsoft.Compute/virtualMachines/', toLower(concat(variables('v_EnvironmentPrefix'), '-', parameters('env_Type'), parameters('env_Instance'), '-', variables('v_ServerRoles')[5].Name, copyindex(), '-vm')))]"                    
                    ],
                    "properties":{
                        "publisher":"Microsoft.OSTCExtensions",
                        "type":"LinuxDiagnostic",
                        "typeHandlerVersion":"2.2",
                        "settings":{
                            "xmlCfg": "[base64(concat(variables('wadCfgStart'), variables('wadCfgMemoryPerfCounter'), variables('wadCfgProcessorPerfCounter'), variables('wadCfgDiskPerfCounter'), variables('wadCfgNetworkPerfCounter'), variables('wadCfgResources'), toLower(concat(variables('v_EnvironmentPrefix'), '-', parameters('env_Type'), parameters('env_Instance'), '-', variables('v_ServerRoles')[5].Name, copyindex(), '-vm')), '\">', variables('wadCfgMetrics'), variables('wadCfgEnd')))]",
                            "StorageAccount": "[toLower(concat(variables('v_StorageAccountName'), variables('v_StorageAccounts')[parameters('env_Type')][2].Prefix, parameters('env_Type'), parameters('env_Instance'), 'sa'))]"
                        },
                        "protectedSettings":{
                            "storageAccountName": "[toLower(concat(variables('v_StorageAccountName'), variables('v_StorageAccounts')[parameters('env_Type')][2].Prefix, parameters('env_Type'), parameters('env_Instance'), 'sa'))]",
                            "storageAccountKey": "[listkeys(concat('/subscriptions/', subscription().subscriptionId, '/resourceGroups/', resourceGroup().name, '/providers/','Microsoft.Storage/storageAccounts/', toLower(concat(variables('v_StorageAccountName'), variables('v_StorageAccounts')[parameters('env_Type')][2].Prefix, parameters('env_Type'), parameters('env_Instance'), 'sa'))), '2015-06-15').key1]",
                            "storageAccountEndPoint":"https://core.windows.net/"
                        }
                    }
                }
            ],
            "tags": {
                "Name": "[toLower(concat(variables('v_EnvironmentPrefix'), '-', parameters('env_Type'), parameters('env_Instance'), '-', variables('v_ServerRoles')[5].Name, copyindex(), '-vm'))]",
                "env_Brand": "[toLower(parameters('env_Brand'))]",
                "env_Description": "[toLower(parameters('env_Description'))]",
                "env_Type": "[toLower(parameters('env_Type'))]",
                "env_Instance": "[toLower(string(parameters('env_Instance')))]",
                "env_Owner": "[toLower(parameters('env_Owner'))]",
                "env_Location": "[resourceGroup().location]",
                "env_TemplateCreator": "[toLower(variables('v_TemplateCreator'))]",
                "env_TemplateVersion": "[toLower(variables('v_TemplateVersion'))]"
            }
        },
        {
            "type": "Microsoft.Network/networkInterfaces",
            "comments": "Database Server NICs",
            "name": "[toLower(concat(variables('v_EnvironmentPrefix'), '-', parameters('env_Type'), parameters('env_Instance'), '-', variables('v_ServerRoles')[6].Name, copyindex(), '-nic'))]",
            "apiVersion": "2015-06-15",
            "location": "[resourceGroup().location]",
            "copy": {
                "name": "[toLower(concat('vm', variables('v_ServerRoles')[6].Name, 'NicLoop'))]",
                "count": "[variables('v_ServerRoles')[6].vmCount[parameters('env_Type')].max]"
            },
            "dependsOn": [
                "[concat('Microsoft.Network/virtualNetworks/', toLower(concat(variables('v_EnvironmentPrefix'), '-', parameters('env_Type'), parameters('env_Instance'), '-vnet')))]"
            ],
            "properties": {
                "ipConfigurations": [
                    {
                        "name": "ipconfig1",
                        "properties": {
                            "privateIPAllocationMethod": "Dynamic",
                            "subnet": {
                                "id": "[concat(resourceId('Microsoft.Network/virtualNetworks', toLower(concat(variables('v_EnvironmentPrefix'), '-', parameters('env_Type'), parameters('env_Instance'), '-vnet'))), '/subnets/', variables('v_Subnets')[7].Name)]"
                            }
                        }
                    }
                ]
            },
            "tags": {
                "Name": "[toLower(concat(variables('v_EnvironmentPrefix'), '-', parameters('env_Type'), parameters('env_Instance'), '-', variables('v_ServerRoles')[6].Name, copyindex(), '-nic'))]",
                "env_Brand": "[toLower(parameters('env_Brand'))]",
                "env_Description": "[toLower(parameters('env_Description'))]",
                "env_Type": "[toLower(parameters('env_Type'))]",
                "env_Instance": "[toLower(string(parameters('env_Instance')))]",
                "env_Owner": "[toLower(parameters('env_Owner'))]",
                "env_Location": "[resourceGroup().location]",
                "env_TemplateCreator": "[toLower(variables('v_TemplateCreator'))]",
                "env_TemplateVersion": "[toLower(variables('v_TemplateVersion'))]"
            }
        },
        {
            "type": "Microsoft.Compute/virtualMachines",
            "comments": "Database Virtual Machines",
            "name": "[toLower(concat(variables('v_EnvironmentPrefix'), '-', parameters('env_Type'), parameters('env_Instance'), '-', variables('v_ServerRoles')[6].Name, copyindex(), '-vm'))]",
            "apiVersion": "2015-06-15",
            "location": "[resourceGroup().location]",
            "copy": {
                "name": "[toLower(concat('vm', variables('v_ServerRoles')[6].Name, 'Loop'))]",
                "count": "[variables('v_ServerRoles')[6].vmCount[parameters('env_Type')].max]"
            },
            "dependsOn": [
                "[concat('Microsoft.Network/networkInterfaces/', toLower(concat(variables('v_EnvironmentPrefix'), '-', parameters('env_Type'), parameters('env_Instance'), '-', variables('v_ServerRoles')[6].Name, copyindex(), '-nic')))]",
                "[concat('Microsoft.Storage/storageAccounts/', toLower(concat(variables('v_StorageAccountName'), variables('v_StorageAccounts')[parameters('env_Type')][0].Prefix, parameters('env_Type'), parameters('env_Instance'), 'sa')))]",
                "[concat('Microsoft.Storage/storageAccounts/', toLower(concat(variables('v_StorageAccountName'), variables('v_StorageAccounts')[parameters('env_Type')][1].Prefix, parameters('env_Type'), parameters('env_Instance'), 'sa')))]",
                "[concat('Microsoft.Storage/storageAccounts/', toLower(concat(variables('v_StorageAccountName'), variables('v_StorageAccounts')[parameters('env_Type')][2].Prefix, parameters('env_Type'), parameters('env_Instance'), 'sa')))]"
            ],
            "properties": {
                "availabilitySet": {
                    "id": "[resourceId('Microsoft.Compute/availabilitySets', toLower(concat(variables('v_EnvironmentPrefix'), '-', parameters('env_Type'), parameters('env_Instance'), '-', variables('v_ServerRoles')[6].Name, '-as')))]"
                },
                "hardwareProfile": {
                    "vmSize": "[variables('v_ServerRoles')[6].vmSize[parameters('env_Type')]]"
                },
                "osProfile": {
                    "computerName": "[toLower(concat(variables('v_EnvironmentPrefix'), '-', parameters('env_Type'), parameters('env_Instance'), '-', variables('v_ServerRoles')[6].Name, copyindex(), '-vm'))]",
                    "adminUsername": "[variables('v_Username')]",
                    "adminPassword": "[variables('v_Password')]"
                },
                "storageProfile": {
                    "imageReference": {
                        "publisher": "[variables('v_ServerRoles')[6].imagePublisher]",
                        "offer": "[variables('v_ServerRoles')[6].imageOffer]",
                        "sku": "[variables('v_ServerRoles')[6].imageSKU]",
                        "version": "latest"
                    },
                    "osDisk": {
                        "name": "[toLower(concat(variables('v_EnvironmentPrefix'), '-', parameters('env_Type'), parameters('env_Instance'), '-', variables('v_ServerRoles')[6].Name, copyindex(), '-osdisk'))]",
                        "vhd": {
                            "uri": "[concat('http://', toLower(concat(variables('v_StorageAccountName'), variables('v_StorageAccounts')[parameters('env_Type')][0].Prefix, parameters('env_Type'), parameters('env_Instance'), 'sa')), '.blob.core.windows.net/vhds/', toLower(concat(variables('v_EnvironmentPrefix'), '-', parameters('env_Type'), parameters('env_Instance'), '-', variables('v_ServerRoles')[6].Name, copyindex(), '-osdisk')), '.vhd')]"
                        },
                        "caching": "ReadWrite",
                        "createOption": "FromImage"
                    }
                },
                "networkProfile": {
                    "networkInterfaces": [
                        {
                            "id": "[resourceId('Microsoft.Network/networkInterfaces', toLower(concat(variables('v_EnvironmentPrefix'), '-', parameters('env_Type'), parameters('env_Instance'), '-', variables('v_ServerRoles')[6].Name, copyindex(), '-nic')))]"
                        }
                    ]
                },
                "diagnosticsProfile": {
                    "bootDiagnostics": {
                        "enabled": true,
                        "storageUri": "[concat('http://', toLower(concat(variables('v_StorageAccountName'), variables('v_StorageAccounts')[parameters('env_Type')][2].Prefix, parameters('env_Type'), parameters('env_Instance'), 'sa')), '.blob.core.windows.net')]"
                    }
                }
            },
            "resources": [
                {
                    "type":"extensions",
                    "name":"LinuxDiagnostic",
                    "apiVersion":"2015-06-15",
                    "location":"[resourceGroup().location]",
                    "dependsOn":[
                        "[concat('Microsoft.Network/connections/', toLower(concat(variables('v_EnvironmentPrefix'), '-', parameters('env_Type'), parameters('env_Instance'), '-erc')))]",
                        "[concat('Microsoft.Compute/virtualMachines/', toLower(concat(variables('v_EnvironmentPrefix'), '-', parameters('env_Type'), parameters('env_Instance'), '-', variables('v_ServerRoles')[6].Name, copyindex(), '-vm')))]"                    
                    ],
                    "properties":{
                        "publisher":"Microsoft.OSTCExtensions",
                        "type":"LinuxDiagnostic",
                        "typeHandlerVersion":"2.2",
                        "settings":{
                            "xmlCfg": "[base64(concat(variables('wadCfgStart'), variables('wadCfgMemoryPerfCounter'), variables('wadCfgProcessorPerfCounter'), variables('wadCfgDiskPerfCounter'), variables('wadCfgNetworkPerfCounter'), variables('wadCfgResources'), toLower(concat(variables('v_EnvironmentPrefix'), '-', parameters('env_Type'), parameters('env_Instance'), '-', variables('v_ServerRoles')[6].Name, copyindex(), '-vm')), '\">', variables('wadCfgMetrics'), variables('wadCfgEnd')))]",
                            "StorageAccount": "[toLower(concat(variables('v_StorageAccountName'), variables('v_StorageAccounts')[parameters('env_Type')][2].Prefix, parameters('env_Type'), parameters('env_Instance'), 'sa'))]"
                        },
                        "protectedSettings":{
                            "storageAccountName": "[toLower(concat(variables('v_StorageAccountName'), variables('v_StorageAccounts')[parameters('env_Type')][2].Prefix, parameters('env_Type'), parameters('env_Instance'), 'sa'))]",
                            "storageAccountKey": "[listkeys(concat('/subscriptions/', subscription().subscriptionId, '/resourceGroups/', resourceGroup().name, '/providers/','Microsoft.Storage/storageAccounts/', toLower(concat(variables('v_StorageAccountName'), variables('v_StorageAccounts')[parameters('env_Type')][2].Prefix, parameters('env_Type'), parameters('env_Instance'), 'sa'))), '2015-06-15').key1]",
                            "storageAccountEndPoint":"https://core.windows.net/"
                        }
                    }
                }
            ],
            "tags": {
                "Name": "[toLower(concat(variables('v_EnvironmentPrefix'), '-', parameters('env_Type'), parameters('env_Instance'), '-', variables('v_ServerRoles')[6].Name, copyindex(), '-vm'))]",
                "env_Brand": "[toLower(parameters('env_Brand'))]",
                "env_Description": "[toLower(parameters('env_Description'))]",
                "env_Type": "[toLower(parameters('env_Type'))]",
                "env_Instance": "[toLower(string(parameters('env_Instance')))]",
                "env_Owner": "[toLower(parameters('env_Owner'))]",
                "env_Location": "[resourceGroup().location]",
                "env_TemplateCreator": "[toLower(variables('v_TemplateCreator'))]",
                "env_TemplateVersion": "[toLower(variables('v_TemplateVersion'))]"
            }
        },
        {
            "type": "Microsoft.Network/networkInterfaces",
            "comments": "Cache Server NICs",
            "name": "[toLower(concat(variables('v_EnvironmentPrefix'), '-', parameters('env_Type'), parameters('env_Instance'), '-', variables('v_ServerRoles')[7].Name, copyindex(), '-nic'))]",
            "apiVersion": "2015-06-15",
            "location": "[resourceGroup().location]",
            "copy": {
                "name": "[toLower(concat('vm', variables('v_ServerRoles')[7].Name, 'NicLoop'))]",
                "count": "[variables('v_ServerRoles')[7].vmCount[parameters('env_Type')].max]"
            },
            "dependsOn": [
                "[concat('Microsoft.Network/virtualNetworks/', toLower(concat(variables('v_EnvironmentPrefix'), '-', parameters('env_Type'), parameters('env_Instance'), '-vnet')))]"
            ],
            "properties": {
                "ipConfigurations": [
                    {
                        "name": "ipconfig1",
                        "properties": {
                            "privateIPAllocationMethod": "Dynamic",
                            "subnet": {
                                "id": "[concat(resourceId('Microsoft.Network/virtualNetworks', toLower(concat(variables('v_EnvironmentPrefix'), '-', parameters('env_Type'), parameters('env_Instance'), '-vnet'))), '/subnets/', variables('v_Subnets')[3].Name)]"
                            }
                        }
                    }
                ]
            },
            "tags": {
                "Name": "[toLower(concat(variables('v_EnvironmentPrefix'), '-', parameters('env_Type'), parameters('env_Instance'), '-', variables('v_ServerRoles')[7].Name, copyindex(), '-nic'))]",
                "env_Brand": "[toLower(parameters('env_Brand'))]",
                "env_Description": "[toLower(parameters('env_Description'))]",
                "env_Type": "[toLower(parameters('env_Type'))]",
                "env_Instance": "[toLower(string(parameters('env_Instance')))]",
                "env_Owner": "[toLower(parameters('env_Owner'))]",
                "env_Location": "[resourceGroup().location]",
                "env_TemplateCreator": "[toLower(variables('v_TemplateCreator'))]",
                "env_TemplateVersion": "[toLower(variables('v_TemplateVersion'))]"
            }
        },
        {
            "type": "Microsoft.Compute/virtualMachines",
            "comments": "Cache Virtual Machines",
            "name": "[toLower(concat(variables('v_EnvironmentPrefix'), '-', parameters('env_Type'), parameters('env_Instance'), '-', variables('v_ServerRoles')[7].Name, copyindex(), '-vm'))]",
            "apiVersion": "2015-06-15",
            "location": "[resourceGroup().location]",
            "copy": {
                "name": "[toLower(concat('vm', variables('v_ServerRoles')[7].Name, 'Loop'))]",
                "count": "[variables('v_ServerRoles')[7].vmCount[parameters('env_Type')].max]"
            },
            "dependsOn": [
                "[concat('Microsoft.Network/networkInterfaces/', toLower(concat(variables('v_EnvironmentPrefix'), '-', parameters('env_Type'), parameters('env_Instance'), '-', variables('v_ServerRoles')[7].Name, copyindex(), '-nic')))]",
                "[concat('Microsoft.Storage/storageAccounts/', toLower(concat(variables('v_StorageAccountName'), variables('v_StorageAccounts')[parameters('env_Type')][0].Prefix, parameters('env_Type'), parameters('env_Instance'), 'sa')))]",
                "[concat('Microsoft.Storage/storageAccounts/', toLower(concat(variables('v_StorageAccountName'), variables('v_StorageAccounts')[parameters('env_Type')][2].Prefix, parameters('env_Type'), parameters('env_Instance'), 'sa')))]"    
            ],
            "properties": {
                "availabilitySet": {
                    "id": "[resourceId('Microsoft.Compute/availabilitySets', toLower(concat(variables('v_EnvironmentPrefix'), '-', parameters('env_Type'), parameters('env_Instance'), '-', variables('v_ServerRoles')[7].Name, '-as')))]"
                },
                "hardwareProfile": {
                    "vmSize": "[variables('v_ServerRoles')[7].vmSize[parameters('env_Type')]]"
                },
                "osProfile": {
                    "computerName": "[toLower(concat(variables('v_EnvironmentPrefix'), '-', parameters('env_Type'), parameters('env_Instance'), '-', variables('v_ServerRoles')[7].Name, copyindex(), '-vm'))]",
                    "adminUsername": "[variables('v_Username')]",
                    "adminPassword": "[variables('v_Password')]"
                },
                "storageProfile": {
                    "imageReference": {
                        "publisher": "[variables('v_ServerRoles')[7].imagePublisher]",
                        "offer": "[variables('v_ServerRoles')[7].imageOffer]",
                        "sku": "[variables('v_ServerRoles')[7].imageSKU]",
                        "version": "latest"
                    },
                    "osDisk": {
                        "name": "[toLower(concat(variables('v_EnvironmentPrefix'), '-', parameters('env_Type'), parameters('env_Instance'), '-', variables('v_ServerRoles')[7].Name, copyindex(), '-osdisk'))]",
                        "vhd": {
                            "uri": "[concat('http://', toLower(concat(variables('v_StorageAccountName'), variables('v_StorageAccounts')[parameters('env_Type')][0].Prefix, parameters('env_Type'), parameters('env_Instance'), 'sa')), '.blob.core.windows.net/vhds/', toLower(concat(variables('v_EnvironmentPrefix'), '-', parameters('env_Type'), parameters('env_Instance'), '-', variables('v_ServerRoles')[7].Name, copyindex(), '-osdisk')), '.vhd')]"
                        },
                        "caching": "ReadWrite",
                        "createOption": "FromImage"
                    }
                },
                "networkProfile": {
                    "networkInterfaces": [
                        {
                            "id": "[resourceId('Microsoft.Network/networkInterfaces', toLower(concat(variables('v_EnvironmentPrefix'), '-', parameters('env_Type'), parameters('env_Instance'), '-', variables('v_ServerRoles')[7].Name, copyindex(), '-nic')))]"
                        }
                    ]
                },
                "diagnosticsProfile": {
                    "bootDiagnostics": {
                        "enabled": true,
                        "storageUri": "[concat('http://', toLower(concat(variables('v_StorageAccountName'), variables('v_StorageAccounts')[parameters('env_Type')][2].Prefix, parameters('env_Type'), parameters('env_Instance'), 'sa')), '.blob.core.windows.net')]"
                    }
                }
            },
            "resources": [
                {
                    "type":"extensions",
                    "name":"LinuxDiagnostic",
                    "apiVersion":"2015-06-15",
                    "location":"[resourceGroup().location]",
                    "dependsOn":[
                        "[concat('Microsoft.Network/connections/', toLower(concat(variables('v_EnvironmentPrefix'), '-', parameters('env_Type'), parameters('env_Instance'), '-erc')))]",
                        "[concat('Microsoft.Compute/virtualMachines/', toLower(concat(variables('v_EnvironmentPrefix'), '-', parameters('env_Type'), parameters('env_Instance'), '-', variables('v_ServerRoles')[7].Name, copyindex(), '-vm')))]"                    
                    ],
                    "properties":{
                        "publisher":"Microsoft.OSTCExtensions",
                        "type":"LinuxDiagnostic",
                        "typeHandlerVersion":"2.2",
                        "settings":{
                            "xmlCfg": "[base64(concat(variables('wadCfgStart'), variables('wadCfgMemoryPerfCounter'), variables('wadCfgProcessorPerfCounter'), variables('wadCfgDiskPerfCounter'), variables('wadCfgNetworkPerfCounter'), variables('wadCfgResources'), toLower(concat(variables('v_EnvironmentPrefix'), '-', parameters('env_Type'), parameters('env_Instance'), '-', variables('v_ServerRoles')[7].Name, copyindex(), '-vm')), '\">', variables('wadCfgMetrics'), variables('wadCfgEnd')))]",
                            "StorageAccount": "[toLower(concat(variables('v_StorageAccountName'), variables('v_StorageAccounts')[parameters('env_Type')][2].Prefix, parameters('env_Type'), parameters('env_Instance'), 'sa'))]"
                        },
                        "protectedSettings":{
                            "storageAccountName": "[toLower(concat(variables('v_StorageAccountName'), variables('v_StorageAccounts')[parameters('env_Type')][2].Prefix, parameters('env_Type'), parameters('env_Instance'), 'sa'))]",
                            "storageAccountKey": "[listkeys(concat('/subscriptions/', subscription().subscriptionId, '/resourceGroups/', resourceGroup().name, '/providers/','Microsoft.Storage/storageAccounts/', toLower(concat(variables('v_StorageAccountName'), variables('v_StorageAccounts')[parameters('env_Type')][2].Prefix, parameters('env_Type'), parameters('env_Instance'), 'sa'))), '2015-06-15').key1]",
                            "storageAccountEndPoint":"https://core.windows.net/"
                        }
                    }
                }
            ],
            "tags": {
                "Name": "[toLower(concat(variables('v_EnvironmentPrefix'), '-', parameters('env_Type'), parameters('env_Instance'), '-', variables('v_ServerRoles')[7].Name, copyindex(), '-vm'))]",
                "env_Brand": "[toLower(parameters('env_Brand'))]",
                "env_Description": "[toLower(parameters('env_Description'))]",
                "env_Type": "[toLower(parameters('env_Type'))]",
                "env_Instance": "[toLower(string(parameters('env_Instance')))]",
                "env_Owner": "[toLower(parameters('env_Owner'))]",
                "env_Location": "[resourceGroup().location]",
                "env_TemplateCreator": "[toLower(variables('v_TemplateCreator'))]",
                "env_TemplateVersion": "[toLower(variables('v_TemplateVersion'))]"
            }
        },
        {
            "type": "Microsoft.Network/networkInterfaces",
            "comments": "Util Server NICs",
            "name": "[toLower(concat(variables('v_EnvironmentPrefix'), '-', parameters('env_Type'), parameters('env_Instance'), '-', variables('v_ServerRoles')[8].Name, copyindex(), '-nic'))]",
            "apiVersion": "2015-06-15",
            "location": "[resourceGroup().location]",
            "copy": {
                "name": "[toLower(concat('vm', variables('v_ServerRoles')[8].Name, 'NicLoop'))]",
                "count": "[variables('v_ServerRoles')[8].vmCount[parameters('env_Type')].max]"
            },
            "dependsOn": [
                "[concat('Microsoft.Network/virtualNetworks/', toLower(concat(variables('v_EnvironmentPrefix'), '-', parameters('env_Type'), parameters('env_Instance'), '-vnet')))]"
            ],
            "properties": {
                "ipConfigurations": [
                    {
                        "name": "ipconfig1",
                        "properties": {
                            "privateIPAllocationMethod": "Dynamic",
                            "subnet": {
                                "id": "[concat(resourceId('Microsoft.Network/virtualNetworks', toLower(concat(variables('v_EnvironmentPrefix'), '-', parameters('env_Type'), parameters('env_Instance'), '-vnet'))), '/subnets/', variables('v_Subnets')[8].Name)]"
                            }
                        }
                    }
                ]
            },
            "tags": {
                "Name": "[toLower(concat(variables('v_EnvironmentPrefix'), '-', parameters('env_Type'), parameters('env_Instance'), '-', variables('v_ServerRoles')[8].Name, copyindex(), '-nic'))]",
                "env_Brand": "[toLower(parameters('env_Brand'))]",
                "env_Description": "[toLower(parameters('env_Description'))]",
                "env_Type": "[toLower(parameters('env_Type'))]",
                "env_Instance": "[toLower(string(parameters('env_Instance')))]",
                "env_Owner": "[toLower(parameters('env_Owner'))]",
                "env_Location": "[resourceGroup().location]",
                "env_TemplateCreator": "[toLower(variables('v_TemplateCreator'))]",
                "env_TemplateVersion": "[toLower(variables('v_TemplateVersion'))]"
            }
        },
        {
            "type": "Microsoft.Compute/virtualMachines",
            "comments": "Util Virtual Machines",
            "name": "[toLower(concat(variables('v_EnvironmentPrefix'), '-', parameters('env_Type'), parameters('env_Instance'), '-', variables('v_ServerRoles')[8].Name, copyindex(), '-vm'))]",
            "apiVersion": "2015-06-15",
            "location": "[resourceGroup().location]",
            "copy": {
                "name": "[toLower(concat('vm', variables('v_ServerRoles')[8].Name, 'Loop'))]",
                "count": "[variables('v_ServerRoles')[8].vmCount[parameters('env_Type')].max]"
            },
            "dependsOn": [
                "[concat('Microsoft.Network/networkInterfaces/', toLower(concat(variables('v_EnvironmentPrefix'), '-', parameters('env_Type'), parameters('env_Instance'), '-', variables('v_ServerRoles')[8].Name, copyindex(), '-nic')))]",
                "[concat('Microsoft.Storage/storageAccounts/', toLower(concat(variables('v_StorageAccountName'), variables('v_StorageAccounts')[parameters('env_Type')][0].Prefix, parameters('env_Type'), parameters('env_Instance'), 'sa')))]",
                "[concat('Microsoft.Storage/storageAccounts/', toLower(concat(variables('v_StorageAccountName'), variables('v_StorageAccounts')[parameters('env_Type')][2].Prefix, parameters('env_Type'), parameters('env_Instance'), 'sa')))]"
            ],
            "properties": {
                "availabilitySet": {
                    "id": "[resourceId('Microsoft.Compute/availabilitySets', toLower(concat(variables('v_EnvironmentPrefix'), '-', parameters('env_Type'), parameters('env_Instance'), '-', variables('v_ServerRoles')[8].Name, '-as')))]"
                },
                "hardwareProfile": {
                    "vmSize": "[variables('v_ServerRoles')[8].vmSize[parameters('env_Type')]]"
                },
                "osProfile": {
                    "computerName": "[toLower(concat(variables('v_EnvironmentPrefix'), '-', parameters('env_Type'), parameters('env_Instance'), '-', variables('v_ServerRoles')[8].Name, copyindex(), '-vm'))]",
                    "adminUsername": "[variables('v_Username')]",
                    "adminPassword": "[variables('v_Password')]"
                },
                "storageProfile": {
                    "imageReference": {
                        "publisher": "[variables('v_ServerRoles')[8].imagePublisher]",
                        "offer": "[variables('v_ServerRoles')[8].imageOffer]",
                        "sku": "[variables('v_ServerRoles')[8].imageSKU]",
                        "version": "latest"
                    },
                    "osDisk": {
                        "name": "[toLower(concat(variables('v_EnvironmentPrefix'), '-', parameters('env_Type'), parameters('env_Instance'), '-', variables('v_ServerRoles')[8].Name, copyindex(), '-osdisk'))]",
                        "vhd": {
                            "uri": "[concat('http://', toLower(concat(variables('v_StorageAccountName'), variables('v_StorageAccounts')[parameters('env_Type')][0].Prefix, parameters('env_Type'), parameters('env_Instance'), 'sa')), '.blob.core.windows.net/vhds/', toLower(concat(variables('v_EnvironmentPrefix'), '-', parameters('env_Type'), parameters('env_Instance'), '-', variables('v_ServerRoles')[8].Name, copyindex(), '-osdisk')), '.vhd')]"
                        },
                        "caching": "ReadWrite",
                        "createOption": "FromImage"
                    }
                },
                "networkProfile": {
                    "networkInterfaces": [
                        {
                            "id": "[resourceId('Microsoft.Network/networkInterfaces', toLower(concat(variables('v_EnvironmentPrefix'), '-', parameters('env_Type'), parameters('env_Instance'), '-', variables('v_ServerRoles')[8].Name, copyindex(), '-nic')))]"
                        }
                    ]
                },
                "diagnosticsProfile": {
                    "bootDiagnostics": {
                        "enabled": true,
                        "storageUri": "[concat('http://', toLower(concat(variables('v_StorageAccountName'), variables('v_StorageAccounts')[parameters('env_Type')][2].Prefix, parameters('env_Type'), parameters('env_Instance'), 'sa')), '.blob.core.windows.net')]"
                    }
                }
            },
            "resources": [
                {
                    "type":"extensions",
                    "name":"LinuxDiagnostic",
                    "apiVersion":"2015-06-15",
                    "location":"[resourceGroup().location]",
                    "dependsOn":[
                        "[concat('Microsoft.Network/connections/', toLower(concat(variables('v_EnvironmentPrefix'), '-', parameters('env_Type'), parameters('env_Instance'), '-erc')))]",
                        "[concat('Microsoft.Compute/virtualMachines/', toLower(concat(variables('v_EnvironmentPrefix'), '-', parameters('env_Type'), parameters('env_Instance'), '-', variables('v_ServerRoles')[8].Name, copyindex(), '-vm')))]"                    
                    ],
                    "properties":{
                        "publisher":"Microsoft.OSTCExtensions",
                        "type":"LinuxDiagnostic",
                        "typeHandlerVersion":"2.2",
                        "settings":{
                            "xmlCfg": "[base64(concat(variables('wadCfgStart'), variables('wadCfgMemoryPerfCounter'), variables('wadCfgProcessorPerfCounter'), variables('wadCfgDiskPerfCounter'), variables('wadCfgNetworkPerfCounter'), variables('wadCfgResources'), toLower(concat(variables('v_EnvironmentPrefix'), '-', parameters('env_Type'), parameters('env_Instance'), '-', variables('v_ServerRoles')[8].Name, copyindex(), '-vm')), '\">', variables('wadCfgMetrics'), variables('wadCfgEnd')))]",
                            "StorageAccount": "[toLower(concat(variables('v_StorageAccountName'), variables('v_StorageAccounts')[parameters('env_Type')][2].Prefix, parameters('env_Type'), parameters('env_Instance'), 'sa'))]"
                        },
                        "protectedSettings":{
                            "storageAccountName": "[toLower(concat(variables('v_StorageAccountName'), variables('v_StorageAccounts')[parameters('env_Type')][2].Prefix, parameters('env_Type'), parameters('env_Instance'), 'sa'))]",
                            "storageAccountKey": "[listkeys(concat('/subscriptions/', subscription().subscriptionId, '/resourceGroups/', resourceGroup().name, '/providers/','Microsoft.Storage/storageAccounts/', toLower(concat(variables('v_StorageAccountName'), variables('v_StorageAccounts')[parameters('env_Type')][2].Prefix, parameters('env_Type'), parameters('env_Instance'), 'sa'))), '2015-06-15').key1]",
                            "storageAccountEndPoint":"https://core.windows.net/"
                        }
                    }
                }
            ],
            "tags": {
                "Name": "[toLower(concat(variables('v_EnvironmentPrefix'), '-', parameters('env_Type'), parameters('env_Instance'), '-', variables('v_ServerRoles')[8].Name, copyindex(), '-vm'))]",
                "env_Brand": "[toLower(parameters('env_Brand'))]",
                "env_Description": "[toLower(parameters('env_Description'))]",
                "env_Type": "[toLower(parameters('env_Type'))]",
                "env_Instance": "[toLower(string(parameters('env_Instance')))]",
                "env_Owner": "[toLower(parameters('env_Owner'))]",
                "env_Location": "[resourceGroup().location]",
                "env_TemplateCreator": "[toLower(variables('v_TemplateCreator'))]",
                "env_TemplateVersion": "[toLower(variables('v_TemplateVersion'))]"
            }
        },
        {
            "type": "Microsoft.Compute/virtualMachines/extensions",
            "comments": "Web Accelerator Server Puppet Installation Extension",
            "name": "[toLower(concat(variables('v_EnvironmentPrefix'), '-', parameters('env_Type'), parameters('env_Instance'), '-', variables('v_ServerRoles')[0].Name, copyindex(), '-vm','/puppetinstallscript'))]",
            "apiVersion": "2015-06-15",
            "location": "[resourceGroup().location]",
            "copy": {
                "name": "[toLower(concat('vm', variables('v_ServerRoles')[0].Name, 'Loop'))]",
                "count": "[variables('v_ServerRoles')[0].vmCount[parameters('env_Type')].max]"
            },
            "dependsOn": [
                "[concat('Microsoft.Network/connections/', toLower(concat(variables('v_EnvironmentPrefix'), '-', parameters('env_Type'), parameters('env_Instance'), '-erc')))]",
                "[concat('Microsoft.Compute/virtualMachines/', toLower(concat(variables('v_EnvironmentPrefix'), '-', parameters('env_Type'), parameters('env_Instance'), '-', variables('v_ServerRoles')[0].Name, copyindex(), '-vm')))]",
                "[concat('Microsoft.Compute/virtualMachines/', toLower(concat(variables('v_EnvironmentPrefix'), '-', parameters('env_Type'), parameters('env_Instance'), '-', variables('v_ServerRoles')[0].Name, copyindex(), '-vm')), '/extensions/LinuxDiagnostic')]"
            ],
            "properties": {
                "publisher": "Microsoft.OSTCExtensions",
                "type": "CustomScriptForLinux",
                "typeHandlerVersion": "1.4",
                "autoUpgradeMinorVersion": true,
                "settings": {
                    "fileUris": [
                        "[variables('v_PuppetScriptLocation')]"
                    ],
                    "commandToExecute": "[concat('sh install_puppet.sh', ' --environmentplatform=\"', 'azure', '\" --environmentlocation=\"', toLower(resourceGroup().location), '\" --environmentname=\"', toLower(concat(variables('v_EnvironmentPrefix'), '-', parameters('env_Type'), parameters('env_Instance'))), '\" --environmentbrand=\"', toLower(parameters('env_Brand')), '\" --environmentdescription=\"', parameters('env_Description'), '\" --environmenttype=\"', toLower(parameters('env_Type')), '\" --environmentinstance=\"', parameters('env_Instance'), '\" --environmentowner=\"', toLower(parameters('env_Owner')), '\" --servername=\"', toLower(concat(variables('v_EnvironmentPrefix'), '-', parameters('env_Type'), parameters('env_Instance'), '-', variables('v_ServerRoles')[0].Name, copyindex(), '-vm')), '\" --servertype=\"', toLower(variables('v_ServerRoles')[0].Name), '\" --serverinstance=\"', copyindex(), '\" --gitrepository=\"', parameters('env_GitRepository'), '\" --gitusername=\"', parameters('env_GitUsername'), '\" --gitpassword=\"', parameters('env_GitPassword'), '\" --puppetserver=\"', parameters('env_PuppetServer'), '\" --resourcegroup=\"', resourceGroup().name, '\" --storageaccountname=\"', toLower(concat(variables('v_StorageAccountName'), variables('v_StorageAccounts')[parameters('env_Type')][1].Prefix, parameters('env_Type'), parameters('env_Instance'), 'sa')), '\"')]"
                }
            },
            "tags": {
                "Name": "[toLower(concat(variables('v_EnvironmentPrefix'), '-', parameters('env_Type'), parameters('env_Instance'), '-', variables('v_ServerRoles')[0].Name, copyindex(), '-vm','/puppetinstallscript'))]",
                "env_Brand": "[toLower(parameters('env_Brand'))]",
                "env_Description": "[toLower(parameters('env_Description'))]",
                "env_Type": "[toLower(parameters('env_Type'))]",
                "env_Instance": "[toLower(string(parameters('env_Instance')))]",
                "env_Owner": "[toLower(parameters('env_Owner'))]",
                "env_Location": "[resourceGroup().location]",
                "env_TemplateCreator": "[toLower(variables('v_TemplateCreator'))]",
                "env_TemplateVersion": "[toLower(variables('v_TemplateVersion'))]"
            }
        },
        {
            "type": "Microsoft.Compute/virtualMachines/extensions",
            "comments": "Admin Server Puppet Installation Extension",
            "name": "[toLower(concat(variables('v_EnvironmentPrefix'), '-', parameters('env_Type'), parameters('env_Instance'), '-', variables('v_ServerRoles')[1].Name, copyindex(), '-vm','/puppetinstallscript'))]",
            "apiVersion": "2015-06-15",
            "location": "[resourceGroup().location]",
            "copy": {
                "name": "[toLower(concat('vm', variables('v_ServerRoles')[1].Name, 'Loop'))]",
                "count": "[variables('v_ServerRoles')[1].vmCount[parameters('env_Type')].max]"
            },
            "dependsOn": [
                "[concat('Microsoft.Network/connections/', toLower(concat(variables('v_EnvironmentPrefix'), '-', parameters('env_Type'), parameters('env_Instance'), '-erc')))]",
                "[concat('Microsoft.Compute/virtualMachines/', toLower(concat(variables('v_EnvironmentPrefix'), '-', parameters('env_Type'), parameters('env_Instance'), '-', variables('v_ServerRoles')[1].Name, copyindex(), '-vm')))]",
                "[concat('Microsoft.Compute/virtualMachines/', toLower(concat(variables('v_EnvironmentPrefix'), '-', parameters('env_Type'), parameters('env_Instance'), '-', variables('v_ServerRoles')[1].Name, copyindex(), '-vm')), '/extensions/LinuxDiagnostic')]",
                "[concat('Microsoft.Compute/virtualMachines/', toLower(concat(variables('v_EnvironmentPrefix'), '-', parameters('env_Type'), parameters('env_Instance'), '-', variables('v_ServerRoles')[5].Name, copyindex(), '-vm')), '/extensions/puppetinstallscript')]"
            ],
            "properties": {
                "publisher": "Microsoft.OSTCExtensions",
                "type": "CustomScriptForLinux",
                "typeHandlerVersion": "1.4",
                "autoUpgradeMinorVersion": true,
                "settings": {
                    "fileUris": [
                        "[variables('v_PuppetScriptLocation')]"
                    ],
                    "commandToExecute": "[concat('sh install_puppet.sh', ' --environmentplatform=\"', 'azure', '\" --environmentlocation=\"', toLower(resourceGroup().location), '\" --environmentname=\"', toLower(concat(variables('v_EnvironmentPrefix'), '-', parameters('env_Type'), parameters('env_Instance'))), '\" --environmentbrand=\"', toLower(parameters('env_Brand')), '\" --environmentdescription=\"', parameters('env_Description'), '\" --environmenttype=\"', toLower(parameters('env_Type')), '\" --environmentinstance=\"', parameters('env_Instance'), '\" --environmentowner=\"', toLower(parameters('env_Owner')), '\" --servername=\"', toLower(concat(variables('v_EnvironmentPrefix'), '-', parameters('env_Type'), parameters('env_Instance'), '-', variables('v_ServerRoles')[1].Name, copyindex(), '-vm')), '\" --servertype=\"', toLower(variables('v_ServerRoles')[1].Name), '\" --serverinstance=\"', copyindex(), '\" --gitrepository=\"', parameters('env_GitRepository'), '\" --gitusername=\"', parameters('env_GitUsername'), '\" --gitpassword=\"', parameters('env_GitPassword'), '\" --puppetserver=\"', parameters('env_PuppetServer'), '\" --resourcegroup=\"', resourceGroup().name, '\" --storageaccountname=\"', toLower(concat(variables('v_StorageAccountName'), variables('v_StorageAccounts')[parameters('env_Type')][1].Prefix, parameters('env_Type'), parameters('env_Instance'), 'sa')), '\"')]"
                }
            },
            "tags": {
                "Name": "[toLower(concat(variables('v_EnvironmentPrefix'), '-', parameters('env_Type'), parameters('env_Instance'), '-', variables('v_ServerRoles')[1].Name, copyindex(), '-vm','/puppetinstallscript'))]",
                "env_Brand": "[toLower(parameters('env_Brand'))]",
                "env_Description": "[toLower(parameters('env_Description'))]",
                "env_Type": "[toLower(parameters('env_Type'))]",
                "env_Instance": "[toLower(string(parameters('env_Instance')))]",
                "env_Owner": "[toLower(parameters('env_Owner'))]",
                "env_Location": "[resourceGroup().location]",
                "env_TemplateCreator": "[toLower(variables('v_TemplateCreator'))]",
                "env_TemplateVersion": "[toLower(variables('v_TemplateVersion'))]"
            }
        },
        {
            "type": "Microsoft.Compute/virtualMachines/extensions",
            "comments": "App Server Puppet Installation Extension",
            "name": "[toLower(concat(variables('v_EnvironmentPrefix'), '-', parameters('env_Type'), parameters('env_Instance'), '-', variables('v_ServerRoles')[2].Name, copyindex(), '-vm','/puppetinstallscript'))]",
            "apiVersion": "2015-06-15",
            "location": "[resourceGroup().location]",
            "copy": {
                "name": "[toLower(concat('vm', variables('v_ServerRoles')[2].Name, 'Loop'))]",
                "count": "[variables('v_ServerRoles')[2].vmCount[parameters('env_Type')].max]"
            },
            "dependsOn": [
                "[concat('Microsoft.Network/connections/', toLower(concat(variables('v_EnvironmentPrefix'), '-', parameters('env_Type'), parameters('env_Instance'), '-erc')))]",
                "[concat('Microsoft.Compute/virtualMachines/', toLower(concat(variables('v_EnvironmentPrefix'), '-', parameters('env_Type'), parameters('env_Instance'), '-', variables('v_ServerRoles')[2].Name, copyindex(), '-vm')))]",
                "[concat('Microsoft.Compute/virtualMachines/', toLower(concat(variables('v_EnvironmentPrefix'), '-', parameters('env_Type'), parameters('env_Instance'), '-', variables('v_ServerRoles')[2].Name, copyindex(), '-vm')), '/extensions/LinuxDiagnostic')]",
                "[concat('Microsoft.Compute/virtualMachines/', toLower(concat(variables('v_EnvironmentPrefix'), '-', parameters('env_Type'), parameters('env_Instance'), '-', variables('v_ServerRoles')[5].Name, copyindex(), '-vm')), '/extensions/puppetinstallscript')]"
            ],
            "properties": {
                "publisher": "Microsoft.OSTCExtensions",
                "type": "CustomScriptForLinux",
                "typeHandlerVersion": "1.4",
                "autoUpgradeMinorVersion": true,
                "settings": {
                    "fileUris": [
                        "[variables('v_PuppetScriptLocation')]"
                    ],
                    "commandToExecute": "[concat('sh install_puppet.sh', ' --environmentplatform=\"', 'azure', '\" --environmentlocation=\"', toLower(resourceGroup().location), '\" --environmentname=\"', toLower(concat(variables('v_EnvironmentPrefix'), '-', parameters('env_Type'), parameters('env_Instance'))), '\" --environmentbrand=\"', toLower(parameters('env_Brand')), '\" --environmentdescription=\"', parameters('env_Description'), '\" --environmenttype=\"', toLower(parameters('env_Type')), '\" --environmentinstance=\"', parameters('env_Instance'), '\" --environmentowner=\"', toLower(parameters('env_Owner')), '\" --servername=\"', toLower(concat(variables('v_EnvironmentPrefix'), '-', parameters('env_Type'), parameters('env_Instance'), '-', variables('v_ServerRoles')[2].Name, copyindex(), '-vm')), '\" --servertype=\"', toLower(variables('v_ServerRoles')[2].Name), '\" --serverinstance=\"', copyindex(), '\" --gitrepository=\"', parameters('env_GitRepository'), '\" --gitusername=\"', parameters('env_GitUsername'), '\" --gitpassword=\"', parameters('env_GitPassword'), '\" --puppetserver=\"', parameters('env_PuppetServer'), '\" --resourcegroup=\"', resourceGroup().name, '\" --storageaccountname=\"', toLower(concat(variables('v_StorageAccountName'), variables('v_StorageAccounts')[parameters('env_Type')][1].Prefix, parameters('env_Type'), parameters('env_Instance'), 'sa')), '\"')]"
                }
            },
            "tags": {
                "Name": "[toLower(concat(variables('v_EnvironmentPrefix'), '-', parameters('env_Type'), parameters('env_Instance'), '-', variables('v_ServerRoles')[2].Name, copyindex(), '-vm','/puppetinstallscript'))]",
                "env_Brand": "[toLower(parameters('env_Brand'))]",
                "env_Description": "[toLower(parameters('env_Description'))]",
                "env_Type": "[toLower(parameters('env_Type'))]",
                "env_Instance": "[toLower(string(parameters('env_Instance')))]",
                "env_Owner": "[toLower(parameters('env_Owner'))]",
                "env_Location": "[resourceGroup().location]",
                "env_TemplateCreator": "[toLower(variables('v_TemplateCreator'))]",
                "env_TemplateVersion": "[toLower(variables('v_TemplateVersion'))]"
            }
        },
        {
            "type": "Microsoft.Compute/virtualMachines/extensions",
            "comments": "Search Master Server Puppet Installation Extension",
            "name": "[toLower(concat(variables('v_EnvironmentPrefix'), '-', parameters('env_Type'), parameters('env_Instance'), '-', variables('v_ServerRoles')[3].Name, copyindex(), '-vm','/puppetinstallscript'))]",
            "apiVersion": "2015-06-15",
            "location": "[resourceGroup().location]",
            "copy": {
                "name": "[toLower(concat('vm', variables('v_ServerRoles')[3].Name, 'Loop'))]",
                "count": "[variables('v_ServerRoles')[3].vmCount[parameters('env_Type')].max]"
            },
            "dependsOn": [
                "[concat('Microsoft.Network/connections/', toLower(concat(variables('v_EnvironmentPrefix'), '-', parameters('env_Type'), parameters('env_Instance'), '-erc')))]",
                "[concat('Microsoft.Compute/virtualMachines/', toLower(concat(variables('v_EnvironmentPrefix'), '-', parameters('env_Type'), parameters('env_Instance'), '-', variables('v_ServerRoles')[3].Name, copyindex(), '-vm')))]",
                "[concat('Microsoft.Compute/virtualMachines/', toLower(concat(variables('v_EnvironmentPrefix'), '-', parameters('env_Type'), parameters('env_Instance'), '-', variables('v_ServerRoles')[3].Name, copyindex(), '-vm')), '/extensions/LinuxDiagnostic')]"
            ],
            "properties": {
                "publisher": "Microsoft.OSTCExtensions",
                "type": "CustomScriptForLinux",
                "typeHandlerVersion": "1.4",
                "autoUpgradeMinorVersion": true,
                "settings": {
                    "fileUris": [
                        "[variables('v_PuppetScriptLocation')]"
                    ],
                    "commandToExecute": "[concat('sh install_puppet.sh', ' --environmentplatform=\"', 'azure', '\" --environmentlocation=\"', toLower(resourceGroup().location), '\" --environmentname=\"', toLower(concat(variables('v_EnvironmentPrefix'), '-', parameters('env_Type'), parameters('env_Instance'))), '\" --environmentbrand=\"', toLower(parameters('env_Brand')), '\" --environmentdescription=\"', parameters('env_Description'), '\" --environmenttype=\"', toLower(parameters('env_Type')), '\" --environmentinstance=\"', parameters('env_Instance'), '\" --environmentowner=\"', toLower(parameters('env_Owner')), '\" --servername=\"', toLower(concat(variables('v_EnvironmentPrefix'), '-', parameters('env_Type'), parameters('env_Instance'), '-', variables('v_ServerRoles')[3].Name, copyindex(), '-vm')), '\" --servertype=\"', toLower(variables('v_ServerRoles')[3].Name), '\" --serverinstance=\"', copyindex(), '\" --gitrepository=\"', parameters('env_GitRepository'), '\" --gitusername=\"', parameters('env_GitUsername'), '\" --gitpassword=\"', parameters('env_GitPassword'), '\" --puppetserver=\"', parameters('env_PuppetServer'), '\" --resourcegroup=\"', resourceGroup().name, '\" --storageaccountname=\"', toLower(concat(variables('v_StorageAccountName'), variables('v_StorageAccounts')[parameters('env_Type')][1].Prefix, parameters('env_Type'), parameters('env_Instance'), 'sa')), '\"')]"
                }
            },
            "tags": {
                "Name": "[toLower(concat(variables('v_EnvironmentPrefix'), '-', parameters('env_Type'), parameters('env_Instance'), '-', variables('v_ServerRoles')[3].Name, copyindex(), '-vm','/puppetinstallscript'))]",
                "env_Brand": "[toLower(parameters('env_Brand'))]",
                "env_Description": "[toLower(parameters('env_Description'))]",
                "env_Type": "[toLower(parameters('env_Type'))]",
                "env_Instance": "[toLower(string(parameters('env_Instance')))]",
                "env_Owner": "[toLower(parameters('env_Owner'))]",
                "env_Location": "[resourceGroup().location]",
                "env_TemplateCreator": "[toLower(variables('v_TemplateCreator'))]",
                "env_TemplateVersion": "[toLower(variables('v_TemplateVersion'))]"
            }
        },
        {
            "type": "Microsoft.Compute/virtualMachines/extensions",
            "comments": "Search Slave Server Puppet Installation Extension",
            "name": "[toLower(concat(variables('v_EnvironmentPrefix'), '-', parameters('env_Type'), parameters('env_Instance'), '-', variables('v_ServerRoles')[4].Name, copyindex(), '-vm','/puppetinstallscript'))]",
            "apiVersion": "2015-06-15",
            "location": "[resourceGroup().location]",
            "copy": {
                "name": "[toLower(concat('vm', variables('v_ServerRoles')[4].Name, 'Loop'))]",
                "count": "[variables('v_ServerRoles')[4].vmCount[parameters('env_Type')].max]"
            },
            "dependsOn": [
                "[concat('Microsoft.Network/connections/', toLower(concat(variables('v_EnvironmentPrefix'), '-', parameters('env_Type'), parameters('env_Instance'), '-erc')))]",
                "[concat('Microsoft.Compute/virtualMachines/', toLower(concat(variables('v_EnvironmentPrefix'), '-', parameters('env_Type'), parameters('env_Instance'), '-', variables('v_ServerRoles')[4].Name, copyindex(), '-vm')))]",
                "[concat('Microsoft.Compute/virtualMachines/', toLower(concat(variables('v_EnvironmentPrefix'), '-', parameters('env_Type'), parameters('env_Instance'), '-', variables('v_ServerRoles')[4].Name, copyindex(), '-vm')), '/extensions/LinuxDiagnostic')]"
            ],
            "properties": {
                "publisher": "Microsoft.OSTCExtensions",
                "type": "CustomScriptForLinux",
                "typeHandlerVersion": "1.4",
                "autoUpgradeMinorVersion": true,
                "settings": {
                    "fileUris": [
                        "[variables('v_PuppetScriptLocation')]"
                    ],
                    "commandToExecute": "[concat('sh install_puppet.sh', ' --environmentplatform=\"', 'azure', '\" --environmentlocation=\"', toLower(resourceGroup().location), '\" --environmentname=\"', toLower(concat(variables('v_EnvironmentPrefix'), '-', parameters('env_Type'), parameters('env_Instance'))), '\" --environmentbrand=\"', toLower(parameters('env_Brand')), '\" --environmentdescription=\"', parameters('env_Description'), '\" --environmenttype=\"', toLower(parameters('env_Type')), '\" --environmentinstance=\"', parameters('env_Instance'), '\" --environmentowner=\"', toLower(parameters('env_Owner')), '\" --servername=\"', toLower(concat(variables('v_EnvironmentPrefix'), '-', parameters('env_Type'), parameters('env_Instance'), '-', variables('v_ServerRoles')[4].Name, copyindex(), '-vm')), '\" --servertype=\"', toLower(variables('v_ServerRoles')[4].Name), '\" --serverinstance=\"', copyindex(), '\" --gitrepository=\"', parameters('env_GitRepository'), '\" --gitusername=\"', parameters('env_GitUsername'), '\" --gitpassword=\"', parameters('env_GitPassword'), '\" --puppetserver=\"', parameters('env_PuppetServer'), '\" --resourcegroup=\"', resourceGroup().name, '\" --storageaccountname=\"', toLower(concat(variables('v_StorageAccountName'), variables('v_StorageAccounts')[parameters('env_Type')][1].Prefix, parameters('env_Type'), parameters('env_Instance'), 'sa')), '\"')]"
                }
            },
            "tags": {
                "Name": "[toLower(concat(variables('v_EnvironmentPrefix'), '-', parameters('env_Type'), parameters('env_Instance'), '-', variables('v_ServerRoles')[4].Name, copyindex(), '-vm','/puppetinstallscript'))]",
                "env_Brand": "[toLower(parameters('env_Brand'))]",
                "env_Description": "[toLower(parameters('env_Description'))]",
                "env_Type": "[toLower(parameters('env_Type'))]",
                "env_Instance": "[toLower(string(parameters('env_Instance')))]",
                "env_Owner": "[toLower(parameters('env_Owner'))]",
                "env_Location": "[resourceGroup().location]",
                "env_TemplateCreator": "[toLower(variables('v_TemplateCreator'))]",
                "env_TemplateVersion": "[toLower(variables('v_TemplateVersion'))]"
            }
        },
        {
            "type": "Microsoft.Compute/virtualMachines/extensions",
            "comments": "File Server Puppet Installation Extension",
            "name": "[toLower(concat(variables('v_EnvironmentPrefix'), '-', parameters('env_Type'), parameters('env_Instance'), '-', variables('v_ServerRoles')[5].Name, copyindex(), '-vm','/puppetinstallscript'))]",
            "apiVersion": "2015-06-15",
            "location": "[resourceGroup().location]",
            "copy": {
                "name": "[toLower(concat('vm', variables('v_ServerRoles')[5].Name, 'Loop'))]",
                "count": "[variables('v_ServerRoles')[5].vmCount[parameters('env_Type')].max]"
            },
            "dependsOn": [
                "[concat('Microsoft.Network/connections/', toLower(concat(variables('v_EnvironmentPrefix'), '-', parameters('env_Type'), parameters('env_Instance'), '-erc')))]",
                "[concat('Microsoft.Compute/virtualMachines/', toLower(concat(variables('v_EnvironmentPrefix'), '-', parameters('env_Type'), parameters('env_Instance'), '-', variables('v_ServerRoles')[5].Name, copyindex(), '-vm')))]",
                "[concat('Microsoft.Compute/virtualMachines/', toLower(concat(variables('v_EnvironmentPrefix'), '-', parameters('env_Type'), parameters('env_Instance'), '-', variables('v_ServerRoles')[5].Name, copyindex(), '-vm')), '/extensions/LinuxDiagnostic')]"
            ],
            "properties": {
                "publisher": "Microsoft.OSTCExtensions",
                "type": "CustomScriptForLinux",
                "typeHandlerVersion": "1.4",
                "autoUpgradeMinorVersion": true,
                "settings": {
                    "fileUris": [
                        "[variables('v_PuppetScriptLocation')]"
                    ],
                    "commandToExecute": "[concat('sh install_puppet.sh', ' --environmentplatform=\"', 'azure', '\" --environmentlocation=\"', toLower(resourceGroup().location), '\" --environmentname=\"', toLower(concat(variables('v_EnvironmentPrefix'), '-', parameters('env_Type'), parameters('env_Instance'))), '\" --environmentbrand=\"', toLower(parameters('env_Brand')), '\" --environmentdescription=\"', parameters('env_Description'), '\" --environmenttype=\"', toLower(parameters('env_Type')), '\" --environmentinstance=\"', parameters('env_Instance'), '\" --environmentowner=\"', toLower(parameters('env_Owner')), '\" --servername=\"', toLower(concat(variables('v_EnvironmentPrefix'), '-', parameters('env_Type'), parameters('env_Instance'), '-', variables('v_ServerRoles')[5].Name, copyindex(), '-vm')), '\" --servertype=\"', toLower(variables('v_ServerRoles')[5].Name), '\" --serverinstance=\"', copyindex(), '\" --gitrepository=\"', parameters('env_GitRepository'), '\" --gitusername=\"', parameters('env_GitUsername'), '\" --gitpassword=\"', parameters('env_GitPassword'), '\" --puppetserver=\"', parameters('env_PuppetServer'), '\" --resourcegroup=\"', resourceGroup().name, '\" --storageaccountname=\"', toLower(concat(variables('v_StorageAccountName'), variables('v_StorageAccounts')[parameters('env_Type')][1].Prefix, parameters('env_Type'), parameters('env_Instance'), 'sa')), '\"')]"
                }
            },
            "tags": {
                "Name": "[toLower(concat(variables('v_EnvironmentPrefix'), '-', parameters('env_Type'), parameters('env_Instance'), '-', variables('v_ServerRoles')[5].Name, copyindex(), '-vm','/puppetinstallscript'))]",
                "env_Brand": "[toLower(parameters('env_Brand'))]",
                "env_Description": "[toLower(parameters('env_Description'))]",
                "env_Type": "[toLower(parameters('env_Type'))]",
                "env_Instance": "[toLower(string(parameters('env_Instance')))]",
                "env_Owner": "[toLower(parameters('env_Owner'))]",
                "env_Location": "[resourceGroup().location]",
                "env_TemplateCreator": "[toLower(variables('v_TemplateCreator'))]",
                "env_TemplateVersion": "[toLower(variables('v_TemplateVersion'))]"
            }
        },
        {
            "type": "Microsoft.Compute/virtualMachines/extensions",
            "comments": "Database Server Puppet Installation Extension",
            "name": "[toLower(concat(variables('v_EnvironmentPrefix'), '-', parameters('env_Type'), parameters('env_Instance'), '-', variables('v_ServerRoles')[6].Name, copyindex(), '-vm','/puppetinstallscript'))]",
            "apiVersion": "2015-06-15",
            "location": "[resourceGroup().location]",
            "copy": {
                "name": "[toLower(concat('vm', variables('v_ServerRoles')[6].Name, 'Loop'))]",
                "count": "[variables('v_ServerRoles')[6].vmCount[parameters('env_Type')].max]"
            },
            "dependsOn": [
                "[concat('Microsoft.Network/connections/', toLower(concat(variables('v_EnvironmentPrefix'), '-', parameters('env_Type'), parameters('env_Instance'), '-erc')))]",
                "[concat('Microsoft.Compute/virtualMachines/', toLower(concat(variables('v_EnvironmentPrefix'), '-', parameters('env_Type'), parameters('env_Instance'), '-', variables('v_ServerRoles')[6].Name, copyindex(), '-vm')))]",
                "[concat('Microsoft.Compute/virtualMachines/', toLower(concat(variables('v_EnvironmentPrefix'), '-', parameters('env_Type'), parameters('env_Instance'), '-', variables('v_ServerRoles')[6].Name, copyindex(), '-vm')), '/extensions/LinuxDiagnostic')]"
            ],
            "properties": {
                "publisher": "Microsoft.OSTCExtensions",
                "type": "CustomScriptForLinux",
                "typeHandlerVersion": "1.4",
                "autoUpgradeMinorVersion": true,
                "settings": {
                    "fileUris": [
                        "[variables('v_PuppetScriptLocation')]"
                    ],
                    "commandToExecute": "[concat('sh install_puppet.sh', ' --environmentplatform=\"', 'azure', '\" --environmentlocation=\"', toLower(resourceGroup().location), '\" --environmentname=\"', toLower(concat(variables('v_EnvironmentPrefix'), '-', parameters('env_Type'), parameters('env_Instance'))), '\" --environmentbrand=\"', toLower(parameters('env_Brand')), '\" --environmentdescription=\"', parameters('env_Description'), '\" --environmenttype=\"', toLower(parameters('env_Type')), '\" --environmentinstance=\"', parameters('env_Instance'), '\" --environmentowner=\"', toLower(parameters('env_Owner')), '\" --servername=\"', toLower(concat(variables('v_EnvironmentPrefix'), '-', parameters('env_Type'), parameters('env_Instance'), '-', variables('v_ServerRoles')[6].Name, copyindex(), '-vm')), '\" --servertype=\"', toLower(variables('v_ServerRoles')[6].Name), '\" --serverinstance=\"', copyindex(), '\" --gitrepository=\"', parameters('env_GitRepository'), '\" --gitusername=\"', parameters('env_GitUsername'), '\" --gitpassword=\"', parameters('env_GitPassword'), '\" --puppetserver=\"', parameters('env_PuppetServer'), '\" --resourcegroup=\"', resourceGroup().name, '\" --storageaccountname=\"', toLower(concat(variables('v_StorageAccountName'), variables('v_StorageAccounts')[parameters('env_Type')][1].Prefix, parameters('env_Type'), parameters('env_Instance'), 'sa')), '\"')]"
                }
            },
            "tags": {
                "Name": "[toLower(concat(variables('v_EnvironmentPrefix'), '-', parameters('env_Type'), parameters('env_Instance'), '-', variables('v_ServerRoles')[6].Name, copyindex(), '-vm','/puppetinstallscript'))]",
                "env_Brand": "[toLower(parameters('env_Brand'))]",
                "env_Description": "[toLower(parameters('env_Description'))]",
                "env_Type": "[toLower(parameters('env_Type'))]",
                "env_Instance": "[toLower(string(parameters('env_Instance')))]",
                "env_Owner": "[toLower(parameters('env_Owner'))]",
                "env_Location": "[resourceGroup().location]",
                "env_TemplateCreator": "[toLower(variables('v_TemplateCreator'))]",
                "env_TemplateVersion": "[toLower(variables('v_TemplateVersion'))]"
            }
        },
        {
            "type": "Microsoft.Compute/virtualMachines/extensions",
            "comments": "Cache Server Puppet Installation Extension",
            "name": "[toLower(concat(variables('v_EnvironmentPrefix'), '-', parameters('env_Type'), parameters('env_Instance'), '-', variables('v_ServerRoles')[7].Name, copyindex(), '-vm','/puppetinstallscript'))]",
            "apiVersion": "2015-06-15",
            "location": "[resourceGroup().location]",
            "copy": {
                "name": "[toLower(concat('vm', variables('v_ServerRoles')[7].Name, 'Loop'))]",
                "count": "[variables('v_ServerRoles')[7].vmCount[parameters('env_Type')].max]"
            },
            "dependsOn": [
                "[concat('Microsoft.Network/connections/', toLower(concat(variables('v_EnvironmentPrefix'), '-', parameters('env_Type'), parameters('env_Instance'), '-erc')))]",
                "[concat('Microsoft.Compute/virtualMachines/', toLower(concat(variables('v_EnvironmentPrefix'), '-', parameters('env_Type'), parameters('env_Instance'), '-', variables('v_ServerRoles')[7].Name, copyindex(), '-vm')))]",
                "[concat('Microsoft.Compute/virtualMachines/', toLower(concat(variables('v_EnvironmentPrefix'), '-', parameters('env_Type'), parameters('env_Instance'), '-', variables('v_ServerRoles')[7].Name, copyindex(), '-vm')), '/extensions/LinuxDiagnostic')]"
            ],
            "properties": {
                "publisher": "Microsoft.OSTCExtensions",
                "type": "CustomScriptForLinux",
                "typeHandlerVersion": "1.4",
                "autoUpgradeMinorVersion": true,
                "settings": {
                    "fileUris": [
                        "[variables('v_PuppetScriptLocation')]"
                    ],
                    "commandToExecute": "[concat('sh install_puppet.sh', ' --environmentplatform=\"', 'azure', '\" --environmentlocation=\"', toLower(resourceGroup().location), '\" --environmentname=\"', toLower(concat(variables('v_EnvironmentPrefix'), '-', parameters('env_Type'), parameters('env_Instance'))), '\" --environmentbrand=\"', toLower(parameters('env_Brand')), '\" --environmentdescription=\"', parameters('env_Description'), '\" --environmenttype=\"', toLower(parameters('env_Type')), '\" --environmentinstance=\"', parameters('env_Instance'), '\" --environmentowner=\"', toLower(parameters('env_Owner')), '\" --servername=\"', toLower(concat(variables('v_EnvironmentPrefix'), '-', parameters('env_Type'), parameters('env_Instance'), '-', variables('v_ServerRoles')[7].Name, copyindex(), '-vm')), '\" --servertype=\"', toLower(variables('v_ServerRoles')[7].Name), '\" --serverinstance=\"', copyindex(), '\" --gitrepository=\"', parameters('env_GitRepository'), '\" --gitusername=\"', parameters('env_GitUsername'), '\" --gitpassword=\"', parameters('env_GitPassword'), '\" --puppetserver=\"', parameters('env_PuppetServer'), '\" --resourcegroup=\"', resourceGroup().name, '\" --storageaccountname=\"', toLower(concat(variables('v_StorageAccountName'), variables('v_StorageAccounts')[parameters('env_Type')][1].Prefix, parameters('env_Type'), parameters('env_Instance'), 'sa')), '\"')]"
                }
            },
            "tags": {
                "Name": "[toLower(concat(variables('v_EnvironmentPrefix'), '-', parameters('env_Type'), parameters('env_Instance'), '-', variables('v_ServerRoles')[7].Name, copyindex(), '-vm','/puppetinstallscript'))]",
                "env_Brand": "[toLower(parameters('env_Brand'))]",
                "env_Description": "[toLower(parameters('env_Description'))]",
                "env_Type": "[toLower(parameters('env_Type'))]",
                "env_Instance": "[toLower(string(parameters('env_Instance')))]",
                "env_Owner": "[toLower(parameters('env_Owner'))]",
                "env_Location": "[resourceGroup().location]",
                "env_TemplateCreator": "[toLower(variables('v_TemplateCreator'))]",
                "env_TemplateVersion": "[toLower(variables('v_TemplateVersion'))]"
            }
        },
        {
            "type": "Microsoft.Compute/virtualMachines/extensions",
            "comments": "Util Server Puppet Installation Extension",
            "name": "[toLower(concat(variables('v_EnvironmentPrefix'), '-', parameters('env_Type'), parameters('env_Instance'), '-', variables('v_ServerRoles')[8].Name, copyindex(), '-vm','/puppetinstallscript'))]",
            "apiVersion": "2015-06-15",
            "location": "[resourceGroup().location]",
            "copy": {
                "name": "[toLower(concat('vm', variables('v_ServerRoles')[8].Name, 'Loop'))]",
                "count": "[variables('v_ServerRoles')[8].vmCount[parameters('env_Type')].max]"
            },
            "dependsOn": [
                "[concat('Microsoft.Network/connections/', toLower(concat(variables('v_EnvironmentPrefix'), '-', parameters('env_Type'), parameters('env_Instance'), '-erc')))]",
                "[concat('Microsoft.Compute/virtualMachines/', toLower(concat(variables('v_EnvironmentPrefix'), '-', parameters('env_Type'), parameters('env_Instance'), '-', variables('v_ServerRoles')[8].Name, copyindex(), '-vm')))]",
                "[concat('Microsoft.Compute/virtualMachines/', toLower(concat(variables('v_EnvironmentPrefix'), '-', parameters('env_Type'), parameters('env_Instance'), '-', variables('v_ServerRoles')[8].Name, copyindex(), '-vm')), '/extensions/LinuxDiagnostic')]",
                "[concat('Microsoft.Compute/virtualMachines/', toLower(concat(variables('v_EnvironmentPrefix'), '-', parameters('env_Type'), parameters('env_Instance'), '-', variables('v_ServerRoles')[6].Name, copyindex(), '-vm')), '/extensions/puppetinstallscript')]"
            ],
            "properties": {
                "publisher": "Microsoft.OSTCExtensions",
                "type": "CustomScriptForLinux",
                "typeHandlerVersion": "1.4",
                "autoUpgradeMinorVersion": true,
                "settings": {
                    "fileUris": [
                        "[variables('v_PuppetScriptLocation')]"
                    ],
                    "commandToExecute": "[concat('sh install_puppet.sh', ' --environmentplatform=\"', 'azure', '\" --environmentlocation=\"', toLower(resourceGroup().location), '\" --environmentname=\"', toLower(concat(variables('v_EnvironmentPrefix'), '-', parameters('env_Type'), parameters('env_Instance'))), '\" --environmentbrand=\"', toLower(parameters('env_Brand')), '\" --environmentdescription=\"', parameters('env_Description'), '\" --environmenttype=\"', toLower(parameters('env_Type')), '\" --environmentinstance=\"', parameters('env_Instance'), '\" --environmentowner=\"', toLower(parameters('env_Owner')), '\" --servername=\"', toLower(concat(variables('v_EnvironmentPrefix'), '-', parameters('env_Type'), parameters('env_Instance'), '-', variables('v_ServerRoles')[8].Name, copyindex(), '-vm')), '\" --servertype=\"', toLower(variables('v_ServerRoles')[8].Name), '\" --serverinstance=\"', copyindex(), '\" --gitrepository=\"', parameters('env_GitRepository'), '\" --gitusername=\"', parameters('env_GitUsername'), '\" --gitpassword=\"', parameters('env_GitPassword'), '\" --puppetserver=\"', parameters('env_PuppetServer'), '\" --resourcegroup=\"', resourceGroup().name, '\" --storageaccountname=\"', toLower(concat(variables('v_StorageAccountName'), variables('v_StorageAccounts')[parameters('env_Type')][1].Prefix, parameters('env_Type'), parameters('env_Instance'), 'sa')), '\"')]"
                }
            },
            "tags": {
                "Name": "[toLower(concat(variables('v_EnvironmentPrefix'), '-', parameters('env_Type'), parameters('env_Instance'), '-', variables('v_ServerRoles')[8].Name, copyindex(), '-vm','/puppetinstallscript'))]",
                "env_Brand": "[toLower(parameters('env_Brand'))]",
                "env_Description": "[toLower(parameters('env_Description'))]",
                "env_Type": "[toLower(parameters('env_Type'))]",
                "env_Instance": "[toLower(string(parameters('env_Instance')))]",
                "env_Owner": "[toLower(parameters('env_Owner'))]",
                "env_Location": "[resourceGroup().location]",
                "env_TemplateCreator": "[toLower(variables('v_TemplateCreator'))]",
                "env_TemplateVersion": "[toLower(variables('v_TemplateVersion'))]"
            }
        },
        {
            "type": "Microsoft.Automation/automationAccounts",
            "comments": "Web Automation Account",
            "name": "[toLower(concat(variables('v_EnvironmentPrefix'), '-', parameters('env_Type'), parameters('env_Instance'), '-ac'))]",
            "apiVersion": "2015-01-01-preview",
            "location": "Australia Southeast",
            "properties": {
                "sku": {
                    "name": "Basic"
                }
            },
            "resources": [
                {
                    "type": "credentials",
                    "comments": "Credentials used to run the associated runbooks",
                    "name": "AzureCredential",
                    "apiVersion": "2015-01-01-preview",
                    "location": "Australia Southeast",
                    "dependsOn": [
                        "[concat('Microsoft.Automation/automationAccounts/', toLower(concat(variables('v_EnvironmentPrefix'), '-', parameters('env_Type'), parameters('env_Instance'), '-ac')))]"
                    ],
                    "properties": {
                        "userName": "[variables('v_azureUsername')]",
                        "password": "[parameters('env_azurePassword')]"
                    },
                    "tags": {
                        "Name": "AzureCredential",
                        "env_Brand": "[toLower(parameters('env_Brand'))]",
                        "env_Description": "[toLower(parameters('env_Description'))]",
                        "env_Type": "[toLower(parameters('env_Type'))]",
                        "env_Instance": "[toLower(string(parameters('env_Instance')))]",
                        "env_Owner": "[toLower(parameters('env_Owner'))]",
                        "env_Location": "Australia Southeast",
                        "env_TemplateCreator": "[toLower(variables('v_TemplateCreator'))]",
                        "env_TemplateVersion": "[toLower(variables('v_TemplateVersion'))]"
                    }
                },
                {
                    "type": "variables",
                    "comments": "Subscription ID required to shutdown / startup the VM's automatically",
                    "name": "AzureSubscriptionId",
                    "apiVersion": "2015-01-01-preview",
                    "location": "Australia Southeast",
                    "dependsOn": [
                        "[concat('Microsoft.Automation/automationAccounts/', toLower(concat(variables('v_EnvironmentPrefix'), '-', parameters('env_Type'), parameters('env_Instance'), '-ac')))]"
                    ],
                    "properties": {
                        "description":"Azure Subscription ID",
                        "isEncrypted":0,
                        "type": "string",
                        "value": "[concat('\"', subscription().subscriptionId, '\"')]"
                    },
                    "tags": {
                        "Name": "AzureSubscriptionId",
                        "env_Brand": "[toLower(parameters('env_Brand'))]",
                        "env_Description": "[toLower(parameters('env_Description'))]",
                        "env_Type": "[toLower(parameters('env_Type'))]",
                        "env_Instance": "[toLower(string(parameters('env_Instance')))]",
                        "env_Owner": "[toLower(parameters('env_Owner'))]",
                        "env_Location": "Australia Southeast",
                        "env_TemplateCreator": "[toLower(variables('v_TemplateCreator'))]",
                        "env_TemplateVersion": "[toLower(variables('v_TemplateVersion'))]"
                    }
                },
                {
                    "type": "variables",
                    "comments": "Resource Group Name required to shutdown / startup the VM's automatically",
                    "name": "AzureResourceGroup",
                    "apiVersion": "2015-01-01-preview",
                    "location": "Australia Southeast",
                    "dependsOn": [
                        "[concat('Microsoft.Automation/automationAccounts/', toLower(concat(variables('v_EnvironmentPrefix'), '-', parameters('env_Type'), parameters('env_Instance'), '-ac')))]"
                    ],
                    "properties": {
                        "description":"Azure Resource Group Name",
                        "isEncrypted":0,
                        "type": "string",
                        "value": "[toLower(concat('\"', variables('v_EnvironmentPrefix'), '-', parameters('env_Type'), parameters('env_Instance'), '\"'))]"
                    },
                    "tags": {
                        "Name": "AzureResourceGroup",
                        "env_Brand": "[toLower(parameters('env_Brand'))]",
                        "env_Description": "[toLower(parameters('env_Description'))]",
                        "env_Type": "[toLower(parameters('env_Type'))]",
                        "env_Instance": "[toLower(string(parameters('env_Instance')))]",
                        "env_Owner": "[toLower(parameters('env_Owner'))]",
                        "env_Location": "Australia Southeast",
                        "env_TemplateCreator": "[toLower(variables('v_TemplateCreator'))]",
                        "env_TemplateVersion": "[toLower(variables('v_TemplateVersion'))]"
                    }
                },
                {
                    "type": "runbooks",
                    "comments": "Startup Runbook - Used to start VM's",
                    "name": "[toLower(concat(variables('v_EnvironmentPrefix'), '-', parameters('env_Type'), parameters('env_Instance'), '-startup-rb'))]",
                    "apiVersion": "2015-01-01-preview",
                    "location": "Australia Southeast",
                    "dependsOn": [
                        "[concat('Microsoft.Automation/automationAccounts/', toLower(concat(variables('v_EnvironmentPrefix'), '-', parameters('env_Type'), parameters('env_Instance'), '-ac')))]"
                    ],
                    "properties": {
                        "runbookType": "Graph",
                        "logProgress": "false",
                        "logVerbose": "false",
                        "description": "Starts all VMs at a set time",
                        "publishContentLink": {
                            "uri": "[variables('v_AzureStartScript')]",
                            "version": "1.0.0.0"
                        }
                    },
                    "tags": {
                        "Name": "[toLower(concat(variables('v_EnvironmentPrefix'), '-', parameters('env_Type'), parameters('env_Instance'), '-startup-rb'))]",
                        "env_Brand": "[toLower(parameters('env_Brand'))]",
                        "env_Description": "[toLower(parameters('env_Description'))]",
                        "env_Type": "[toLower(parameters('env_Type'))]",
                        "env_Instance": "[toLower(string(parameters('env_Instance')))]",
                        "env_Owner": "[toLower(parameters('env_Owner'))]",
                        "env_Location": "Australia Southeast",
                        "env_TemplateCreator": "[toLower(variables('v_TemplateCreator'))]",
                        "env_TemplateVersion": "[toLower(variables('v_TemplateVersion'))]"
                    }
                },
                {
                    "type": "schedules",
                    "comments": "A start time for starting VM's",
                    "name": "[toLower(concat(variables('v_EnvironmentPrefix'), '-', parameters('env_Type'), parameters('env_Instance'), '-startup-rs'))]",
                    "apiVersion": "2015-01-01-preview",
                    "location": "Australia Southeast",
                    "dependsOn": [
                        "[concat('Microsoft.Automation/automationAccounts/', toLower(concat(variables('v_EnvironmentPrefix'), '-', parameters('env_Type'), parameters('env_Instance'), '-ac')))]"
                    ],
                    "properties": {
                        "description": "Startup Schedule",
                        "startTime": "[parameters('env_startupUtcDateTime')]",
                        "isEnabled": "true",
                        "interval": "1",
                        "frequency": "day"
                    },
                    "tags": {
                        "Name": "[toLower(concat(variables('v_EnvironmentPrefix'), '-', parameters('env_Type'), parameters('env_Instance'), '-startup-rs'))]",
                        "env_Brand": "[toLower(parameters('env_Brand'))]",
                        "env_Description": "[toLower(parameters('env_Description'))]",
                        "env_Type": "[toLower(parameters('env_Type'))]",
                        "env_Instance": "[toLower(string(parameters('env_Instance')))]",
                        "env_Owner": "[toLower(parameters('env_Owner'))]",
                        "env_Location": "Australia Southeast",
                        "env_TemplateCreator": "[toLower(variables('v_TemplateCreator'))]",
                        "env_TemplateVersion": "[toLower(variables('v_TemplateVersion'))]"
                    }
                },
                {
                    "type": "runbooks",
                    "comments": "Shutdown Runbook - Used to stop VM's",
                    "name": "[toLower(concat(variables('v_EnvironmentPrefix'), '-', parameters('env_Type'), parameters('env_Instance'), '-shutdown-rb'))]",
                    "apiVersion": "2015-01-01-preview",
                    "location": "Australia Southeast",
                    "dependsOn": [
                        "[concat('Microsoft.Automation/automationAccounts/', toLower(concat(variables('v_EnvironmentPrefix'), '-', parameters('env_Type'), parameters('env_Instance'), '-ac')))]"
                    ],
                    "properties": {
                        "runbookType": "Graph",
                        "logProgress": "false",
                        "logVerbose": "false",
                        "description": "Shuts down all VMs at a set time",
                        "publishContentLink": {
                            "uri": "[variables('v_AzureShutdownScript')]",
                            "version": "1.0.0.0"
                        }
                    },
                    "tags": {
                        "Name": "[toLower(concat(variables('v_EnvironmentPrefix'), '-', parameters('env_Type'), parameters('env_Instance'), '-shutdown-rb'))]",
                        "env_Brand": "[toLower(parameters('env_Brand'))]",
                        "env_Description": "[toLower(parameters('env_Description'))]",
                        "env_Type": "[toLower(parameters('env_Type'))]",
                        "env_Instance": "[toLower(string(parameters('env_Instance')))]",
                        "env_Owner": "[toLower(parameters('env_Owner'))]",
                        "env_Location": "Australia Southeast",
                        "env_TemplateCreator": "[toLower(variables('v_TemplateCreator'))]",
                        "env_TemplateVersion": "[toLower(variables('v_TemplateVersion'))]"
                    }
                },
                {
                    "type": "schedules",
                    "comments": "A shutdown time for stopping VM's",
                    "name": "[toLower(concat(variables('v_EnvironmentPrefix'), '-', parameters('env_Type'), parameters('env_Instance'), '-shutdown-rs'))]",
                    "apiVersion": "2015-01-01-preview",
                    "location": "Australia Southeast",
                    "dependsOn": [
                        "[concat('Microsoft.Automation/automationAccounts/', toLower(concat(variables('v_EnvironmentPrefix'), '-', parameters('env_Type'), parameters('env_Instance'), '-ac')))]"
                    ],
                    "properties": {
                        "description": "Shutdown Schedule",
                        "startTime": "[parameters('env_shutdownUtcDateTime')]",
                        "isEnabled": "true",
                        "interval": "1",
                        "frequency": "day"
                    },
                    "tags": {
                        "Name": "[toLower(concat(variables('v_EnvironmentPrefix'), '-', parameters('env_Type'), parameters('env_Instance'), '-shutdown-rs'))]",
                        "env_Brand": "[toLower(parameters('env_Brand'))]",
                        "env_Description": "[toLower(parameters('env_Description'))]",
                        "env_Type": "[toLower(parameters('env_Type'))]",
                        "env_Instance": "[toLower(string(parameters('env_Instance')))]",
                        "env_Owner": "[toLower(parameters('env_Owner'))]",
                        "env_Location": "Australia Southeast",
                        "env_TemplateCreator": "[toLower(variables('v_TemplateCreator'))]",
                        "env_TemplateVersion": "[toLower(variables('v_TemplateVersion'))]"
                    }
                },
                {
                    "type": "jobSchedules",
                    "comments": "Create a job schedule used to stop VM's at a set time",
                    "name": "[parameters('env_jobScheduleGUID')]",
                    "apiVersion": "2015-01-01-preview",
                    "location": "Australia Southeast",
                    "dependsOn": [
                        "[concat('Microsoft.Automation/automationAccounts/', toLower(concat(variables('v_EnvironmentPrefix'), '-', parameters('env_Type'), parameters('env_Instance'), '-ac')))]",
                        "[concat('Microsoft.Automation/automationAccounts/', toLower(concat(variables('v_EnvironmentPrefix'), '-', parameters('env_Type'), parameters('env_Instance'), '-ac')), '/schedules/', toLower(concat(variables('v_EnvironmentPrefix'), '-', parameters('env_Type'), parameters('env_Instance'), '-shutdown-rs')))]",
                        "[concat('Microsoft.Automation/automationAccounts/', toLower(concat(variables('v_EnvironmentPrefix'), '-', parameters('env_Type'), parameters('env_Instance'), '-ac')), '/runbooks/', toLower(concat(variables('v_EnvironmentPrefix'), '-', parameters('env_Type'), parameters('env_Instance'), '-shutdown-rb')))]"
                    ],
                    "properties": {
                        "schedule": {
                            "name": "[toLower(concat(variables('v_EnvironmentPrefix'), '-', parameters('env_Type'), parameters('env_Instance'), '-shutdown-rs'))]"
                        },
                        "runbook": {
                            "name": "[toLower(concat(variables('v_EnvironmentPrefix'), '-', parameters('env_Type'), parameters('env_Instance'), '-shutdown-rb'))]"
                        }
                    }
                }
            ],
            "tags": {
                "Name": "[toLower(concat(variables('v_EnvironmentPrefix'), '-', parameters('env_Type'), parameters('env_Instance'), '-ac'))]",
                "env_Brand": "[toLower(parameters('env_Brand'))]",
                "env_Description": "[toLower(parameters('env_Description'))]",
                "env_Type": "[toLower(parameters('env_Type'))]",
                "env_Instance": "[toLower(string(parameters('env_Instance')))]",
                "env_Owner": "[toLower(parameters('env_Owner'))]",
                "env_Location": "Australia Southeast",
                "env_TemplateCreator": "[toLower(variables('v_TemplateCreator'))]",
                "env_TemplateVersion": "[toLower(variables('v_TemplateVersion'))]"
            }
        }
	]
}